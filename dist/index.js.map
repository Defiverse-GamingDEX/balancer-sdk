{"version":3,"file":"index.js","sources":["../../src/pool-stable/encoder.ts","../../src/pool-weighted/encoder.ts","../../src/pool-composable-stable/encoder.ts","../node_modules/tiny-invariant/dist/esm/tiny-invariant.js","../../src/pool-utils/poolId.ts","../../src/lib/constants/network.ts","../../src/lib/constants/pools.ts","../../src/lib/utils/assetHelpers.ts","../../src/lib/utils/errors.ts","../../src/lib/utils/signatures.ts","../../src/lib/utils/permit.ts","../../src/lib/utils/solidityMaths.ts","../../src/lib/utils/poolHelper.ts","../../src/lib/constants/tokens.ts","../../src/modules/data/pool-gauges/types.ts","../../src/modules/data/pool-shares/types.ts","../../src/modules/data/gauge-shares/types.ts","../../src/types.ts","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/units/lib.esm/_version.js","../node_modules/@ethersproject/units/lib.esm/index.js","../../src/modules/data/token-yields/tokens/aave.ts","../../src/lib/utils/tokens.ts","../../src/lib/utils/debouncer.ts","../../src/lib/utils/math.ts","../../src/lib/utils/index.ts","../../src/lib/graphql/formatters/balancer-api.ts","../../src/lib/graphql/formatters/subgraph.ts","../../src/lib/graphql/args-builder.ts","../../src/modules/swaps/types.ts","../../src/modules/swaps/helpers.ts","../../src/lib/utils/slippageHelper.ts","../../src/lib/constants/config.ts","../../src/balancerErrors.ts","../../src/modules/pools/pool-types/concerns/stable/exit.concern.ts","../../src/modules/pools/pool-types/concerns/stable/join.concern.ts","../../src/modules/pools/pool-types/concerns/stable/liquidity.concern.ts","../../src/modules/pools/pool-types/concerns/stable/spotPrice.concern.ts","../../src/modules/pricing/priceImpact.ts","../../src/lib/utils/stableMathHelpers.ts","../../src/modules/pools/pool-types/concerns/stable/priceImpact.concern.ts","../../src/modules/pools/pool-types/stable.module.ts","../../src/modules/pools/pool-types/concerns/stablePhantom/spotPrice.concern.ts","../../src/modules/pools/pool-types/concerns/stablePhantom/priceImpact.concern.ts","../../src/modules/pools/pool-types/concerns/composableStable/join.concern.ts","../../src/modules/pools/pool-types/concerns/composableStable/exit.concern.ts","../../src/modules/pools/pool-types/composableStable.module.ts","../../src/modules/pools/pool-types/concerns/weighted/exit.concern.ts","../../src/modules/pools/pool-types/concerns/weighted/join.concern.ts","../../src/modules/pools/pool-types/concerns/weighted/liquidity.concern.ts","../../src/modules/pools/pool-types/concerns/weighted/spotPrice.concern.ts","../../src/modules/pools/pool-types/concerns/weighted/priceImpact.concern.ts","../../src/modules/pools/pool-types/weighted.module.ts","../../src/modules/pools/pool-types/concerns/metaStable/exit.concern.ts","../../src/modules/pools/pool-types/concerns/metaStable/join.concern.ts","../../src/modules/pools/pool-types/concerns/metaStable/liquidity.concern.ts","../../src/modules/pools/pool-types/concerns/metaStable/spotPrice.concern.ts","../../src/modules/pools/pool-types/concerns/metaStable/priceImpact.concern.ts","../../src/modules/pools/pool-types/metaStable.module.ts","../../src/modules/pools/pool-types/concerns/stablePhantom/exit.concern.ts","../../src/modules/pools/pool-types/concerns/stablePhantom/join.concern.ts","../../src/modules/pools/pool-types/stablePhantom.module.ts","../../src/modules/pools/pool-types/concerns/linear/exit.concern.ts","../../src/modules/pools/pool-types/concerns/linear/join.concern.ts","../../src/modules/pools/pool-types/concerns/linear/liquidity.concern.ts","../../src/modules/pools/pool-types/concerns/linear/spotPrice.concern.ts","../../src/modules/pools/pool-types/concerns/linear/priceImpact.concern.ts","../../src/modules/pools/pool-types/linear.module.ts","../../src/modules/pools/pool-type-concerns.ts","../../src/modules/liquidity/liquidity.module.ts","../../src/modules/swaps/queryBatchSwap.ts","../node_modules/tslib/tslib.es6.js","../node_modules/graphql-tag/lib/index.js","../../src/modules/subgraph/generated/balancer-subgraph-types.ts","../../src/modules/subgraph/generated/balancer-gauges.ts","../../src/modules/subgraph/subgraph.ts","../../src/modules/contracts/implementations/multicall.ts","../../src/lib/utils/multiCaller.ts","../../src/modules/sor/pool-data/onChainData.ts","../../src/modules/sor/pool-data/subgraphPoolDataService.ts","../../src/modules/sor/token-price/coingeckoTokenPriceService.ts","../../src/modules/sor/token-price/subgraphTokenPriceService.ts","../../src/modules/sdk.helpers.ts","../../src/modules/sor/sor.module.ts","../../src/modules/swaps/flashSwap/index.ts","../../src/modules/swaps/swap_builder/swap_utils.ts","../../src/modules/swaps/swap_builder/swap_info_decorator.ts","../../src/modules/swaps/swap_builder/single_swap_builder.ts","../../src/modules/swaps/swap_builder/batch_swap_builder.ts","../../src/modules/swaps/swaps.module.ts","../../src/modules/relayer/relayer.module.ts","../../src/modules/subgraph/subgraph.module.ts","../../src/modules/pricing/pricing.module.ts","../../src/lib/utils/time.ts","../../src/modules/contracts/implementations/veBAL.ts","../../src/modules/contracts/implementations/veBAL-proxy.ts","../../src/modules/contracts/implementations/relayer.ts","../../src/modules/contracts/contracts.module.ts","../../src/modules/contracts/implementations/ERC20.ts","../../src/modules/contracts/implementations/liquidity-gauge.ts","../../src/modules/zaps/bbausd2-migrations/addresses.ts","../../src/modules/zaps/bbausd2-migrations/stabal3.ts","../../src/modules/zaps/bbausd2-migrations/bbausd1.ts","../../src/modules/zaps/bbausd2-migrations/stables.ts","../../src/modules/zaps/bbausd2-migrations/maiusd.ts","../../src/modules/zaps/migrations.ts","../../src/modules/zaps/zaps.module.ts","../../src/modules/pools/impermanentLoss/impermanentLossService.ts","../../src/modules/data/bal/emissions.ts","../../src/modules/pools/apr/protocol-revenue.ts","../../src/modules/pools/fees/fees.ts","../../src/modules/pools/apr/apr.ts","../../src/modules/graph/graph.ts","../../src/lib/utils/tenderlyHelper.ts","../../src/modules/joins/joins.module.ts","../../src/modules/exits/exits.module.ts","../../src/modules/pools/volume/volume.ts","../../src/modules/pools/factory/composable-stable/composable-stable.factory.ts","../../src/modules/pools/factory/weighted/weighted.factory.ts","../../src/modules/pools/pool-factory__factory.ts","../../src/modules/pools/queries/params_builder.ts","../../src/modules/pools/queries/get_encoder.ts","../../src/modules/pools/emissions/index.ts","../../src/modules/pools/proportional-amounts/index.ts","../../src/modules/pools/index.ts","../../src/modules/data/gauge-controller/multicall.ts","../../src/modules/subgraph/repository/abstract-subgraph-repository.ts","../../src/modules/subgraph/repository/balancer-subgraph-repository.ts","../../src/modules/subgraph/repository/gauges-subgraph-repository.ts","../../src/modules/data/gauge-shares/repository.ts","../../src/modules/data/liquidity-gauges/multicall.ts","../../src/modules/data/liquidity-gauges/subgraph.ts","../../src/modules/data/liquidity-gauges/provider.ts","../../src/modules/api/balancer-api.client.ts","../../src/modules/data/pool/subgraph.ts","../../src/modules/data/pool/subgraphOnChain.ts","../../src/modules/data/pool-gauges/repository.ts","../../src/modules/data/pool-joinExit/types.ts","../../src/modules/data/pool-joinExit/repository.ts","../../src/modules/data/pool-shares/repository.ts","../../src/modules/data/token/static.ts","../../src/modules/data/token-prices/coingecko.ts","../../src/modules/data/token-prices/coingecko-historical.ts","../../src/modules/data/token-prices/subgraph.ts","../../src/modules/data/token-prices/provider.ts","../../src/modules/data/token-prices/historical-price-provider.ts","../../src/modules/data/token-prices/aave-rates.ts","../../src/modules/data/fee-distributor/repository.ts","../../src/modules/data/fee-collector/repository.ts","../../src/modules/data/protocol-fees/provider.ts","../../src/modules/data/token-yields/tokens/lido.ts","../../src/modules/data/token-yields/tokens/rocketpool.ts","../../src/modules/data/token-yields/tokens/lido-polygon.ts","../../src/modules/data/token-yields/tokens/overnight.ts","../../src/modules/data/token-yields/tokens/sfrxeth.ts","../../src/modules/data/token-yields/tokens/maticx.ts","../../src/modules/data/token-yields/tokens/tranchess.ts","../../src/modules/data/token-yields/tokens/usdr.ts","../../src/modules/data/token-yields/tokens/stafi.ts","../../src/modules/data/token-yields/tokens/tessera.ts","../../src/modules/data/token-yields/tokens/euler.ts","../../src/modules/data/token-yields/repository.ts","../../src/modules/data/block-number/index.ts","../../src/modules/swaps/joinAndExit.ts","../../src/modules/data/index.ts","../../src/lib/utils/aaveHelpers.ts","../../src/modules/sdk.module.ts","../../src/modules/data/pool/balancer-api.ts","../../src/modules/data/pool/fallback.ts","../../src/modules/data/pool/static.ts","../../src/modules/data/token-prices/static.ts","../../src/pool-weighted/normalizedWeights.ts"],"sourcesContent":["import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum StablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum StablePhantomPoolJoinKind {\n  INIT = 0,\n  COLLECT_PROTOCOL_FEES,\n}\n\nexport enum StablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n}\n\nexport class StablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a StablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]'],\n      [StablePoolJoinKind.INIT, amountsIn]\n    );\n\n  /**\n   * Encodes the userData parameter for collecting protocol fees for StablePhantomPool\n   */\n  static joinCollectProtocolFees = (): string =>\n    defaultAbiCoder.encode(\n      ['uint256'],\n      [StablePhantomPoolJoinKind.COLLECT_PROTOCOL_FEES]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (\n    amountsIn: BigNumberish[],\n    minimumBPT: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [StablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a StablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (\n    bptAmountOut: BigNumberish,\n    enterTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        StablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n        bptAmountOut,\n        enterTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (\n    bptAmountIn: BigNumberish,\n    exitTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        StablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        bptAmountIn,\n        exitTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [StablePoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a StablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (\n    amountsOut: BigNumberish[],\n    maxBPTAmountIn: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        StablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n        amountsOut,\n        maxBPTAmountIn,\n      ]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nexport enum WeightedPoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n  ALL_TOKENS_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum WeightedPoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  EXACT_BPT_IN_FOR_TOKENS_OUT,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n  MANAGEMENT_FEE_TOKENS_OUT,\n}\n\nexport class WeightedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a WeightedPool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]'],\n      [WeightedPoolJoinKind.INIT, amountsIn]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (\n    amountsIn: BigNumberish[],\n    minimumBPT: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [WeightedPoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, amountsIn, minimumBPT]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool with a single token to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (\n    bptAmountOut: BigNumberish,\n    enterTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        WeightedPoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n        bptAmountOut,\n        enterTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a WeightedPool proportionally to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   */\n  static joinAllTokensInForExactBPTOut = (bptAmountOut: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolJoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, bptAmountOut]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (\n    bptAmountIn: BigNumberish,\n    exitTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        WeightedPoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        bptAmountIn,\n        exitTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing tokens in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   */\n  static exitExactBPTInForTokensOut = (bptAmountIn: BigNumberish): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256'],\n      [WeightedPoolExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptAmountIn]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a WeightedPool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (\n    amountsOut: BigNumberish[],\n    maxBPTAmountIn: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        WeightedPoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n        amountsOut,\n        maxBPTAmountIn,\n      ]\n    );\n}\n\nexport class ManagedPoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for exiting a ManagedPool for withdrawing management fees.\n   * This can only be done by the pool owner.\n   */\n  static exitForManagementFees = (): string =>\n    defaultAbiCoder.encode(\n      ['uint256'],\n      [WeightedPoolExitKind.MANAGEMENT_FEE_TOKENS_OUT]\n    );\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { StablePhantomPoolJoinKind } from '../pool-stable/index';\n\nexport enum ComposableStablePoolJoinKind {\n  INIT = 0,\n  EXACT_TOKENS_IN_FOR_BPT_OUT,\n  TOKEN_IN_FOR_EXACT_BPT_OUT,\n}\n\nexport enum ComposableStablePoolExitKind {\n  EXACT_BPT_IN_FOR_ONE_TOKEN_OUT = 0,\n  BPT_IN_FOR_EXACT_TOKENS_OUT,\n}\n\nexport class ComposableStablePoolEncoder {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  /**\n   * Encodes the userData parameter for providing the initial liquidity to a ComposableStablePool\n   * @param initialBalances - the amounts of tokens to send to the pool to form the initial balances\n   */\n  static joinInit = (amountsIn: BigNumberish[]): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]'],\n      [ComposableStablePoolJoinKind.INIT, amountsIn]\n    );\n\n  /**\n   * Encodes the userData parameter for collecting protocol fees for StablePhantomPool\n   */\n  static joinCollectProtocolFees = (): string =>\n    defaultAbiCoder.encode(\n      ['uint256'],\n      [StablePhantomPoolJoinKind.COLLECT_PROTOCOL_FEES]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a ComposableStablePool with exact token inputs\n   * @param amountsIn - the amounts each of token to deposit in the pool as liquidity\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  static joinExactTokensInForBPTOut = (\n    amountsIn: BigNumberish[],\n    minimumBPT: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        ComposableStablePoolJoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT,\n        amountsIn,\n        minimumBPT,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for joining a ComposableStablePool with to receive an exact amount of BPT\n   * @param bptAmountOut - the amount of BPT to be minted\n   * @param enterTokenIndex - the index of the token to be provided as liquidity\n   */\n  static joinTokenInForExactBPTOut = (\n    bptAmountOut: BigNumberish,\n    enterTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        ComposableStablePoolJoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT,\n        bptAmountOut,\n        enterTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a ComposableStablePool by removing a single token in return for an exact amount of BPT\n   * @param bptAmountIn - the amount of BPT to be burned\n   * @param enterTokenIndex - the index of the token to removed from the pool\n   */\n  static exitExactBPTInForOneTokenOut = (\n    bptAmountIn: BigNumberish,\n    exitTokenIndex: number\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256', 'uint256'],\n      [\n        ComposableStablePoolExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        bptAmountIn,\n        exitTokenIndex,\n      ]\n    );\n\n  /**\n   * Encodes the userData parameter for exiting a ComposableStablePool by removing exact amounts of tokens\n   * @param amountsOut - the amounts of each token to be withdrawn from the pool\n   * @param maxBPTAmountIn - the minimum acceptable BPT to burn in return for withdrawn tokens\n   */\n  static exitBPTInForExactTokensOut = (\n    amountsOut: BigNumberish[],\n    maxBPTAmountIn: BigNumberish\n  ): string =>\n    defaultAbiCoder.encode(\n      ['uint256', 'uint256[]', 'uint256'],\n      [\n        ComposableStablePoolExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT,\n        amountsOut,\n        maxBPTAmountIn,\n      ]\n    );\n}\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { PoolSpecialization } from '../types';\nimport invariant from 'tiny-invariant';\n\n/**\n * Splits a poolId into its components, i.e. pool address, pool specialization and its nonce\n * @param poolId - a bytes32 string of the pool's ID\n * @returns an object with the decomposed poolId\n */\nexport const splitPoolId = (\n  poolId: string\n): {\n  address: string;\n  specialization: PoolSpecialization;\n  nonce: BigNumber;\n} => {\n  return {\n    address: getPoolAddress(poolId),\n    specialization: getPoolSpecialization(poolId),\n    nonce: getPoolNonce(poolId),\n  };\n};\n\n/**\n * Extracts a pool's address from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's address\n */\nexport const getPoolAddress = (poolId: string): string => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return poolId.slice(0, 42);\n};\n\n/**\n * Extracts a pool's specialization from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's specialization\n */\nexport const getPoolSpecialization = (poolId: string): PoolSpecialization => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n\n  // Only have 3 pool specializations so we can just pull the relevant character\n  const specializationCode = parseInt(poolId[45]);\n  invariant(specializationCode < 3, 'Invalid pool specialization');\n\n  return specializationCode;\n};\n\n/**\n * Extracts a pool's nonce from its poolId\n * @param poolId - a bytes32 string of the pool's ID\n * @returns the pool's nonce\n */\nexport const getPoolNonce = (poolId: string): BigNumber => {\n  invariant(poolId.length === 66, 'Invalid poolId length');\n  return BigNumber.from(`0x${poolId.slice(46)}`);\n};\n","export enum Network {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GOERLI = 5,\n  GÖRLI = 5,\n  OPTIMISM = 10,\n  KOVAN = 42,\n  GNOSIS = 100,\n  POLYGON = 137,\n  ARBITRUM = 42161,\n  OASYS = 16116,\n}\n","import { Network } from '@/lib/constants/network';\n\n// Do not display APR values greater than this amount; they are likely to be nonsensical\n// These can arise from pools with extremely low balances (e.g., completed LBPs)\nexport const APR_THRESHOLD = 10_000;\n\n/**\n * For proportional exits from ComposableStable pools the ExactBPTInForTokensOut\n * exit type was removed. Therefore we have to use BPTInForExactTokensOut which\n * makes proportional exits using a user's total BPT balance impossible. In\n * order to 'fix' this we need to subtract a little bit from the bptIn value\n * when calculating the ExactTokensOut. The variable below is that \"little bit\".\n */\nexport const SHALLOW_COMPOSABLE_STABLE_BUFFER = 1e6; // EVM scale, so this is 1 Mwei\n\ntype FactoryType =\n  | 'oracleWeightedPool'\n  | 'weightedPool'\n  | 'stablePool'\n  | 'managedPool'\n  | 'liquidityBootstrappingPool'\n  | 'boostedPool'\n  | 'composableStablePool';\n\ntype PoolMetadata = {\n  name: string;\n  hasIcon: boolean;\n};\n\nexport type NamedPools = {\n  staBAL: string;\n  bbAaveUSD: {\n    v1: string;\n    v2: string;\n  };\n  xMatic: {\n    v1: string;\n    v2: string;\n  };\n  stMatic: {\n    v1: string;\n    v2: string;\n  };\n  mai4: {\n    mai4: string;\n    maiBbaUsd: string;\n  };\n  veBAL: string;\n};\n\ntype Pools = {\n  IdsMap: Partial<NamedPools>;\n  Pagination: {\n    PerPage: number;\n    PerPool: number;\n    PerPoolInitial: number;\n  };\n  DelegateOwner: string;\n  ZeroAddress: string;\n  DynamicFees: {\n    Gauntlet: string[];\n  };\n  BlockList: string[];\n  ExcludedPoolTypes: string[];\n  Stable: {\n    AllowList: string[];\n  };\n  Investment: {\n    AllowList: string[];\n  };\n  Factories: Record<string, FactoryType>;\n  Stakable: {\n    AllowList: string[];\n  };\n  Metadata: Record<string, PoolMetadata>;\n};\n\nconst POOLS_KOVAN: Pools = {\n  IdsMap: {\n    staBAL:\n      '0xd387dfd3a786e7caa06e6cf0c675352c7ffff30400000000000000000000063e',\n    bbAaveUSD: {\n      v1: '0x8fd162f338b770f7e879030830cde9173367f3010000000000000000000004d8',\n      v2: '',\n    },\n    veBAL: '0xdc2ecfdf2688f92c85064be0b929693acc6dbca6000200000000000000000701',\n  },\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [\n    '0x22d398c68030ef6b1c55321cca6e0cecc5c93b2f000200000000000000000678',\n    '0xca1eb8624be8e11418f629559321587197557e0c000200000000000000000682',\n    '0xa21da5768186c1bc0f56dd72aa94672d77bdf23e00020000000000000000067a',\n    '0x7f9db0d15eea32e205b7df0fa5184f4a8a905abb000200000000000000000683',\n    '0x72c5a86831f019df6fac146fc14ef60ebe0d5f2600020000000000000000067f',\n    '0x542b9f6fd4500b94d453974d8c70783ef794ff6a00020000000000000000067c',\n    '0x47f9309a8c5a68a93ac27a4cccc0e222cd3adfa2000200000000000000000684',\n    '0x3f3050a0fe84778aeff96906c9218b318f924d22000200000000000000000680',\n    '0x31e61587b5dc148ae42ae323655fb8d7af7bb86600020000000000000000067d',\n    '0x28efa7f86341aa0ad534bdfb033edb4f4ac6adf700020000000000000000067e',\n    '0x10ee90b9ff4b9a44a773107280c0ce083619286800020000000000000000067b',\n  ],\n  ExcludedPoolTypes: ['Element', 'AaveLinear', 'Linear', 'ERC4626Linear'],\n  Stable: {\n    AllowList: [\n      '0x6b15a01b5d46a5321b627bd7deef1af57bc629070000000000000000000000d4', // kovan\n      '0xe08590bde837eb9b2d42aa1196469d6e08fe96ec000200000000000000000101', // kovan\n      '0xb4c23af48e79f73e3a7e36c0e54eb38e1ce1755e0002000000000000000000d3', // kovan\n      '0x8fd162f338b770f7e879030830cde9173367f3010000000000000000000004d8', // kovan bb-a-USD,\n      '0xd387dfd3a786e7caa06e6cf0c675352c7ffff30400000000000000000000063e', // kovan staBAL3,\n    ],\n  },\n  Investment: {\n    AllowList: [\n      '0x4fd63966879300cafafbb35d157dc5229278ed23000100000000000000000169', // kovan\n      '0x37a6fc079cad790e556baedda879358e076ef1b3000100000000000000000348', // WSB Kovan\n    ],\n  },\n  Factories: {\n    '0xa5bf2ddf098bb0ef6d120c98217dd6b141c74ee0': 'oracleWeightedPool',\n    '0x8e9aa87e45e92bad84d5f8dd1bff34fb92637de9': 'weightedPool',\n    '0xc66ba2b6595d3613ccab350c886ace23866ede24': 'stablePool',\n    '0x1b57f637ce3408f1f834b0b70f9a595b062daea7': 'liquidityBootstrappingPool',\n    '0x751dfdace1ad995ff13c927f6f761c6604532c79': 'stablePool', // Kovan\n    '0x590e544e7ca956bb878f8c873e82e65550d67d2f': 'stablePool', // Kovan Metastable\n    '0xb08e16cfc07c684daa2f93c70323badb2a6cbfd2': 'managedPool', // Kovan Managed\n    '0x6c7f4d97269ece163fd08d5c2584a21e4a33934c': 'boostedPool', // kovan stablephantom\n    '0x1f47ab83420cd1f818df9acbd6ee68341bb91592': 'stablePool', // stable pool v2\n  },\n  Stakable: {\n    AllowList: [\n      '0xf767f0a3fcf1eafec2180b7de79d0c559d7e7e370001000000000000000003e3',\n      '0xdc2ecfdf2688f92c85064be0b929693acc6dbca6000200000000000000000701',\n      '0x647c1fd457b95b75d0972ff08fe01d7d7bda05df000200000000000000000001',\n      '0x8fd162f338b770f7e879030830cde9173367f3010000000000000000000004d8',\n    ],\n  },\n  Metadata: {\n    '0x8fd162f338b770f7e879030830cde9173367f3010000000000000000000004d8': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: false,\n    },\n    '0xd387dfd3a786e7caa06e6cf0c675352c7ffff30400000000000000000000063e': {\n      name: 'Balancer Stable USD',\n      hasIcon: false,\n    },\n  },\n};\n\nconst POOLS_GOERLI: Pools = {\n  IdsMap: {\n    staBAL:\n      '0xdcdd4a3d36dec8d57594e89763d069a7e9b223e2000000000000000000000062',\n    bbAaveUSD: {\n      v1: '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f',\n      v2: '0x3d5981bdd8d3e49eb7bbdc1d2b156a3ee019c18e0000000000000000000001a7',\n    },\n    veBAL: '0xf8a0623ab66f985effc1c69d05f1af4badb01b00000200000000000000000060',\n  },\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [\n    '0x22d398c68030ef6b1c55321cca6e0cecc5c93b2f000200000000000000000678',\n  ],\n  ExcludedPoolTypes: ['Element', 'AaveLinear', 'Linear', 'ERC4626Linear'],\n  Stable: {\n    AllowList: [\n      '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f',\n      '0xb60e46d90f2de35f7062a27d3a98749414036d5d000200000000000000000061',\n      '0xdcdd4a3d36dec8d57594e89763d069a7e9b223e2000000000000000000000062',\n      '0xc957b1acceb21707b782eb8eee2ed8e20088463d000200000000000000000076',\n      '0x3d5981bdd8d3e49eb7bbdc1d2b156a3ee019c18e0000000000000000000001a7',\n      '0x14f93df8a4e37bfdb49d2cec4789df7a010603d700000000000000000000011d',\n      '0x00a62d31b6c776b6813543bc99ff265f7222dbe100000000000000000000011e',\n      '0x0c925fce89a22e36ebd9b3c6e0262234e853d2f600000000000000000000019c',\n    ],\n  },\n  Investment: {\n    AllowList: [],\n  },\n  Factories: {\n    '0xa5bf2ddf098bb0ef6d120c98217dd6b141c74ee0': 'oracleWeightedPool',\n    '0x8e9aa87e45e92bad84d5f8dd1bff34fb92637de9': 'weightedPool',\n    '0x44afeb87c871d8fea9398a026dea2bd3a13f5769': 'stablePool',\n    '0xa55f73e2281c60206ba43a3590db07b8955832be': 'stablePool', // Metastable\n    '0xb48cc42c45d262534e46d5965a9ac496f1b7a830': 'liquidityBootstrappingPool',\n    '0xb0c726778c3ae4b3454d85557a48e8fa502bdd6a': 'liquidityBootstrappingPool', // LBP (zero protocol fee)\n    '0x41e9036ae350baedcc7107760a020dca3c0731ec': 'boostedPool',\n    '0xb848f50141f3d4255b37ac288c25c109104f2158': 'composableStablePool',\n    '0x94f68b54191f62f781fe8298a8a5fa3ed772d227': 'weightedPool', // weighted pool v2\n  },\n  Stakable: {\n    AllowList: [\n      '0x16faf9f73748013155b7bc116a3008b57332d1e600020000000000000000005b',\n      '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f',\n      '0xdcdd4a3d36dec8d57594e89763d069a7e9b223e2000000000000000000000062',\n      '0x67f8fcb9d3c463da05de1392efdbb2a87f8599ea000200000000000000000059',\n    ],\n  },\n  Metadata: {\n    '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: false,\n    },\n  },\n};\n\nconst POOLS_MAINNET: Pools = {\n  IdsMap: {\n    staBAL:\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',\n    bbAaveUSD: {\n      v1: '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n      v2: '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d',\n    },\n    veBAL: '0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014',\n  },\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: [\n    'Element',\n    'AaveLinear',\n    'Linear',\n    'ERC4626Linear',\n    'Gyro2',\n    'Gyro3',\n  ],\n  Stable: {\n    AllowList: [\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063', // staBAL3 (DAI-USD-USDC)\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc56000000000000000000000066', // WBTC-renBTC-sBTC\n      '0x9f19a375709baf0e8e35c2c5c65aca676c4c719100000000000000000000006e', // PAR-sEUR-EURS\n      '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080', // Lido Metastable\n      '0x1e19cf2d73a72ef1332c882f20534b6519be0276000200000000000000000112', // Rocket Pool Metastable\n      '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe', // Mainnet bb-a-USD\n      '0x851523a36690bf267bbfec389c823072d82921a90002000000000000000001ed', // wstETH/WETH #2\n      '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249', // b-auraBAL-Stable (auraBal / 8020 BALETH)\n      '0x2d011adf89f0576c9b722c28269fcb5d50c2d17900020000000000000000024d', // sdBAL Stable Pool (sdBAL / 8020 BALETH)\n      '0x178e029173417b1f9c8bc16dcec6f697bc32374600000000000000000000025d', // Fiat DAO Stable Pool\n      '0xf93579002dbe8046c43fefe86ec78b1112247bb80000000000000000000002bc', // USDD 3 pool\n      '0xf3aeb3abba741f0eece8a1b1d2f11b85899951cb000200000000000000000351', // MAI stable pool\n      '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d', // bb-a-USD V2\n      '0x5b3240b6be3e7487d61cd1afdfc7fe4fa1d81e6400000000000000000000037b', // DOLA/INV stable pool\n    ],\n  },\n  Investment: {\n    AllowList: [\n      '0xccf5575570fac94cec733a58ff91bb3d073085c70002000000000000000000af', // iROBOT mainnet\n      '0xe7b1d394f3b40abeaa0b64a545dbcf89da1ecb3f00010000000000000000009a', // Techemy mainnet\n      '0x3b40d7d5ae25df2561944dd68b252016c4c7b2800001000000000000000000c2', // WSB-DEFI mainnet\n    ],\n  },\n  Factories: {\n    '0xa5bf2ddf098bb0ef6d120c98217dd6b141c74ee0': 'oracleWeightedPool',\n    '0x8e9aa87e45e92bad84d5f8dd1bff34fb92637de9': 'weightedPool',\n    '0xc66ba2b6595d3613ccab350c886ace23866ede24': 'stablePool',\n    '0x67d27634e44793fe63c467035e31ea8635117cd4': 'stablePool', // Metastable\n    '0x751a0bc0e3f75b38e01cf25bfce7ff36de1c87de': 'liquidityBootstrappingPool', // Mainnet LBP\n    '0x0f3e0c4218b7b0108a3643cfe9d3ec0d4f57c54e': 'liquidityBootstrappingPool', // Mainnet LBP (zero protocol fee)\n    '0x48767f9f868a4a7b86a90736632f6e44c2df7fa9': 'managedPool', // Mainnet Managed\n    '0xb08e16cfc07c684daa2f93c70323badb2a6cbfd2': 'boostedPool', // mainnet stablephantom\n    '0x8df6efec5547e31b0eb7d1291b511ff8a2bf987c': 'stablePool', // stable pool v2\n    '0xf9ac7b9df2b3454e841110cce5550bd5ac6f875f': 'composableStablePool', // ComposableStable\n    '0xcc508a455f5b0073973107db6a878ddbdab957bc': 'weightedPool', // weighted pool v2\n  },\n  Stakable: {\n    AllowList: [\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',\n      '0x072f14b85add63488ddad88f855fda4a99d6ac9b000200000000000000000027',\n      '0x0b09dea16768f0799065c475be02919503cb2a3500020000000000000000001a',\n      '0x186084ff790c65088ba694df11758fae4943ee9e000200000000000000000013',\n      '0x1e19cf2d73a72ef1332c882f20534b6519be0276000200000000000000000112',\n      '0x27c9f71cc31464b906e0006d4fcbc8900f48f15f00020000000000000000010f',\n      '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080',\n      '0x350196326aeaa9b98f1903fb5e8fc2686f85318c000200000000000000000084',\n      '0x3e5fa9518ea95c3e533eb377c001702a9aacaa32000200000000000000000052',\n      '0x51735bdfbfe3fc13dea8dc6502e2e958989429610002000000000000000000a0',\n      '0x5d66fff62c17d841935b60df5f07f6cf79bd0f4700020000000000000000014c',\n      '0x5f7fa48d765053f8dd85e052843e12d23e3d7bc50002000000000000000000c0',\n      '0x702605f43471183158938c1a3e5f5a359d7b31ba00020000000000000000009f',\n      '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n      '0x7edde0cb05ed19e03a9a47cd5e53fc57fde1c80c0002000000000000000000c8',\n      '0x8f4205e1604133d1875a3e771ae7e4f2b086563900020000000000000000010e',\n      '0x90291319f1d4ea3ad4db0dd8fe9e12baf749e84500020000000000000000013c',\n      '0x96646936b91d6b9d7d0c47c496afbf3d6ec7b6f8000200000000000000000019',\n      '0x96ba9025311e2f47b840a1f68ed57a3df1ea8747000200000000000000000160',\n      '0xa02e4b3d18d4e6b8d18ac421fbc3dfff8933c40a00020000000000000000004b',\n      '0xa6f548df93de924d73be7d25dc02554c6bd66db500020000000000000000000e',\n      '0xbaeec99c90e3420ec6c1e7a769d2a856d2898e4d00020000000000000000008a',\n      '0xbf96189eee9357a95c7719f4f5047f76bde804e5000200000000000000000087',\n      '0xe2469f47ab58cf9cf59f9822e3c5de4950a41c49000200000000000000000089',\n      '0xe99481dc77691d8e2456e5f3f61c1810adfc1503000200000000000000000018',\n      '0xec60a5fef79a92c741cb74fdd6bfc340c0279b01000200000000000000000015',\n      '0xedf085f65b4f6c155e13155502ef925c9a756003000200000000000000000123',\n      '0xefaa1604e82e1b3af8430b90192c1b9e8197e377000200000000000000000021',\n      '0xf4c0dd9b82da36c07605df83c8a416f11724d88b000200000000000000000026',\n      '0xf5aaf7ee8c39b651cebf5f1f50c10631e78e0ef9000200000000000000000069',\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc56000000000000000000000066',\n      '0x92762b42a06dcdddc5b7362cfb01e631c4d44b40000200000000000000000182',\n      '0xde8c195aa41c11a0c4787372defbbddaa31306d2000200000000000000000181',\n      '0x17ddd9646a69c9445cd8a9f921d4cd93bf50d108000200000000000000000159',\n      '0xc45d42f801105e861e86658648e3678ad7aa70f900010000000000000000011e',\n      '0x2d344a84bac123660b021eebe4eb6f12ba25fe8600020000000000000000018a',\n      '0xb460daa847c45f1c4a41cb05bfb3b51c92e41b36000200000000000000000194',\n      '0x5122e01d819e58bb2e22528c0d68d310f0aa6fd7000200000000000000000163',\n      '0x851523a36690bf267bbfec389c823072d82921a90002000000000000000001ed',\n      '0xe8cc7e765647625b95f59c15848379d10b9ab4af0002000000000000000001de',\n      '0x85370d9e3bb111391cc89f6de344e801760461830002000000000000000001ef',\n      '0xa7ff759dbef9f3efdd1d59beee44b966acafe214000200000000000000000180',\n      '0x3f7c10701b14197e2695dec6428a2ca4cf7fc3b800020000000000000000023c',\n      '0x2d011adf89f0576c9b722c28269fcb5d50c2d17900020000000000000000024d',\n      '0x178e029173417b1f9c8bc16dcec6f697bc32374600000000000000000000025d',\n      '0xcfca23ca9ca720b6e98e3eb9b6aa0ffc4a5c08b9000200000000000000000274',\n      '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249',\n      '0x0578292cb20a443ba1cde459c985ce14ca2bdee5000100000000000000000269',\n      '0x8eb6c82c3081bbbd45dcac5afa631aac53478b7c000100000000000000000270',\n      '0x1b65fe4881800b91d4277ba738b567cbb200a60d0002000000000000000002cc',\n      '0x99a14324cfd525a34bbc93ac7e348929909d57fd00020000000000000000030e',\n      '0x9b532ab955417afd0d012eb9f7389457cd0ea712000000000000000000000338',\n      '0x48607651416a943bf5ac71c41be1420538e78f87000200000000000000000327',\n      '0x6a5ead5433a50472642cd268e584dafa5a394490000200000000000000000366',\n      '0x0fd5663d4893ae0d579d580584806aadd2dd0b8b000200000000000000000367',\n      '0x441b8a1980f2f2e43a9397099d15cc2fe6d3625000020000000000000000035f',\n      '0xf3aeb3abba741f0eece8a1b1d2f11b85899951cb000200000000000000000351',\n      '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d',\n    ],\n  },\n  Metadata: {\n    '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: true,\n    },\n    '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: true,\n    },\n    '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063': {\n      name: 'Balancer Stable USD',\n      hasIcon: true,\n    },\n    '0x3dd0843a028c86e0b760b1a76929d1c5ef93a2dd000200000000000000000249': {\n      name: 'AuraBAL Stable Pool',\n      hasIcon: false,\n    },\n  },\n};\n\nconst POOLS_POLYGON: Pools = {\n  IdsMap: {\n    xMatic: {\n      v1: '0xc17636e36398602dd37bb5d1b3a9008c7629005f0002000000000000000004c4',\n      v2: '0xb20fc01d21a50d2c734c4a1262b4404d41fa7bf000000000000000000000075c',\n    },\n    stMatic: {\n      v1: '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366',\n      v2: '0x8159462d255c1d24915cb51ec361f700174cd99400000000000000000000075d',\n    },\n    mai4: {\n      mai4: '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012',\n      maiBbaUsd:\n        '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e',\n    },\n  },\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: [\n    'Element',\n    'AaveLinear',\n    'Linear',\n    'ERC4626Linear',\n    'Gyro2',\n    'Gyro3',\n  ],\n  Stable: {\n    AllowList: [\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012', // polygon MAI/DAI/USDC/USDT\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc5600020000000000000000001e', // polygon WBTC/renBTC\n      '0xf38cf113d2d4f60c36cbd95af2f48a9a0167045a00000000000000000000005b', // polygon,\n      '0x0d34e5dd4d8f043557145598e4e2dc286b35fd4f000000000000000000000068', // tusd polygon\n      '0x5028497af0c9a54ea8c6d42a054c0341b9fc616800020000000000000000007b', // dusd polygon\n      '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366', // polygon staked matic\n      '0xb4670d1389c758e4380c4211bcbc85342688b9c50002000000000000000003d8', // vQi,\n      '0xc31a37105b94ab4efca1954a14f059af11fcd9bb000000000000000000000455', // 4pool\n      '0xc17636e36398602dd37bb5d1b3a9008c7629005f0002000000000000000004c4', // maticx metastable\n      '0xb4b22bd6cdad0ab828be6f8a4086dfa54e9b373600020000000000000000058f', // Polygon tetuBAL-80BAL-20WETH\n      '0xb797adfb7b268faeaa90cadbfed464c76ee599cd0002000000000000000005ba', // tetuBAL-80BAL-20WETH V2 (with short name)\n      '0x0b8319061732b34cab22445fa83b81f950e4b7ed000000000000000000000709',\n      '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366',\n      '0x8159462d255c1d24915cb51ec361f700174cd99400000000000000000000075d',\n      '0xb20fc01d21a50d2c734c4a1262b4404d41fa7bf000000000000000000000075c',\n      '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e', // mai / bb-am-USD\n      '0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b', // bb-am-USD\n      '0xa48d164f6eb0edc68bd03b56fa59e12f24499ad10000000000000000000007c4', // ageur stable\n    ],\n  },\n  Investment: {\n    AllowList: [''],\n  },\n  Factories: {\n    '0xa5bf2ddf098bb0ef6d120c98217dd6b141c74ee0': 'oracleWeightedPool',\n    '0x8e9aa87e45e92bad84d5f8dd1bff34fb92637de9': 'weightedPool',\n    '0xc66ba2b6595d3613ccab350c886ace23866ede24': 'stablePool',\n    '0xdae7e32adc5d490a43ccba1f0c736033f2b4efca': 'stablePool', // Metastable\n    '0x751a0bc0e3f75b38e01cf25bfce7ff36de1c87de': 'liquidityBootstrappingPool', // LBP\n    '0x41b953164995c11c81da73d212ed8af25741b7ac': 'liquidityBootstrappingPool', // LBP (zero protocol fee)\n    '0x0f7bb7ce7b6ed9366f9b6b910adefe72dc538193': 'managedPool', // Polygon Managed\n    '0xc128a9954e6c874ea3d62ce62b468ba073093f25': 'boostedPool', // polygon stablephantom\n    '0xca96c4f198d343e251b1a01f3eba061ef3da73c1': 'stablePool', // stable pool v2,\n    '0x136fd06fa01ecf624c7f2b3cb15742c1339dc2c4': 'composableStablePool', // ComposableStable\n    '0x0e39c3d9b2ec765efd9c5c70bb290b1fcd8536e3': 'weightedPool', // weighted pool v2\n  },\n  Stakable: {\n    AllowList: [\n      '0x0297e37f1873d2dab4487aa67cd56b58e2f27875000100000000000000000002',\n      '0x03cd191f589d12b0582a99808cf19851e468e6b500010000000000000000000a',\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012',\n      '0x0d34e5dd4d8f043557145598e4e2dc286b35fd4f000000000000000000000068',\n      '0x10f21c9bd8128a29aa785ab2de0d044dcdd79436000200000000000000000059',\n      '0x186084ff790c65088ba694df11758fae4943ee9e000200000000000000000032',\n      '0x36128d5436d2d70cab39c9af9cce146c38554ff0000100000000000000000008',\n      '0x5a6ae1fd70d04ba4a279fc219dfabc53825cb01d00020000000000000000020e',\n      '0x614b5038611729ed49e0ded154d8a5d3af9d1d9e00010000000000000000001d',\n      '0x7c9cf12d783821d5c63d8e9427af5c44bad92445000100000000000000000051',\n      '0x805ca3ccc61cc231851dee2da6aabff0a7714aa7000200000000000000000361',\n      '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366',\n      '0xb204bf10bc3a5435017d3db247f56da601dfe08a0002000000000000000000fe',\n      '0xc31a37105b94ab4efca1954a14f059af11fcd9bb000000000000000000000455',\n      '0xce66904b68f1f070332cbc631de7ee98b650b499000100000000000000000009',\n      '0xcf354603a9aebd2ff9f33e1b04246d8ea204ae9500020000000000000000005a',\n      '0xdb1db6e248d7bb4175f6e5a382d0a03fe3dcc813000100000000000000000035',\n      '0xea4e073c8ac859f2994c07e627178719c8002dc00002000000000000000003dc',\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc5600020000000000000000001e',\n      '0xc17636e36398602dd37bb5d1b3a9008c7629005f0002000000000000000004c4',\n      '0x2dbc9ab0160087ae59474fb7bed95b9e808fa6bc0001000000000000000003db',\n      '0xb797adfb7b268faeaa90cadbfed464c76ee599cd0002000000000000000005ba',\n      '0x8f9dd2064eb38e8e40f2ab67bde27c0e16ea9b080002000000000000000004ca',\n      '0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b',\n      '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e',\n      '0x8159462d255c1d24915cb51ec361f700174cd99400000000000000000000075d',\n      '0xb20fc01d21a50d2c734c4a1262b4404d41fa7bf000000000000000000000075c',\n    ],\n  },\n  Metadata: {},\n};\n\nconst POOLS_ARBITRUM: Pools = {\n  IdsMap: {},\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: ['Element', 'AaveLinear', 'Linear', 'ERC4626Linear'],\n  Stable: {\n    AllowList: [\n      '0x9be7de742865d021c0e8fb9d64311b2c040c1ec1000200000000000000000012', // arbitrum\n      '0x1533a3278f3f9141d5f820a184ea4b017fce2382000000000000000000000016', // arbitrum\n      '0x386b5d43ba8b97c43d4afb4cdae7877a1b295e8a000000000000000000000020', // tusd arbitrum\n      '0x0510ccf9eb3ab03c1508d3b9769e8ee2cfd6fdcf00000000000000000000005d', // mai\n      '0x5a5884fc31948d59df2aeccca143de900d49e1a300000000000000000000006f', // VST\n      '0xd89746affa5483627a87e55713ec1905114394950002000000000000000000bf', // fluid stable\n      '0x7bceaa9c5e7f4836fec3bce2d5346637c9b13970000000000000000000000102', // vesta new stable\n      '0xfb5e6d0c1dfed2ba000fbc040ab8df3615ac329c000000000000000000000159', // stETH\n    ],\n  },\n  Investment: {\n    AllowList: [''],\n  },\n  Factories: {\n    '0x7dfdef5f355096603419239ce743bfaf1120312b': 'weightedPool', // Arbitrum Weighted\n    '0xcf0a32bbef8f064969f21f7e02328fb577382018': 'weightedPool', // Arbitrum WeightedOracle\n    '0x2433477a10fc5d31b9513c638f19ee85caed53fd': 'stablePool', // Arbitrum Stable\n    '0xebfd5681977e38af65a7487dc70b8221d089ccad': 'stablePool', // Arbitrum MetaStable\n    '0x142b9666a0a3a30477b052962dda81547e7029ab': 'liquidityBootstrappingPool', // Arbitrum LBP (old)\n    '0x1802953277fd955f9a254b80aa0582f193cf1d77': 'liquidityBootstrappingPool', // Arbitrum LBP (new)\n    '0xacd615b3705b9c880e4e7293f1030b34e57b4c1c': 'managedPool', // arbitrum managed\n    '0xdae7e32adc5d490a43ccba1f0c736033f2b4efca': 'boostedPool', // arbitrum stablephantom\n    '0xef44d6786b2b4d544b7850fe67ce6381626bf2d6': 'stablePool', // stable pool v2\n    '0xaeb406b0e430bf5ea2dc0b9fe62e4e53f74b3a33': 'composableStablePool', // ComposableStable\n    '0x8df6efec5547e31b0eb7d1291b511ff8a2bf987c': 'weightedPool', // weighted pool v2\n  },\n  Stakable: {\n    AllowList: [\n      '0x0510ccf9eb3ab03c1508d3b9769e8ee2cfd6fdcf00000000000000000000005d',\n      '0x0adeb25cb5920d4f7447af4a0428072edc2cee2200020000000000000000004a',\n      '0x1533a3278f3f9141d5f820a184ea4b017fce2382000000000000000000000016',\n      '0x1779900c7707885720d39aa741f4086886307e9e00020000000000000000004b',\n      '0x4a3a22a3e7fee0ffbb66f1c28bfac50f75546fc7000200000000000000000008',\n      '0x5a5884fc31948d59df2aeccca143de900d49e1a300000000000000000000006f',\n      '0x64541216bafffeec8ea535bb71fbc927831d0595000100000000000000000002',\n      '0x651e00ffd5ecfa7f3d4f33d62ede0a97cf62ede2000200000000000000000006',\n      '0xb28670b3e7ad27bd41fb5938136bf9e9cba90d6500020000000000000000001e',\n      '0xb340b6b1a34019853cb05b2de6ee8ffd0b89a008000100000000000000000036',\n      '0xb5b77f1ad2b520df01612399258e7787af63025d000200000000000000000010',\n      '0xc2f082d33b5b8ef3a7e3de30da54efd3114512ac000200000000000000000017',\n      '0xc61ff48f94d801c1ceface0289085197b5ec44f000020000000000000000004d',\n      '0xcc65a812ce382ab909a11e434dbf75b34f1cc59d000200000000000000000001',\n      '0xe1b40094f1446722c424c598ac412d590e0b3ffb000200000000000000000076',\n      '0xb3028ca124b80cfe6e9ca57b70ef2f0ccc41ebd40002000000000000000000ba',\n      '0x7bceaa9c5e7f4836fec3bce2d5346637c9b13970000000000000000000000102',\n      '0xfb5e6d0c1dfed2ba000fbc040ab8df3615ac329c000000000000000000000159',\n      '0x178e029173417b1f9c8bc16dcec6f697bc323746000200000000000000000158',\n    ],\n  },\n  Metadata: {},\n};\n\nconst POOLS_GNOSIS: Pools = {\n  IdsMap: {},\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: [\n    'Element',\n    'AaveLinear',\n    'Linear',\n    'ERC4626Linear',\n    'FX',\n    'Gyro2',\n    'Gyro3',\n    'GyroE',\n    'HighAmpComposableStable',\n  ],\n  Stable: {\n    AllowList: [\n      '0x11884da90fb4221b3aa288a7741c51ec4fc43b2f000000000000000000000004',\n      '0x707b7d4a1bae449d546dcab869256591bbb3d70b000000000000000000000000',\n    ],\n  },\n  Investment: {\n    AllowList: [],\n  },\n  Factories: {},\n  Stakable: {\n    AllowList: [],\n  },\n  Metadata: {},\n};\n\nconst POOLS_GENERIC: Pools = {\n  IdsMap: {},\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: ['Element', 'AaveLinear', 'Linear', 'ERC4626Linear'],\n  Stable: {\n    AllowList: [\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc56000000000000000000000066',\n      '0x9f19a375709baf0e8e35c2c5c65aca676c4c719100000000000000000000006e',\n      '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080', // Lido Metastable\n      '0x1e19cf2d73a72ef1332c882f20534b6519be0276000200000000000000000112', // Rocket Pool Metastable\n      '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012', // polygon\n      '0xfeadd389a5c427952d8fdb8057d6c8ba1156cc5600020000000000000000001e', // polygon\n      '0x6b15a01b5d46a5321b627bd7deef1af57bc629070000000000000000000000d4', // kovan\n      '0xe08590bde837eb9b2d42aa1196469d6e08fe96ec000200000000000000000101', // kovan\n      '0xb4c23af48e79f73e3a7e36c0e54eb38e1ce1755e0002000000000000000000d3', // kovan\n      '0x9be7de742865d021c0e8fb9d64311b2c040c1ec1000200000000000000000012', // arbitrum\n      '0x9f19a375709baf0e8e35c2c5c65aca676c4c7191000200000000000000000022', // polygon PAR/PAR,\n      '0x1533a3278f3f9141d5f820a184ea4b017fce2382000000000000000000000016', // arbitrum\n      '0xf38cf113d2d4f60c36cbd95af2f48a9a0167045a00000000000000000000005b', // polygon,\n      '0x0d34e5dd4d8f043557145598e4e2dc286b35fd4f000000000000000000000068', // tusd polygon\n      '0x386b5d43ba8b97c43d4afb4cdae7877a1b295e8a000000000000000000000020', // tusd arbitrum\n      '0x5028497af0c9a54ea8c6d42a054c0341b9fc616800020000000000000000007b', // dusd polygon\n      '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe', // Mainnet bb-a-USD\n      '0x8fd162f338b770f7e879030830cde9173367f3010000000000000000000004d8', // kovan bb-a-USD,\n      '0xd387dfd3a786e7caa06e6cf0c675352c7ffff30400000000000000000000063e', // kovan staBAL3,\n      '0xaf5e0b5425de1f5a630a8cb5aa9d97b8141c908d000200000000000000000366', // staked matic\n    ],\n  },\n  Investment: {\n    AllowList: [\n      '0x4fd63966879300cafafbb35d157dc5229278ed23000100000000000000000169', // kovan\n      '0x37a6fc079cad790e556baedda879358e076ef1b3000100000000000000000348', // WSB Kovan\n      '0xccf5575570fac94cec733a58ff91bb3d073085c70002000000000000000000af', // iROBOT mainnet\n      '0xe7b1d394f3b40abeaa0b64a545dbcf89da1ecb3f00010000000000000000009a', // Techemy mainnet\n      '0x3b40d7d5ae25df2561944dd68b252016c4c7b2800001000000000000000000c2', // WSB-DEFI mainnet\n    ],\n  },\n  Factories: {\n    '0xa5bf2ddf098bb0ef6d120c98217dd6b141c74ee0': 'oracleWeightedPool',\n    '0x8e9aa87e45e92bad84d5f8dd1bff34fb92637de9': 'weightedPool',\n    '0xc66ba2b6595d3613ccab350c886ace23866ede24': 'stablePool',\n    '0x67d27634e44793fe63c467035e31ea8635117cd4': 'stablePool', // Metastable\n    '0x751dfdace1ad995ff13c927f6f761c6604532c79': 'stablePool', // Kovan\n    '0x590e544e7ca956bb878f8c873e82e65550d67d2f': 'stablePool', // Kovan Metastable\n    // '0xb08e16cfc07c684daa2f93c70323badb2a6cbfd2': 'managedPool', // Kovan Managed (clash with mainnet StablePhantom address)\n    '0x7dfdef5f355096603419239ce743bfaf1120312b': 'weightedPool', // Arbitrum Weighted\n    '0xcf0a32bbef8f064969f21f7e02328fb577382018': 'weightedPool', // Arbitrum WeightedOracle\n    '0x2433477a10fc5d31b9513c638f19ee85caed53fd': 'stablePool', // Arbitrum Stable\n    '0xebfd5681977e38af65a7487dc70b8221d089ccad': 'stablePool', // Arbitrum MetaStable\n    '0x751a0bc0e3f75b38e01cf25bfce7ff36de1c87de': 'liquidityBootstrappingPool', // Mainnet LBP\n    '0x0f3e0c4218b7b0108a3643cfe9d3ec0d4f57c54e': 'liquidityBootstrappingPool', // Mainnet LBP (zero protocol fee)\n    '0x142b9666a0a3a30477b052962dda81547e7029ab': 'liquidityBootstrappingPool', // Arbitrum LBP (old)\n    '0x1802953277fd955f9a254b80aa0582f193cf1d77': 'liquidityBootstrappingPool', // Arbitrum LBP (new)\n    '0x48767f9f868a4a7b86a90736632f6e44c2df7fa9': 'managedPool', // Mainnet Managed\n    '0x0f7bb7ce7b6ed9366f9b6b910adefe72dc538193': 'managedPool', // Polygon Managed\n    '0xacd615b3705b9c880e4e7293f1030b34e57b4c1c': 'managedPool', // arbitrum managed\n    '0xb08e16cfc07c684daa2f93c70323badb2a6cbfd2': 'boostedPool', // mainnet stablephantom\n    '0xdae7e32adc5d490a43ccba1f0c736033f2b4efca': 'boostedPool', // arbitrum stablephantom\n    '0xc128a9954e6c874ea3d62ce62b468ba073093f25': 'boostedPool', // polygon stablephantom\n    '0x6c7f4d97269ece163fd08d5c2584a21e4a33934c': 'boostedPool', // kovan stablephantom\n  },\n  Stakable: {\n    AllowList: [],\n  },\n  Metadata: {\n    '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: true,\n    },\n    '0x8fd162f338b770f7e879030830cde9173367f3010000000000000000000004d8': {\n      name: 'Balancer Boosted Aave USD',\n      hasIcon: true,\n    },\n    '0xd387dfd3a786e7caa06e6cf0c675352c7ffff30400000000000000000000063e': {\n      name: 'Balancer Stable USD',\n      hasIcon: true,\n    },\n  },\n};\n\nconst POOLS_OASYS: Pools = {\n  IdsMap: {},\n  Pagination: {\n    PerPage: 10,\n    PerPool: 10,\n    PerPoolInitial: 5,\n  },\n  DelegateOwner: '0xba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b',\n  ZeroAddress: '0x0000000000000000000000000000000000000000',\n  DynamicFees: {\n    Gauntlet: [],\n  },\n  BlockList: [''],\n  ExcludedPoolTypes: [\n    'Element',\n    'AaveLinear',\n    'EulerLinear',\n    'Linear',\n    'ERC4626Linear',\n    'FX',\n    'Gyro2',\n    'Gyro3',\n    'GyroE',\n    'HighAmpComposableStable',\n  ],\n  Stable: {\n    AllowList: [\n      '0xfedb19ec000d38d92af4b21436870f115db22725000000000000000000000010', // bb-ag-usd\n    ],\n  },\n  Investment: {\n    AllowList: [],\n  },\n  Factories: {\n    '0xcf3821727baa9df36ca25a91da330dd01a0e1743': 'composableStablePool', // ComposableStable V3\n    '0xb74d71ac95427019439c606b70d24ebfd9b9fff2': 'stablePool', // Stable V2\n    '0x4f6a9c852bb5058c3e1d17824a860d60a203e71b': 'weightedPool', // WeightedPool V3\n  },\n  Stakable: {\n    AllowList: [],\n  },\n  Metadata: {},\n};\n\nconst POOLS_MAP = {\n  [Network.KOVAN]: POOLS_KOVAN,\n  [Network.GOERLI]: POOLS_GOERLI,\n  [Network.MAINNET]: POOLS_MAINNET,\n  [Network.POLYGON]: POOLS_POLYGON,\n  [Network.ARBITRUM]: POOLS_ARBITRUM,\n  [Network.GNOSIS]: POOLS_GNOSIS,\n  [Network.OASYS]: POOLS_OASYS,\n};\n\nexport function POOLS(networkId: Network): Pools {\n  const id = networkId as keyof typeof POOLS_MAP;\n  return POOLS_MAP[id] ? POOLS_MAP[id] : POOLS_GENERIC;\n}\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport invariant from 'tiny-invariant';\n\nconst cmpTokens = (tokenA: string, tokenB: string): number =>\n  tokenA.toLowerCase() > tokenB.toLowerCase() ? 1 : -1;\n\nconst transposeMatrix = (matrix: unknown[][]): unknown[][] =>\n  matrix[0].map((_, columnIndex) => matrix.map((row) => row[columnIndex]));\n\nexport class AssetHelpers {\n  public readonly ETH: string = AddressZero;\n  public readonly WETH: string;\n\n  constructor(wethAddress: string) {\n    this.WETH = getAddress(wethAddress);\n  }\n\n  static isEqual = (addressA: string, addressB: string): boolean =>\n    getAddress(addressA) === getAddress(addressB);\n\n  /**\n   * Tests whether `token` is ETH (represented by `0x0000...0000`).\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isETH = (token: string): boolean => AssetHelpers.isEqual(token, this.ETH);\n\n  /**\n   * Tests whether `token` is WETH.\n   *\n   * @param token - the address of the asset to be checked\n   */\n  isWETH = (token: string): boolean => AssetHelpers.isEqual(token, this.WETH);\n\n  /**\n   * Converts an asset to the equivalent ERC20 address.\n   *\n   * For ERC20s this will return the passed address but passing ETH (`0x0000...0000`) will return the WETH address\n   * @param token - the address of the asset to be translated to an equivalent ERC20\n   * @returns the address of translated ERC20 asset\n   */\n  translateToERC20 = (token: string): string =>\n    this.isETH(token) ? this.WETH : token;\n\n  /**\n   * Sorts an array of token addresses into ascending order to match the format expected by the Vault.\n   *\n   * Passing additional arrays will result in each being sorted to maintain relative ordering to token addresses.\n   *\n   * The zero address (representing ETH) is sorted as if it were the WETH address.\n   * This matches the behaviour expected by the Vault when receiving an array of addresses.\n   *\n   * @param tokens - an array of token addresses to be sorted in ascending order\n   * @param others - a set of arrays to be sorted in the same order as the tokens, e.g. token weights or asset manager addresses\n   * @returns an array of the form `[tokens, ...others]` where each subarray has been sorted to maintain its ordering relative to `tokens`\n   *\n   * @example\n   * const [tokens] = sortTokens([tokenB, tokenC, tokenA])\n   * const [tokens, weights] = sortTokens([tokenB, tokenC, tokenA], [weightB, weightC, weightA])\n   * // where tokens = [tokenA, tokenB, tokenC], weights = [weightA, weightB, weightC]\n   */\n  sortTokens(\n    tokens: string[],\n    ...others: unknown[][]\n  ): [string[], ...unknown[][]] {\n    others.forEach((array) =>\n      invariant(tokens.length === array.length, 'array length mismatch')\n    );\n\n    // We want to sort ETH as if were WETH so we translate to ERC20s\n    const erc20Tokens = tokens.map(this.translateToERC20);\n\n    const transpose = transposeMatrix([erc20Tokens, ...others]) as [\n      string,\n      ...unknown[]\n    ][];\n    const sortedTranspose = transpose.sort(([tokenA], [tokenB]) =>\n      cmpTokens(tokenA, tokenB)\n    );\n    const [sortedErc20s, ...sortedOthers] = transposeMatrix(\n      sortedTranspose\n    ) as [string[], ...unknown[][]];\n\n    // If one of the tokens was ETH, we need to translate back from WETH\n    const sortedTokens = tokens.includes(this.ETH)\n      ? sortedErc20s.map((token) => (this.isWETH(token) ? this.ETH : token))\n      : sortedErc20s;\n    return [sortedTokens, ...sortedOthers];\n  }\n}\n","const balancerErrorCodes: Record<string, string> = {\n  '000': 'ADD_OVERFLOW',\n  '001': 'SUB_OVERFLOW',\n  '002': 'SUB_UNDERFLOW',\n  '003': 'MUL_OVERFLOW',\n  '004': 'ZERO_DIVISION',\n  '005': 'DIV_INTERNAL',\n  '006': 'X_OUT_OF_BOUNDS',\n  '007': 'Y_OUT_OF_BOUNDS',\n  '008': 'PRODUCT_OUT_OF_BOUNDS',\n  '009': 'INVALID_EXPONENT',\n  '100': 'OUT_OF_BOUNDS',\n  '101': 'UNSORTED_ARRAY',\n  '102': 'UNSORTED_TOKENS',\n  '103': 'INPUT_LENGTH_MISMATCH',\n  '104': 'ZERO_TOKEN',\n  '200': 'MIN_TOKENS',\n  '201': 'MAX_TOKENS',\n  '202': 'MAX_SWAP_FEE_PERCENTAGE',\n  '203': 'MIN_SWAP_FEE_PERCENTAGE',\n  '204': 'MINIMUM_BPT',\n  '205': 'CALLER_NOT_VAULT',\n  '206': 'UNINITIALIZED',\n  '207': 'BPT_IN_MAX_AMOUNT',\n  '208': 'BPT_OUT_MIN_AMOUNT',\n  '209': 'EXPIRED_PERMIT',\n  '210': 'NOT_TWO_TOKENS',\n  '211': 'DISABLED',\n  '300': 'MIN_AMP',\n  '301': 'MAX_AMP',\n  '302': 'MIN_WEIGHT',\n  '303': 'MAX_STABLE_TOKENS',\n  '304': 'MAX_IN_RATIO',\n  '305': 'MAX_OUT_RATIO',\n  '306': 'MIN_BPT_IN_FOR_TOKEN_OUT',\n  '307': 'MAX_OUT_BPT_FOR_TOKEN_IN',\n  '308': 'NORMALIZED_WEIGHT_INVARIANT',\n  '309': 'INVALID_TOKEN',\n  '310': 'UNHANDLED_JOIN_KIND',\n  '311': 'ZERO_INVARIANT',\n  '312': 'ORACLE_INVALID_SECONDS_QUERY',\n  '313': 'ORACLE_NOT_INITIALIZED',\n  '314': 'ORACLE_QUERY_TOO_OLD',\n  '315': 'ORACLE_INVALID_INDEX',\n  '316': 'ORACLE_BAD_SECS',\n  '317': 'AMP_END_TIME_TOO_CLOSE',\n  '318': 'AMP_ONGOING_UPDATE',\n  '319': 'AMP_RATE_TOO_HIGH',\n  '320': 'AMP_NO_ONGOING_UPDATE',\n  '321': 'STABLE_INVARIANT_DIDNT_CONVERGE',\n  '322': 'STABLE_GET_BALANCE_DIDNT_CONVERGE',\n  '323': 'RELAYER_NOT_CONTRACT',\n  '324': 'BASE_POOL_RELAYER_NOT_CALLED',\n  '325': 'REBALANCING_RELAYER_REENTERED',\n  '326': 'GRADUAL_UPDATE_TIME_TRAVEL',\n  '327': 'SWAPS_DISABLED',\n  '328': 'CALLER_IS_NOT_LBP_OWNER',\n  '329': 'PRICE_RATE_OVERFLOW',\n  '330': 'INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED',\n  '331': 'WEIGHT_CHANGE_TOO_FAST',\n  '332': 'LOWER_GREATER_THAN_UPPER_TARGET',\n  '333': 'UPPER_TARGET_TOO_HIGH',\n  '334': 'UNHANDLED_BY_LINEAR_POOL',\n  '335': 'OUT_OF_TARGET_RANGE',\n  '336': 'UNHANDLED_EXIT_KIND ',\n  '337': 'UNAUTHORIZED_EXIT',\n  '338': 'MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE',\n  '339': 'UNHANDLED_BY_MANAGED_POOL',\n  '340': 'UNHANDLED_BY_PHANTOM_POOL',\n  '341': 'TOKEN_DOES_NOT_HAVE_RATE_PROVIDER',\n  '342': 'INVALID_INITIALIZATION',\n  '343': 'OUT_OF_NEW_TARGET_RANGE',\n  '344': 'UNAUTHORIZED_OPERATION',\n  '345': 'UNINITIALIZED_POOL_CONTROLLER',\n  '400': 'REENTRANCY',\n  '401': 'SENDER_NOT_ALLOWED',\n  '402': 'PAUSED',\n  '403': 'PAUSE_WINDOW_EXPIRED',\n  '404': 'MAX_PAUSE_WINDOW_DURATION',\n  '405': 'MAX_BUFFER_PERIOD_DURATION',\n  '406': 'INSUFFICIENT_BALANCE',\n  '407': 'INSUFFICIENT_ALLOWANCE',\n  '408': 'ERC20_TRANSFER_FROM_ZERO_ADDRESS',\n  '409': 'ERC20_TRANSFER_TO_ZERO_ADDRESS',\n  '410': 'ERC20_MINT_TO_ZERO_ADDRESS',\n  '411': 'ERC20_BURN_FROM_ZERO_ADDRESS',\n  '412': 'ERC20_APPROVE_FROM_ZERO_ADDRESS',\n  '413': 'ERC20_APPROVE_TO_ZERO_ADDRESS',\n  '414': 'ERC20_TRANSFER_EXCEEDS_ALLOWANCE',\n  '415': 'ERC20_DECREASED_ALLOWANCE_BELOW_ZERO',\n  '416': 'ERC20_TRANSFER_EXCEEDS_BALANCE',\n  '417': 'ERC20_BURN_EXCEEDS_ALLOWANCE',\n  '418': 'SAFE_ERC20_CALL_FAILED',\n  '419': 'ADDRESS_INSUFFICIENT_BALANCE',\n  '420': 'ADDRESS_CANNOT_SEND_VALUE',\n  '421': 'SAFE_CAST_VALUE_CANT_FIT_INT256',\n  '422': 'GRANT_SENDER_NOT_ADMIN',\n  '423': 'REVOKE_SENDER_NOT_ADMIN',\n  '424': 'RENOUNCE_SENDER_NOT_ALLOWED',\n  '425': 'BUFFER_PERIOD_EXPIRED',\n  '426': 'CALLER_IS_NOT_OWNER',\n  '427': 'NEW_OWNER_IS_ZERO',\n  '428': 'CODE_DEPLOYMENT_FAILED',\n  '429': 'CALL_TO_NON_CONTRACT',\n  '430': 'LOW_LEVEL_CALL_FAILED',\n  '431': 'NOT_PAUSED',\n  '432': 'ADDRESS_ALREADY_ALLOWLISTED',\n  '433': 'ADDRESS_NOT_ALLOWLISTED',\n  '434': 'ERC20_BURN_EXCEEDS_BALANCE',\n  '500': 'INVALID_POOL_ID',\n  '501': 'CALLER_NOT_POOL',\n  '502': 'SENDER_NOT_ASSET_MANAGER',\n  '503': 'USER_DOESNT_ALLOW_RELAYER',\n  '504': 'INVALID_SIGNATURE',\n  '505': 'EXIT_BELOW_MIN',\n  '506': 'JOIN_ABOVE_MAX',\n  '507': 'SWAP_LIMIT',\n  '508': 'SWAP_DEADLINE',\n  '509': 'CANNOT_SWAP_SAME_TOKEN',\n  '510': 'UNKNOWN_AMOUNT_IN_FIRST_SWAP',\n  '511': 'MALCONSTRUCTED_MULTIHOP_SWAP',\n  '512': 'INTERNAL_BALANCE_OVERFLOW',\n  '513': 'INSUFFICIENT_INTERNAL_BALANCE',\n  '514': 'INVALID_ETH_INTERNAL_BALANCE',\n  '515': 'INVALID_POST_LOAN_BALANCE',\n  '516': 'INSUFFICIENT_ETH',\n  '517': 'UNALLOCATED_ETH',\n  '518': 'ETH_TRANSFER',\n  '519': 'CANNOT_USE_ETH_SENTINEL',\n  '520': 'TOKENS_MISMATCH',\n  '521': 'TOKEN_NOT_REGISTERED',\n  '522': 'TOKEN_ALREADY_REGISTERED',\n  '523': 'TOKENS_ALREADY_SET',\n  '524': 'TOKENS_LENGTH_MUST_BE_2',\n  '525': 'NONZERO_TOKEN_BALANCE',\n  '526': 'BALANCE_TOTAL_OVERFLOW',\n  '527': 'POOL_NO_TOKENS',\n  '528': 'INSUFFICIENT_FLASH_LOAN_BALANCE',\n  '600': 'SWAP_FEE_PERCENTAGE_TOO_HIGH',\n  '601': 'FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH',\n  '602': 'INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT',\n};\n\nexport class BalancerErrors {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static isErrorCode = (error: string): boolean => {\n    if (!error.includes('BAL#')) return false;\n\n    const errorCode = error.replace('BAL#', '');\n    return Object.keys(balancerErrorCodes).includes(errorCode);\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason\n   */\n  static parseErrorCode = (error: string): string => {\n    if (!error.includes('BAL#')) throw new Error('Error code not found');\n    const errorCode = error.replace('BAL#', '');\n\n    const actualError = balancerErrorCodes[errorCode];\n\n    if (!actualError) throw new Error('Error code not found');\n\n    return actualError;\n  };\n\n  /**\n   * Decodes a Balancer error code into the corresponding reason\n   * @param error - a Balancer error code of the form `BAL#000`\n   * @returns The decoded error reason if passed a valid error code, otherwise returns passed input\n   */\n  static tryParseErrorCode = (error: string): string => {\n    try {\n      return BalancerErrors.parseErrorCode(error);\n    } catch {\n      return error;\n    }\n  };\n\n  /**\n   * Tests whether a string is a known Balancer error message\n   * @param error - a string to be checked verified as a Balancer error message\n   */\n  static isBalancerError = (error: string): boolean =>\n    Object.values(balancerErrorCodes).includes(error);\n\n  /**\n   * Encodes an error string into the corresponding error code\n   * @param error - a Balancer error message string\n   * @returns a Balancer error code of the form `BAL#000`\n   */\n  static encodeError = (error: string): string => {\n    const encodedError = Object.entries(balancerErrorCodes).find(\n      ([, message]) => message === error\n    );\n\n    if (!encodedError) throw Error('Error message not found');\n\n    return `BAL#${encodedError[0]}`;\n  };\n}\n","import { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { hexValue, hexZeroPad, splitSignature } from '@ethersproject/bytes';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\n\nexport type Account = string | Signer | Contract;\n\nexport async function accountToAddress(account: Account): Promise<string> {\n  if (typeof account == 'string') return account;\n  if (Signer.isSigner(account)) return account.getAddress();\n  if (account.address) return account.address;\n  throw new Error('Could not read account address');\n}\n\nexport enum RelayerAction {\n  JoinPool = 'JoinPool',\n  ExitPool = 'ExitPool',\n  Swap = 'Swap',\n  BatchSwap = 'BatchSwap',\n  SetRelayerApproval = 'SetRelayerApproval',\n}\n\nexport class RelayerAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static encodeCalldataAuthorization = (\n    calldata: string,\n    deadline: BigNumberish,\n    signature: string\n  ): string => {\n    const encodedDeadline = hexZeroPad(hexValue(deadline), 32).slice(2);\n    const { v, r, s } = splitSignature(signature);\n    const encodedV = hexZeroPad(hexValue(v), 32).slice(2);\n    const encodedR = r.slice(2);\n    const encodedS = s.slice(2);\n    return `${calldata}${encodedDeadline}${encodedV}${encodedR}${encodedS}`;\n  };\n\n  static signJoinAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.JoinPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signExitAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.ExitPool,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.Swap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signBatchSwapAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.BatchSwap,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signSetRelayerApprovalAuthorization = (\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline?: BigNumberish,\n    nonce?: BigNumberish\n  ): Promise<string> =>\n    RelayerAuthorization.signAuthorizationFor(\n      RelayerAction.SetRelayerApproval,\n      validator,\n      user,\n      allowedSender,\n      allowedCalldata,\n      deadline,\n      nonce\n    );\n\n  static signAuthorizationFor = async (\n    type: RelayerAction,\n    validator: Contract,\n    user: Signer & TypedDataSigner,\n    allowedSender: Account,\n    allowedCalldata: string,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<string> => {\n    const { chainId } = await validator.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await validator.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer V2 Vault',\n      version: '1',\n      chainId,\n      verifyingContract: validator.address,\n    };\n\n    const types = {\n      [type]: [\n        { name: 'calldata', type: 'bytes' },\n        { name: 'sender', type: 'address' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      calldata: allowedCalldata,\n      sender: await accountToAddress(allowedSender),\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    return user._signTypedData(domain, types, value);\n  };\n}\n\nexport class BalancerMinterAuthorization {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n  }\n\n  static signSetMinterApproval = async (\n    minterContract: Contract,\n    minter: Account,\n    approval: boolean,\n    user: Signer & TypedDataSigner,\n    deadline: BigNumberish = MAX_DEADLINE,\n    nonce?: BigNumberish\n  ): Promise<{ v: number; r: string; s: string; deadline: BigNumber }> => {\n    const { chainId } = await minterContract.provider.getNetwork();\n    if (!nonce) {\n      const userAddress = await user.getAddress();\n      nonce = (await minterContract.getNextNonce(userAddress)) as BigNumberish;\n    }\n\n    const domain = {\n      name: 'Balancer Minter',\n      version: '1',\n      chainId,\n      verifyingContract: minterContract.address,\n    };\n\n    const types = {\n      SetMinterApproval: [\n        { name: 'minter', type: 'address' },\n        { name: 'approval', type: 'bool' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'deadline', type: 'uint256' },\n      ],\n    };\n\n    const value = {\n      minter: await accountToAddress(minter),\n      approval,\n      nonce: nonce.toString(),\n      deadline: deadline.toString(),\n    };\n\n    const signature = await user._signTypedData(domain, types, value);\n\n    return {\n      ...splitSignature(signature),\n      deadline: BigNumber.from(deadline),\n    };\n  };\n}\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { splitSignature } from '@ethersproject/bytes';\nimport { MaxUint256 as MAX_DEADLINE } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport { Account, accountToAddress } from './signatures';\n\nexport const signPermit = async (\n  token: Contract,\n  owner: Signer & TypedDataSigner,\n  spender: Account,\n  amount: BigNumberish,\n  deadline: BigNumberish = MAX_DEADLINE,\n  nonce?: BigNumberish\n): Promise<{\n  v: number;\n  r: string;\n  s: string;\n  deadline: BigNumber;\n  nonce: BigNumber;\n}> => {\n  const { chainId } = await token.provider.getNetwork();\n  const ownerAddress = await owner.getAddress();\n\n  if (!nonce) nonce = (await token.nonces(ownerAddress)) as BigNumberish;\n\n  const domain = {\n    name: await token.name(),\n    version: '1',\n    chainId,\n    verifyingContract: token.address,\n  };\n\n  const types = {\n    Permit: [\n      { name: 'owner', type: 'address' },\n      { name: 'spender', type: 'address' },\n      { name: 'value', type: 'uint256' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n    ],\n  };\n\n  const value = {\n    owner: ownerAddress,\n    spender: await accountToAddress(spender),\n    value: amount,\n    nonce,\n    deadline,\n  };\n\n  const signature = await owner._signTypedData(domain, types, value);\n  return {\n    ...splitSignature(signature),\n    deadline: BigNumber.from(deadline),\n    nonce: BigNumber.from(nonce),\n  };\n};\n","export const BZERO = BigInt(0);\nexport const BONE = BigInt(1);\nexport const ONE = BigInt('1000000000000000000'); // 18 decimal places\n\nconst _require = (b: boolean, message: string) => {\n  if (!b) throw new Error(message);\n};\n\n/**\n * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\n * it had 18 decimals.\n */\nexport function _computeScalingFactor(tokenDecimals: bigint): bigint {\n  // Tokens with more than 18 decimals are not supported.\n  const decimalsDifference = BigInt(18) - tokenDecimals;\n  return ONE * BigInt(10) ** decimalsDifference;\n}\n\n/**\n * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\n * scaling or not.\n */\nexport function _upscale(amount: bigint, scalingFactor: bigint): bigint {\n  // Upscale rounding wouldn't necessarily always go in the same direction: in a swap for example the balance of\n  // token in should be rounded up, and that of token out rounded down. This is the only place where we round in\n  // the same direction for all amounts, as the impact of this rounding is expected to be minimal (and there's no\n  // rounding error unless `_scalingFactor()` is overriden).\n  return SolidityMaths.mulDownFixed(amount, scalingFactor);\n}\n\n/**\n * @dev Same as `_upscale`, but for an entire array. This function does not return anything, but instead *mutates*\n * the `amounts` array.\n */\nexport function _upscaleArray(\n  amounts: bigint[],\n  scalingFactors: bigint[]\n): bigint[] {\n  const upscaledAmounts = new Array<bigint>(amounts.length);\n  for (let i = 0; i < amounts.length; ++i) {\n    upscaledAmounts[i] = SolidityMaths.mulDownFixed(\n      amounts[i],\n      scalingFactors[i]\n    );\n  }\n  return upscaledAmounts;\n}\n\n/**\n * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\n * whether it needed scaling or not. The result is rounded down.\n */\nexport function _downscaleDown(amount: bigint, scalingFactor: bigint): bigint {\n  return SolidityMaths.divDownFixed(amount, scalingFactor);\n}\n\n/**\n * @dev Same as `_downscaleDown`, but for an entire array. This function does not return anything, but instead\n * *mutates* the `amounts` array.\n */\nexport function _downscaleDownArray(\n  amounts: bigint[],\n  scalingFactors: bigint[]\n): bigint[] {\n  const downscaledAmounts = new Array<bigint>(amounts.length);\n  for (let i = 0; i < amounts.length; ++i) {\n    downscaledAmounts[i] = SolidityMaths.divDownFixed(\n      amounts[i],\n      scalingFactors[i]\n    );\n  }\n  return downscaledAmounts;\n}\n\n/**\n * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\n * whether it needed scaling or not. The result is rounded up.\n */\nexport function _downscaleUp(amount: bigint, scalingFactor: bigint): bigint {\n  return SolidityMaths.divUpFixed(amount, scalingFactor);\n}\n\nexport class SolidityMaths {\n  /**\n   * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\n   */\n  // add(a: bigint, b: bigint): bigint {\n  //     const c = a + b;\n  //     // _require(c >= a, Errors.ADD_OVERFLOW);\n  //     return c;\n  // }\n\n  /**\n   * @dev Returns the addition of two signed integers, reverting on overflow.\n   */\n  static add(a: bigint, b: bigint): bigint {\n    const c = a + b;\n    _require((b >= 0 && c >= a) || (b < 0 && c < a), 'Errors.ADD_OVERFLOW');\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\n   */\n  static sub(a: bigint, b: bigint): bigint {\n    _require(b <= a, 'Errors.SUB_OVERFLOW');\n    const c = a - b;\n    return c;\n  }\n\n  /**\n   * @dev Returns the subtraction of two signed integers, reverting on overflow.\n   */\n  // sub(int256 a, int256 b) internal pure returns (int256) {\n  //     int256 c = a - b;\n  //     // _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\n  //     return c;\n  // }\n\n  /**\n   * @dev Returns the largest of two numbers of 256 bits.\n   */\n  static max(a: bigint, b: bigint): bigint {\n    return a >= b ? a : b;\n  }\n\n  /**\n   * @dev Returns the smallest of two numbers of 256 bits.\n   */\n  static min(a: bigint, b: bigint): bigint {\n    return a < b ? a : b;\n  }\n\n  static mul(a: bigint, b: bigint): bigint {\n    const c = a * b;\n    _require(a == BZERO || c / a == b, 'Errors.MUL_OVERFLOW');\n    return c;\n  }\n\n  static div(a: bigint, b: bigint, roundUp: boolean): bigint {\n    return roundUp ? this.divUp(a, b) : this.divDown(a, b);\n  }\n\n  static divDown(a: bigint, b: bigint): bigint {\n    _require(b != BZERO, 'Errors.ZERO_DIVISION');\n    return a / b;\n  }\n\n  static divUp(a: bigint, b: bigint): bigint {\n    _require(b != BZERO, 'Errors.ZERO_DIVISION');\n\n    if (a == BZERO) {\n      return BZERO;\n    } else {\n      return BONE + (a - BONE) / b;\n    }\n  }\n\n  // Modification: Taken from the fixed point class\n  static MAX_POW_RELATIVE_ERROR = BigInt(10000);\n\n  static mulUpFixed(a: bigint, b: bigint): bigint {\n    const product = a * b;\n    _require(a == BZERO || product / a == b, 'Errors.MUL_OVERFLOW');\n\n    if (product == BZERO) {\n      return BZERO;\n    } else {\n      // The traditional divUp formula is:\n      // divUp(x, y) := (x + y - 1) / y\n      // To avoid intermediate overflow in the addition, we distribute the division and get:\n      // divUp(x, y) := (x - 1) / y + 1\n      // Note that this requires x != 0, which we already tested for.\n\n      return (product - BONE) / ONE + BONE;\n    }\n  }\n\n  // Modification: Taken from the fixed point class\n  static divDownFixed(a: bigint, b: bigint): bigint {\n    _require(b != BZERO, 'Errors.ZERO_DIVISION');\n    if (a == BZERO) {\n      return BZERO;\n    } else {\n      const aInflated = a * ONE;\n      // _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\n\n      return aInflated / b;\n    }\n  }\n\n  // Modification: Taken from the fixed point class\n  static divUpFixed(a: bigint, b: bigint): bigint {\n    _require(b != BZERO, 'Errors.ZERO_DIVISION');\n\n    if (a == BZERO) {\n      return BZERO;\n    } else {\n      const aInflated = a * ONE;\n      _require(aInflated / a == ONE, 'Errors.DIV_INTERNAL'); // mul overflow\n\n      // The traditional divUp formula is:\n      // divUp(x, y) := (x + y - 1) / y\n      // To avoid intermediate overflow in the addition, we distribute the division and get:\n      // divUp(x, y) := (x - 1) / y + 1\n      // Note that this requires x != 0, which we already tested for.\n\n      return (aInflated - BONE) / b + BONE;\n    }\n  }\n\n  // Modification: Taken from the fixed point class\n  static powUpFixed(x: bigint, y: bigint): bigint {\n    const raw = LogExpMath.pow(x, y);\n    const maxError = this.add(\n      this.mulUpFixed(raw, this.MAX_POW_RELATIVE_ERROR),\n      BONE\n    );\n\n    return this.add(raw, maxError);\n  }\n\n  // Modification: Taken from the fixed point class\n  static complementFixed(x: bigint): bigint {\n    return x < ONE ? ONE - x : BZERO;\n  }\n\n  static mulDownFixed(a: bigint, b: bigint): bigint {\n    const product = a * b;\n    _require(a == BZERO || product / a == b, 'Errors.MUL_OVERFLOW');\n\n    return product / ONE;\n  }\n}\n\nclass LogExpMath {\n  // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n  // two numbers, and multiply by ONE when dividing them.\n\n  // All arguments and return values are 18 decimal fixed point numbers.\n  static ONE_18 = BigInt('1000000000000000000');\n\n  // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\n  // case of ln36, 36 decimals.\n  static ONE_20 = BigInt('100000000000000000000');\n  static ONE_36 = BigInt('1000000000000000000000000000000000000');\n\n  // The domain of natural exponentiation is bound by the word size and number of decimals used.\n  //\n  // Because internally the result will be stored using 20 decimals, the largest possible result is\n  // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n  // The smallest possible result is 10^(-18), which makes largest negative argument\n  // ln(10^(-18)) = -41.446531673892822312.\n  // We use 130.0 and -41.0 to have some safety margin.\n  static MAX_NATURAL_EXPONENT = BigInt('130000000000000000000');\n  static MIN_NATURAL_EXPONENT = BigInt('-41000000000000000000');\n\n  // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n  // 256 bit integer.\n  static LN_36_LOWER_BOUND: bigint =\n    BigInt(LogExpMath.ONE_18) - BigInt('100000000000000000');\n  static LN_36_UPPER_BOUND: bigint =\n    BigInt(LogExpMath.ONE_18) + BigInt('100000000000000000');\n\n  static MILD_EXPONENT_BOUND: bigint =\n    BigInt(2) ** BigInt(254) / LogExpMath.ONE_20;\n\n  // 18 decimal constants\n  static x0 = BigInt('128000000000000000000'); // 2ˆ7\n  static a0 = BigInt(\n    '38877084059945950922200000000000000000000000000000000000'\n  ); // eˆ(x0) (no decimals)\n  static x1 = BigInt('64000000000000000000'); // 2ˆ6\n  static a1 = BigInt('6235149080811616882910000000'); // eˆ(x1) (no decimals)\n\n  // 20 decimal constants\n  static x2 = BigInt('3200000000000000000000'); // 2ˆ5\n  static a2 = BigInt('7896296018268069516100000000000000'); // eˆ(x2)\n  static x3 = BigInt('1600000000000000000000'); // 2ˆ4\n  static a3 = BigInt('888611052050787263676000000'); // eˆ(x3)\n  static x4 = BigInt('800000000000000000000'); // 2ˆ3\n  static a4 = BigInt('298095798704172827474000'); // eˆ(x4)\n  static x5 = BigInt('400000000000000000000'); // 2ˆ2\n  static a5 = BigInt('5459815003314423907810'); // eˆ(x5)\n  static x6 = BigInt('200000000000000000000'); // 2ˆ1\n  static a6 = BigInt('738905609893065022723'); // eˆ(x6)\n  static x7 = BigInt('100000000000000000000'); // 2ˆ0\n  static a7 = BigInt('271828182845904523536'); // eˆ(x7)\n  static x8 = BigInt('50000000000000000000'); // 2ˆ-1\n  static a8 = BigInt('164872127070012814685'); // eˆ(x8)\n  static x9 = BigInt('25000000000000000000'); // 2ˆ-2\n  static a9 = BigInt('128402541668774148407'); // eˆ(x9)\n  static x10 = BigInt('12500000000000000000'); // 2ˆ-3\n  static a10 = BigInt('113314845306682631683'); // eˆ(x10)\n  static x11 = BigInt('6250000000000000000'); // 2ˆ-4\n  static a11 = BigInt('106449445891785942956'); // eˆ(x11)\n\n  // All arguments and return values are 18 decimal fixed point numbers.\n  static pow(x: bigint, y: bigint): bigint {\n    if (y === BZERO) {\n      // We solve the 0^0 indetermination by making it equal one.\n      return this.ONE_18;\n    }\n\n    if (x == BZERO) {\n      return BZERO;\n    }\n\n    // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n    // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n    // x^y = exp(y * ln(x)).\n\n    // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n    _require(\n      x <\n        BigInt(\n          '57896044618658097711785492504343953926634992332820282019728792003956564819968'\n        ),\n      'Errors.X_OUT_OF_BOUNDS'\n    );\n    const x_int256 = x;\n\n    // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n    // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n\n    // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n    _require(y < this.MILD_EXPONENT_BOUND, 'Errors.Y_OUT_OF_BOUNDS');\n    const y_int256 = y;\n\n    let logx_times_y;\n    if (\n      this.LN_36_LOWER_BOUND < x_int256 &&\n      x_int256 < this.LN_36_UPPER_BOUND\n    ) {\n      const ln_36_x = this._ln_36(x_int256);\n\n      // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n      // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n      // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n      // (downscaled) last 18 decimals.\n      logx_times_y =\n        (ln_36_x / this.ONE_18) * y_int256 +\n        ((ln_36_x % this.ONE_18) * y_int256) / this.ONE_18;\n    } else {\n      logx_times_y = this._ln(x_int256) * y_int256;\n    }\n    logx_times_y /= this.ONE_18;\n\n    // Finally, we compute exp(y * ln(x)) to arrive at x^y\n    _require(\n      this.MIN_NATURAL_EXPONENT <= logx_times_y &&\n        logx_times_y <= this.MAX_NATURAL_EXPONENT,\n      'Errors.PRODUCT_OUT_OF_BOUNDS'\n    );\n\n    // return uint256(exp(logx_times_y));\n    return this.exp(logx_times_y);\n  }\n\n  static exp(x: bigint): bigint {\n    _require(\n      x >= this.MIN_NATURAL_EXPONENT && x <= this.MAX_NATURAL_EXPONENT,\n      'Errors.INVALID_EXPONENT'\n    );\n\n    if (x < 0) {\n      // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n      // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n      // Fixed point division requires multiplying by ONE_18.\n      return (this.ONE_18 * this.ONE_18) / this.exp(BigInt(-1) * x);\n    }\n\n    // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n    // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n    // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n    // decomposition.\n    // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest x_n.\n    // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n    // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n    // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n    // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n    // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n    // decomposition.\n\n    // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n    // it and compute the accumulated product.\n\n    let firstAN;\n    if (x >= this.x0) {\n      x -= this.x0;\n      firstAN = this.a0;\n    } else if (x >= this.x1) {\n      x -= this.x1;\n      firstAN = this.a1;\n    } else {\n      firstAN = BigInt(1); // One with no decimal places\n    }\n\n    // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n    // smaller terms.\n    x *= BigInt(100);\n\n    // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n    // one. Recall that fixed point multiplication requires dividing by ONE_20.\n    let product = this.ONE_20;\n\n    if (x >= this.x2) {\n      x -= this.x2;\n      product = (product * this.a2) / this.ONE_20;\n    }\n    if (x >= this.x3) {\n      x -= this.x3;\n      product = (product * this.a3) / this.ONE_20;\n    }\n    if (x >= this.x4) {\n      x -= this.x4;\n      product = (product * this.a4) / this.ONE_20;\n    }\n    if (x >= this.x5) {\n      x -= this.x5;\n      product = (product * this.a5) / this.ONE_20;\n    }\n    if (x >= this.x6) {\n      x -= this.x6;\n      product = (product * this.a6) / this.ONE_20;\n    }\n    if (x >= this.x7) {\n      x -= this.x7;\n      product = (product * this.a7) / this.ONE_20;\n    }\n    if (x >= this.x8) {\n      x -= this.x8;\n      product = (product * this.a8) / this.ONE_20;\n    }\n    if (x >= this.x9) {\n      x -= this.x9;\n      product = (product * this.a9) / this.ONE_20;\n    }\n\n    // x10 and x11 are unnecessary here since we have high enough precision already.\n\n    // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n    // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n    let seriesSum = this.ONE_20; // The initial one in the sum, with 20 decimal places.\n    let term; // Each term in the sum, where the nth term is (x^n / n!).\n\n    // The first term is simply x.\n    term = x;\n    seriesSum += term;\n\n    // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n    // multiplying by it requires dividing by this.ONE_20, but dividing by the non-fixed point n values does not.\n\n    term = (term * x) / this.ONE_20 / BigInt(2);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(3);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(4);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(5);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(6);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(7);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(8);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(9);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(10);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(11);\n    seriesSum += term;\n\n    term = (term * x) / this.ONE_20 / BigInt(12);\n    seriesSum += term;\n\n    // 12 Taylor terms are sufficient for 18 decimal precision.\n\n    // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n    // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n    // all three (one 20 decimal fixed point multiplication, dividing by this.ONE_20, and one integer multiplication),\n    // and then drop two digits to return an 18 decimal value.\n\n    return (((product * seriesSum) / this.ONE_20) * firstAN) / BigInt(100);\n  }\n\n  static _ln_36(x: bigint): bigint {\n    // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n    // worthwhile.\n\n    // First, we transform x to a 36 digit fixed point value.\n    x *= this.ONE_18;\n\n    // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n    // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n    // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n    // division by ONE_36.\n    const z = ((x - this.ONE_36) * this.ONE_36) / (x + this.ONE_36);\n    const z_squared = (z * z) / this.ONE_36;\n\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n\n    // In each step, the numerator is multiplied by z^2\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(3);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(5);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(7);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(9);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(11);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(13);\n\n    num = (num * z_squared) / this.ONE_36;\n    seriesSum += num / BigInt(15);\n\n    // 8 Taylor terms are sufficient for 36 decimal precision.\n\n    // All that remains is multiplying by 2 (non fixed point).\n    return seriesSum * BigInt(2);\n  }\n\n  /**\n   * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n   */\n  static _ln(a: bigint): bigint {\n    if (a < this.ONE_18) {\n      // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n      // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\n      // Fixed point division requires multiplying by this.ONE_18.\n      return BigInt(-1) * this._ln((this.ONE_18 * this.ONE_18) / a);\n    }\n\n    // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n    // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n    // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n    // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n    // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest a_n.\n    // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n    // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n    // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n    // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n    // this.ONE_18 to convert them to fixed point.\n    // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n    // by it and compute the accumulated sum.\n\n    let sum = BZERO;\n    if (a >= this.a0 * this.ONE_18) {\n      a /= this.a0; // Integer, not fixed point division\n      sum += this.x0;\n    }\n\n    if (a >= this.a1 * this.ONE_18) {\n      a /= this.a1; // Integer, not fixed point division\n      sum += this.x1;\n    }\n\n    // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\n    sum *= BigInt(100);\n    a *= BigInt(100);\n\n    // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n    if (a >= this.a2) {\n      a = (a * this.ONE_20) / this.a2;\n      sum += this.x2;\n    }\n\n    if (a >= this.a3) {\n      a = (a * this.ONE_20) / this.a3;\n      sum += this.x3;\n    }\n\n    if (a >= this.a4) {\n      a = (a * this.ONE_20) / this.a4;\n      sum += this.x4;\n    }\n\n    if (a >= this.a5) {\n      a = (a * this.ONE_20) / this.a5;\n      sum += this.x5;\n    }\n\n    if (a >= this.a6) {\n      a = (a * this.ONE_20) / this.a6;\n      sum += this.x6;\n    }\n\n    if (a >= this.a7) {\n      a = (a * this.ONE_20) / this.a7;\n      sum += this.x7;\n    }\n\n    if (a >= this.a8) {\n      a = (a * this.ONE_20) / this.a8;\n      sum += this.x8;\n    }\n\n    if (a >= this.a9) {\n      a = (a * this.ONE_20) / this.a9;\n      sum += this.x9;\n    }\n\n    if (a >= this.a10) {\n      a = (a * this.ONE_20) / this.a10;\n      sum += this.x10;\n    }\n\n    if (a >= this.a11) {\n      a = (a * this.ONE_20) / this.a11;\n      sum += this.x11;\n    }\n\n    // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n    // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n    // Let z = (a - 1) / (a + 1).\n    // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n    // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n    // division by ONE_20.\n    const z = ((a - this.ONE_20) * this.ONE_20) / (a + this.ONE_20);\n    const z_squared = (z * z) / this.ONE_20;\n\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n\n    // In each step, the numerator is multiplied by z^2\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(3);\n\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(5);\n\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(7);\n\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(9);\n\n    num = (num * z_squared) / this.ONE_20;\n    seriesSum += num / BigInt(11);\n\n    // 6 Taylor terms are sufficient for 36 decimal precision.\n\n    // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n    seriesSum *= BigInt(2);\n\n    // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n    // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n    // value.\n\n    return (sum + seriesSum) / BigInt(100);\n  }\n}\n","import { parseFixed } from '@ethersproject/bignumber';\nimport { Pool } from '../../types';\nimport { _computeScalingFactor } from '@/lib/utils/solidityMaths';\nimport { AssetHelpers } from './assetHelpers';\n\nconst AMP_PRECISION = 3; // number of decimals -> precision 1000\n\n/**\n * Parse pool info into EVM amounts. Sorts by token order if wrappedNativeAsset param passed.\n * @param {Pool}  pool\n * @param {string}  wrappedNativeAsset\n * @returns       parsed pool info\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const parsePoolInfo = (pool: Pool, wrappedNativeAsset?: string) => {\n  let parsedTokens = pool.tokens.map((token) => token.address);\n  let parsedDecimals = pool.tokens.map((token) => {\n    return token.decimals ? token.decimals.toString() : undefined;\n  });\n  let scalingFactors = parsedDecimals.map((decimals) =>\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    _computeScalingFactor(BigInt(decimals!))\n  );\n  let parsedBalances = pool.tokens.map((token) =>\n    parseFixed(token.balance, token.decimals).toString()\n  );\n  // This assumes token.balance is in human scale (e.g. from SG)\n  let upScaledBalances = pool.tokens.map((token) =>\n    parseFixed(token.balance, 18).toString()\n  );\n  let parsedWeights = pool.tokens.map((token) => {\n    return token.weight ? parseFixed(token.weight, 18).toString() : undefined;\n  });\n  let parsedPriceRates = pool.tokens.map((token) => {\n    return token.priceRate\n      ? parseFixed(token.priceRate, 18).toString()\n      : undefined;\n  });\n\n  if (wrappedNativeAsset) {\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    let sfString;\n    [\n      parsedTokens,\n      parsedDecimals,\n      sfString,\n      parsedBalances,\n      upScaledBalances,\n      parsedWeights,\n      parsedPriceRates,\n    ] = assetHelpers.sortTokens(\n      parsedTokens,\n      parsedDecimals,\n      scalingFactors,\n      parsedBalances,\n      upScaledBalances,\n      parsedWeights,\n      parsedPriceRates\n    ) as [string[], string[], string[], string[], string[], string[], string[]];\n    scalingFactors = sfString.map(BigInt);\n  }\n\n  const parsedAmp = pool.amp\n    ? parseFixed(pool.amp, AMP_PRECISION).toString() // Solidity maths uses precison method for amp that must be replicated\n    : undefined;\n  const parsedTotalShares = parseFixed(pool.totalShares, 18).toString();\n  const parsedSwapFee = parseFixed(pool.swapFee, 18).toString();\n\n  const scalingFactorsWithoutBpt: bigint[] = [],\n    parsedTokensWithoutBpt: string[] = [],\n    parsedBalancesWithoutBpt: string[] = [];\n  const bptIndex = parsedTokens.indexOf(pool.address);\n  if (bptIndex !== -1) {\n    scalingFactors.forEach((_, i) => {\n      if (i !== bptIndex) {\n        scalingFactorsWithoutBpt.push(scalingFactors[i]);\n        parsedTokensWithoutBpt.push(parsedTokens[i]);\n        parsedBalancesWithoutBpt.push(parsedBalances[i]);\n      }\n    });\n  }\n\n  return {\n    parsedTokens,\n    parsedDecimals,\n    parsedBalances,\n    parsedWeights,\n    parsedPriceRates,\n    parsedAmp,\n    parsedTotalShares,\n    parsedSwapFee,\n    upScaledBalances,\n    scalingFactors,\n    scalingFactorsWithoutBpt,\n    parsedTokensWithoutBpt,\n    parsedBalancesWithoutBpt,\n    bptIndex,\n  };\n};\n","import { Network } from '@/lib/constants/network';\n\n/**\n * TYPES\n */\ntype CommonTokens = {\n  nativeAsset: string;\n  wNativeAsset: string;\n  WETH: string;\n  BAL: string;\n  bbaUSD?: string;\n  bbaUSDv2?: string;\n  DFV?: string;\n};\n\ntype TokenConstants = {\n  Popular: {\n    Symbols: string[];\n  };\n  Addresses: CommonTokens;\n  PriceChainMap?: Record<string, string>;\n};\n\n/**\n * CONSTANTS\n */\nexport const DEFAULT_TOKEN_DECIMALS = 18;\n\nexport const TOKENS_MAINNET: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'AAVE', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    WETH: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    BAL: '0xba100000625a3754423978a60c9317c58a424e3d',\n    bbaUSD: '0x7B50775383d3D6f0215A8F290f2C9e2eEBBEceb2',\n    bbaUSDv2: '0xA13a9247ea42D743238089903570127DdA72fE44',\n  },\n};\n\nexport const TOKENS_POLYGON: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'AAVE', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    WETH: '0x7ceb23fd6bc0add59e62ac25578270cff1b9f619',\n    BAL: '0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3',\n  },\n};\n\nexport const TOKENS_ARBITRUM: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'AAVE', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    WETH: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    BAL: '0x040d1EdC9569d4Bab2D15287Dc5A4F10F56a56B8',\n  },\n};\n\nexport const TOKENS_GNOSIS: TokenConstants = {\n  Popular: {\n    Symbols: ['xDAI', 'WXDAI', 'WETH', 'BAL'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0xe91d153e0b41518a2ce8dd3d7944fa863463a97d',\n    WETH: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n    BAL: '0x7eF541E2a22058048904fE5744f9c7E4C57AF717',\n  },\n};\n\nexport const TOKENS_KOVAN: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'AAVE', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n    WETH: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n    BAL: '0xcb355677E36f390Ccc4a5d4bEADFbF1Eb2071c81',\n    bbaUSD: '0x8fd162f338B770F7E879030830cDe9173367f301',\n  },\n  PriceChainMap: {\n    /**\n     * Addresses must be lower case and map from kovan to mainnet, e.g\n     * [kovan address]: mainnet address\n     */\n    '0xdfcea9088c8a88a76ff74892c1457c17dfeef9c1':\n      '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    '0x1c8e3bcb3378a443cc591f154c5ce0ebb4da9648':\n      '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',\n    // '0x41286bb1d3e870f3f750eb7e1c25d7e48c8a1ac7':\n    //   '0xba100000625a3754423978a60c9317c58a424e3d',\n    '0x8f4bebf498cc624a0797fe64114a6ff169eee078':\n      '0xbc396689893d065f41bc2c6ecbee5e0085233447',\n    '0xaf9ac3235be96ed496db7969f60d354fe5e426b0':\n      '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2',\n    // BAL\n    '0xcb355677e36f390ccc4a5d4beadfbf1eb2071c81':\n      '0xba100000625a3754423978a60c9317c58a424e3d',\n    // USDC\n    '0xc2569dd7d0fd715b054fbf16e75b001e5c0c1115':\n      '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    '0x04df6e4121c27713ed22341e7c7df330f56f289b':\n      '0x6b175474e89094c44da98b954eedeac495271d0f',\n    '0x4803bb90d18a1cb7a2187344fe4feb0e07878d05':\n      '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n    // AAVE DAI\n    '0xff795577d9ac8bd7d90ee22b6c1703490b6512fd':\n      '0x6b175474e89094c44da98b954eedeac495271d0f', // DAI\n    // AAVE USDC\n    '0xe22da380ee6b445bb8273c81944adeb6e8450422':\n      '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', // USDC\n    // AAVE USDT\n    '0x13512979ade267ab5100878e2e0f485b568328a4':\n      '0xdac17f958d2ee523a2206206994597c13d831ec7', // USDT\n    // wstETH\n    '0xa387b91e393cfb9356a460370842bc8dbb2f29af':\n      '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n  },\n};\n\nexport const TOKENS_GOERLI: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'USDT', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n    WETH: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n    BAL: '0xfA8449189744799aD2AcE7e0EBAC8BB7575eff47',\n    bbaUSD: '0x13ACD41C585d7EbB4a9460f7C8f50BE60DC080Cd',\n  },\n  PriceChainMap: {\n    /**\n     * Addresses must be lower case and map from goerli to mainnet, e.g\n     * [goerli address]: mainnet address\n     */\n    '0xdfcea9088c8a88a76ff74892c1457c17dfeef9c1':\n      '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    '0x37f03a12241e9fd3658ad6777d289c3fb8512bc9':\n      '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',\n    '0xfa8449189744799ad2ace7e0ebac8bb7575eff47':\n      '0xba100000625a3754423978a60c9317c58a424e3d',\n    '0xe0c9275e44ea80ef17579d33c55136b7da269aeb':\n      '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    '0x8c9e6c40d3402480ace624730524facc5482798c':\n      '0x6b175474e89094c44da98b954eedeac495271d0f',\n    '0x1f1f156e0317167c11aa412e3d1435ea29dc3cce':\n      '0xdac17f958d2ee523a2206206994597c13d831ec7',\n    '0x4cb1892fddf14f772b2e39e299f44b2e5da90d04':\n      '0x3ed3b47dd13ec9a98b44e6204a523e766b225811',\n    '0x811151066392fd641fe74a9b55a712670572d161':\n      '0xbcca60bb61934080951369a648fb03df4f96263c',\n    '0x89534a24450081aa267c79b07411e9617d984052':\n      '0x028171bca77440897b824ca71d1c56cac55b68a3',\n    '0x829f35cebbcd47d3c120793c12f7a232c903138b':\n      '0x956f47f50a910163d8bf957cf5846d573e7f87ca',\n    '0xff386a3d08f80ac38c77930d173fa56c6286dc8b':\n      '0x6810e776880c02933d47db1b9fc05908e5386b96',\n  },\n};\n\nexport const TOKENS_GENERIC: TokenConstants = {\n  Popular: {\n    Symbols: ['WBTC', 'DAI', 'USDC', 'BAL', 'AAVE', 'WETH'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    wNativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    WETH: '0x0000000000000000000000000000000000000000',\n    BAL: '0x0000000000000000000000000000000000000000',\n  },\n};\n\nexport const TOKENS_OASYS: TokenConstants = {\n  Popular: {\n    Symbols: ['DFV', 'BAL', 'WETH', 'DAI', 'USDC', 'USDT'],\n  },\n  Addresses: {\n    nativeAsset: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE', // need CONFIRM\n    wNativeAsset: '0xeb7638a7c4eaeb25ece59f4382b9f06a8056f980', // need CONFIRM\n    WETH: '0xeb7638a7c4eaeb25ece59f4382b9f06a8056f980',\n    BAL: '0x1f6fb04e57ff270b2c97168e48b5bf5a1e32d8b7',\n    DFV: '0xb7e40D63d0Aee3d6ce83070DD411D901F5E44a9C',\n  },\n  PriceChainMap: {\n    '0xeb7638a7c4eaeb25ece59f4382b9f06a8056f980':\n      '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n    '0x62400c6b2685599d1c1308a72c4cb2f6b86b4867':\n      '0x6b175474e89094c44da98b954eedeac495271d0f',\n    '0x01aC28D93706f5c394B853BBa1456F54d9298C8d':\n      '0xdac17f958d2ee523a2206206994597c13d831ec7',\n    '0x4D20BFe67C3F2B3d839B25F2B0Cc942BC84C481E':\n      '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    '0x1f6fb04e57ff270b2c97168e48b5bf5a1e32d8b7':\n      '0xba100000625a3754423978a60c9317c58a424e3d',\n  },\n};\n\nexport const TOKENS_MAP = {\n  [Network.KOVAN]: TOKENS_KOVAN,\n  [Network.GOERLI]: TOKENS_GOERLI,\n  [Network.MAINNET]: TOKENS_MAINNET,\n  [Network.POLYGON]: TOKENS_POLYGON,\n  [Network.ARBITRUM]: TOKENS_ARBITRUM,\n  [Network.GNOSIS]: TOKENS_GNOSIS,\n  [Network.OASYS]: TOKENS_OASYS,\n};\n\nexport function TOKENS(networkId: Network): TokenConstants {\n  const id = networkId as keyof typeof TOKENS_MAP;\n  return TOKENS_MAP[id] ? TOKENS_MAP[id] : TOKENS_GENERIC;\n}\n","export enum PoolGaugesAttributes {\n  Id = 'id',\n  Address = 'address',\n  PoolId = 'poolId',\n}\n\nexport interface PoolGauges {\n  preferentialGauge: {\n    id: string;\n  };\n  gauges: {\n    id: string;\n    relativeWeightCap?: string | null;\n  }[];\n}\n","export enum PoolShareAttributes {\n  Balance = 'balance',\n  Id = 'id',\n  PoolId = 'poolId',\n  UserAddress = 'userAddress',\n}\n\nexport interface PoolShare {\n  id: string;\n  userAddress: string;\n  poolId: string;\n  balance: string;\n}\n","export enum GaugeShareAttributes {\n  Id = 'id',\n  UserAddress = 'user',\n  GaugeId = 'gauge',\n  Balance = 'balance',\n}\n\nexport interface GaugeShare {\n  id: string;\n  balance: string;\n  userAddress: string;\n  gauge: {\n    id: string;\n    poolId?: string;\n    isKilled: boolean;\n    totalSupply: string;\n  };\n}\n","import { Network } from './lib/constants/network';\nimport type { BigNumberish } from '@ethersproject/bignumber';\nimport type { Contract } from '@ethersproject/contracts';\nimport type { PoolDataService, TokenPriceService } from '@balancer-labs/sor';\nimport type {\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n  JoinPoolAttributes,\n} from './modules/pools/pool-types/concerns/types';\nimport type {\n  Findable,\n  Searchable,\n  LiquidityGauge,\n  PoolAttribute,\n  TokenAttribute,\n} from '@/modules/data/types';\nimport type {\n  BaseFeeDistributor,\n  GaugeSharesRepository,\n  PoolGaugesRepository,\n  PoolSharesRepository,\n  ProtocolFeesProvider,\n  PoolJoinExitRepository,\n} from './modules/data';\nimport type { GraphQLArgs } from './lib/graphql';\nimport type { AprBreakdown } from '@/modules/pools/apr/apr';\nimport * as Queries from '@/modules/pools/queries/types';\nexport * from '@/modules/data/types';\nexport { Network, AprBreakdown };\n\nexport type Address = string;\n\nexport interface BalancerSdkConfig {\n  //use a known network or provide an entirely custom config\n  network: Network | BalancerNetworkConfig;\n  rpcUrl: string;\n  //overwrite the subgraph url if you don't want to use the balancer labs maintained version\n  customSubgraphUrl?: string;\n  subgraphQuery?: GraphQLQuery;\n  //optionally overwrite parts of the standard SOR config\n  sor?: Partial<BalancerSdkSorConfig>;\n  tenderly?: BalancerTenderlyConfig;\n}\n\nexport interface BalancerTenderlyConfig {\n  accessKey?: string;\n  user?: string;\n  project?: string;\n  blockNumber?: number;\n}\n\nexport interface BalancerSdkSorConfig {\n  //use a built-in service or provide a custom implementation of a TokenPriceService\n  //defaults to coingecko\n  tokenPriceService: 'coingecko' | 'subgraph' | TokenPriceService;\n  //use a built-in service or provide a custom implementation of a PoolDataService\n  //defaults to subgraph\n  poolDataService: 'subgraph' | PoolDataService;\n  //if a custom PoolDataService is provided, on chain balance fetching needs to be handled externally\n  //default to true.\n  fetchOnChainBalances: boolean;\n}\n\nexport interface ContractAddresses {\n  vault: string;\n  multicall: string;\n  balancerHelpers: string;\n  lidoRelayer?: string;\n  relayerV3?: string;\n  relayerV4?: string;\n  gaugeController?: string;\n  feeDistributor?: string;\n  veBal?: string;\n  veBalProxy?: string;\n  protocolFeePercentagesProvider?: string;\n  weightedPoolFactory?: string;\n  composableStablePoolFactory?: string;\n}\n\nexport interface BalancerNetworkConfig {\n  chainId: Network;\n  addresses: {\n    contracts: ContractAddresses;\n    tokens: {\n      wrappedNativeAsset: string;\n      lbpRaisingTokens?: string[];\n      stETH?: string;\n      wstETH?: string;\n      bal?: string;\n      veBal?: string;\n      bbaUsd?: string;\n    };\n  };\n  tenderly?: BalancerTenderlyConfig;\n  urls: {\n    subgraph: string;\n    gaugesSubgraph?: string;\n    blockNumberSubgraph?: string;\n  };\n  pools: {\n    wETHwstETH?: PoolReference;\n  };\n  poolsToIgnore?: string[];\n  sorConnectingTokens?: { symbol: string; address: string }[];\n}\n\nexport interface BalancerDataRepositories {\n  pools: Findable<Pool, PoolAttribute> & Searchable<Pool>;\n  poolsOnChain: Findable<Pool, PoolAttribute> & Searchable<Pool>;\n  yesterdaysPools?: Findable<Pool, PoolAttribute> & Searchable<Pool>;\n  tokenPrices: Findable<Price>;\n  tokenHistoricalPrices: Findable<Price>;\n  tokenMeta: Findable<Token, TokenAttribute>;\n  liquidityGauges?: Findable<LiquidityGauge>;\n  feeDistributor?: BaseFeeDistributor;\n  feeCollector: Findable<number>;\n  protocolFees?: ProtocolFeesProvider;\n  tokenYields: Findable<number>;\n  poolShares: PoolSharesRepository;\n  poolGauges?: PoolGaugesRepository;\n  poolJoinExits: PoolJoinExitRepository;\n  gaugeShares?: GaugeSharesRepository;\n}\n\nexport type PoolReference = {\n  id: string;\n  address: string;\n};\n\nexport enum PoolSpecialization {\n  GeneralPool = 0,\n  MinimalSwapInfoPool,\n  TwoTokenPool,\n}\n\n// Joins\n\nexport type JoinPoolRequest = {\n  assets: string[];\n  maxAmountsIn: BigNumberish[];\n  userData: string;\n  fromInternalBalance: boolean;\n};\n\n// Exit\n\nexport type ExitPoolRequest = {\n  assets: string[];\n  minAmountsOut: string[];\n  userData: string;\n  toInternalBalance: boolean;\n};\n\n// Balance Operations\n\nexport enum UserBalanceOpKind {\n  DepositInternal = 0,\n  WithdrawInternal,\n  TransferInternal,\n  TransferExternal,\n}\n\nexport type UserBalanceOp = {\n  kind: UserBalanceOpKind;\n  asset: string;\n  amount: BigNumberish;\n  sender: string;\n  recipient: string;\n};\n\nexport enum PoolBalanceOpKind {\n  Withdraw = 0,\n  Deposit = 1,\n  Update = 2,\n}\n\nexport type PoolBalanceOp = {\n  kind: PoolBalanceOpKind;\n  poolId: string;\n  token: string;\n  amount: BigNumberish;\n};\n\nexport interface TransactionData {\n  contract?: Contract;\n  function: string;\n  params: string[];\n  outputs?: {\n    amountsIn?: string[];\n    amountsOut?: string[];\n  };\n}\n\nexport type Currency = 'eth' | 'usd';\n\nexport type Price = { [currency in Currency]?: string };\nexport type TokenPrices = { [address: string]: Price };\nexport type HistoricalPrices = {\n  prices: [[number, number]];\n  market_caps: [[number, number]];\n  total_volumes: [[number, number]];\n};\n\nexport interface Token {\n  address: string;\n  decimals?: number;\n  symbol?: string;\n  price?: Price;\n}\n\nexport interface PoolToken extends Token {\n  balance: string;\n  priceRate?: string;\n  weight?: string | null;\n  isExemptFromYieldProtocolFee?: boolean;\n  token?: SubPoolMeta;\n}\n\nexport interface SubPoolMeta {\n  pool: SubPool | null;\n  latestUSDPrice?: string;\n}\n\nexport interface SubPool {\n  id: string;\n  address: string;\n  poolType: PoolType;\n  totalShares: string;\n  mainIndex: number;\n  tokens?: PoolToken[];\n}\n\nexport interface OnchainTokenData {\n  balance: string;\n  weight: number;\n  decimals: number;\n  logoURI: string | undefined;\n  name: string;\n  symbol: string;\n}\n\nexport interface OnchainPoolData {\n  tokens: Record<Address, OnchainTokenData>;\n  totalSupply: string;\n  decimals: number;\n  swapFee: string;\n  amp?: string;\n  swapEnabled: boolean;\n  tokenRates?: string[];\n}\n\nexport enum PoolType {\n  Weighted = 'Weighted',\n  Investment = 'Investment',\n  Stable = 'Stable',\n  HighAmpComposableStable = 'HighAmpComposableStable',\n  ComposableStable = 'ComposableStable',\n  MetaStable = 'MetaStable',\n  StablePhantom = 'StablePhantom',\n  LiquidityBootstrapping = 'LiquidityBootstrapping',\n  AaveLinear = 'AaveLinear',\n  Linear = 'Linear',\n  EulerLinear = 'EulerLinear',\n  ERC4626Linear = 'ERC4626Linear',\n  Element = 'Element',\n  Gyro2 = 'Gyro2',\n  Gyro3 = 'Gyro3',\n  Managed = 'Managed',\n}\n\nexport interface Pool {\n  id: string;\n  name: string;\n  address: string;\n  chainId: number;\n  poolType: PoolType;\n  poolTypeVersion: number;\n  swapFee: string;\n  protocolYieldFeeCache: string;\n  protocolSwapFeeCache: string;\n  owner?: string;\n  factory?: string;\n  tokens: PoolToken[];\n  tokensList: string[];\n  tokenAddresses?: string[];\n  totalLiquidity: string;\n  totalShares: string;\n  totalSwapFee?: string;\n  totalSwapVolume?: string;\n  onchain?: OnchainPoolData;\n  createTime?: number;\n  mainTokens?: string[];\n  wrappedTokens?: string[];\n  unwrappedTokens?: string[];\n  isNew?: boolean;\n  volumeSnapshot?: string;\n  feesSnapshot?: string;\n  boost?: string;\n  symbol?: string;\n  swapEnabled: boolean;\n  amp?: string;\n  wrappedIndex?: number;\n  mainIndex?: number;\n  apr?: AprBreakdown;\n  liquidity?: string;\n  totalWeight: string;\n  lowerTarget: string;\n  upperTarget: string;\n  priceRateProviders?: PriceRateProvider[];\n}\n\nexport interface PriceRateProvider {\n  address: string;\n  token: {\n    address: string;\n  };\n}\n\n/**\n * Pool use-cases / controller layer\n */\nexport interface PoolWithMethods extends Pool, Queries.ParamsBuilder {\n  buildJoin: (\n    joiner: string,\n    tokensIn: string[],\n    amountsIn: string[],\n    slippage: string\n  ) => JoinPoolAttributes;\n  calcPriceImpact: (\n    amountsIn: string[],\n    minBPTOut: string,\n    isJoin: boolean\n  ) => Promise<string>;\n  buildExitExactBPTIn: (\n    exiter: string,\n    bptIn: string,\n    slippage: string,\n    shouldUnwrapNativeAsset?: boolean,\n    singleTokenMaxOut?: string\n  ) => ExitExactBPTInAttributes;\n  buildExitExactTokensOut: (\n    exiter: string,\n    tokensOut: string[],\n    amountsOut: string[],\n    slippage: string\n  ) => ExitExactTokensOutAttributes;\n  calcSpotPrice: (tokenIn: string, tokenOut: string) => string;\n}\n\nexport interface GraphQLQuery {\n  args: GraphQLArgs;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  attrs: any;\n}\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"units/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        }\n        else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nexport function formatUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return formatFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function parseUnits(value, unitName) {\n    if (typeof (value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return parseFixed(value, (unitName != null) ? unitName : 18);\n}\nexport function formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nexport function parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=index.js.map","import { Network } from '@/types';\nimport { AprFetcher } from '../repository';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { formatUnits } from '@ethersproject/units';\nimport axios from 'axios';\n\n// can be fetched from subgraph\n// aave-js: supplyAPR = graph.liquidityRate = core.getReserveCurrentLiquidityRate(_reserve)\n// or directly from RPC:\n// wrappedAaveToken.LENDING_POOL.getReserveCurrentLiquidityRate(mainTokenAddress)\n\nexport const yieldTokens = {\n  [Network.MAINNET]: {\n    waUSDT: '0xf8fd466f12e236f4c96f7cce6c79eadb819abf58',\n    waUSDC: '0xd093fa4fb80d09bb30817fdcd442d4d02ed3e5de',\n    waDAI: '0x02d60b84491589974263d922d9cc7a3152618ef6',\n  },\n  [Network.POLYGON]: {\n    wamDAI: '0xee029120c72b0607344f35b17cdd90025e647b00',\n    wamUSDC: '0x221836a597948dce8f3568e044ff123108acc42a',\n    wamUSDT: '0x19c60a251e525fa88cd6f3768416a8024e98fc19',\n  },\n};\n\nexport const allYieldTokens = {\n  ...yieldTokens[Network.MAINNET],\n  ...yieldTokens[Network.POLYGON],\n};\n\nexport const wrappedTokensMap = {\n  [Network.MAINNET]: {\n    // USDT\n    [yieldTokens[Network.MAINNET].waUSDT]: {\n      aToken: '0x3ed3b47dd13ec9a98b44e6204a523e766b225811',\n      underlying: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n    },\n    // USDC\n    [yieldTokens[Network.MAINNET].waUSDC]: {\n      aToken: '0xbcca60bb61934080951369a648fb03df4f96263c',\n      underlying: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    },\n    // DAI\n    [yieldTokens[Network.MAINNET].waDAI]: {\n      aToken: '0x028171bca77440897b824ca71d1c56cac55b68a3',\n      underlying: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    },\n  },\n  [Network.POLYGON]: {\n    // USDT\n    [yieldTokens[Network.POLYGON].wamUSDT]: {\n      aToken: '0x60d55f02a771d515e077c9c2403a1ef324885cec',\n      underlying: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f',\n    },\n    // USDC\n    [yieldTokens[Network.POLYGON].wamUSDC]: {\n      aToken: '0x1a13f4ca1d028320a707d99520abfefca3998b7f',\n      underlying: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n    },\n    // DAI\n    [yieldTokens[Network.POLYGON].wamDAI]: {\n      aToken: '0x27f8d03b3a2196956ed754badc28d73be8830a6e',\n      underlying: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063',\n    },\n  },\n};\n\nconst aTokens = {\n  [Network.MAINNET]: Object.values(wrappedTokensMap[Network.MAINNET]).map(\n    (t) => t.aToken\n  ),\n  [Network.POLYGON]: Object.values(wrappedTokensMap[Network.POLYGON]).map(\n    (t) => t.aToken\n  ),\n};\n\nconst underlyingAssets = {\n  [Network.MAINNET]: Object.values(wrappedTokensMap[Network.MAINNET]).map(\n    (t) => t.underlying\n  ),\n  [Network.POLYGON]: Object.values(wrappedTokensMap[Network.POLYGON]).map(\n    (t) => t.underlying\n  ),\n};\n\nconst underlyingToWrapped = {\n  [Network.MAINNET]: Object.fromEntries(\n    Object.keys(wrappedTokensMap[Network.MAINNET]).map((wrapped) => [\n      wrappedTokensMap[Network.MAINNET][\n        wrapped as keyof typeof wrappedTokensMap[Network.MAINNET]\n      ].underlying,\n      wrapped,\n    ])\n  ),\n  [Network.POLYGON]: Object.fromEntries(\n    Object.keys(wrappedTokensMap[Network.POLYGON]).map((wrapped) => [\n      wrappedTokensMap[Network.POLYGON][\n        wrapped as keyof typeof wrappedTokensMap[Network.POLYGON]\n      ].underlying,\n      wrapped,\n    ])\n  ),\n};\n\n// Subgraph\n// liquidityRate, depositors APR (in rays - 27 digits)\nconst endpoint = {\n  [Network.MAINNET]: 'https://api.thegraph.com/subgraphs/name/aave/protocol-v2',\n  [Network.POLYGON]:\n    'https://api.thegraph.com/subgraphs/name/aave/aave-v2-matic',\n};\n\nconst query = `\n  query getReserves($aTokens: [String!], $underlyingAssets: [Bytes!]) {\n    reserves(\n      where: {\n        aToken_in: $aTokens\n        underlyingAsset_in: $underlyingAssets\n        isActive: true\n      }\n    ) {\n      underlyingAsset\n      liquidityRate\n    }\n  }\n`;\n\ninterface ReserveResponse {\n  data: {\n    reserves: [\n      {\n        underlyingAsset: string;\n        liquidityRate: string;\n      }\n    ];\n  };\n}\n\n/**\n * Fetching and parsing aave APRs from a subgraph\n *\n * @returns APRs for aave tokens\n */\nexport const aave: AprFetcher = async (network?: Network) => {\n  const noRates = Object.fromEntries(\n    Object.keys(wrappedTokensMap).map((key) => [key, 0])\n  );\n\n  if (!network || (network != Network.MAINNET && network != Network.POLYGON)) {\n    return noRates;\n  }\n\n  try {\n    const graphqlQuery = {\n      operationName: 'getReserves',\n      query,\n      variables: {\n        aTokens: aTokens[network],\n        underlyingAssets: underlyingAssets[network],\n      },\n    };\n\n    const response = await axios.post(endpoint[network], graphqlQuery);\n\n    const {\n      data: { reserves },\n    } = response.data as ReserveResponse;\n\n    const aprEntries = reserves.map((r) => [\n      underlyingToWrapped[network][r.underlyingAsset],\n      // Note: our assumption is frontend usage, this service is not a good source where more accuracy is needed.\n      // Converting from aave ray number (27 digits) to bsp\n      // essentially same as here:\n      // https://github.com/aave/aave-utilities/blob/master/packages/math-utils/src/formatters/reserve/index.ts#L231\n      Math.round(\n        parseFloat(formatUnits(BigNumber.from(r.liquidityRate), 27)) * 10000\n      ),\n    ]);\n\n    return Object.fromEntries(aprEntries);\n  } catch (error) {\n    console.log(error);\n\n    return noRates;\n  }\n};\n\n// TODO: RPC multicall\n// always upto date\n// const lendingPoolAddress = '0x7d2768de32b0b80b7a3454c06bdac94a69ddc7a9';\n","import { Token, TokenPrices, Network } from '@/types';\nimport { TOKENS } from '@/lib/constants/tokens';\nimport { wrappedTokensMap as aaveWrappedMap } from '@/modules/data/token-yields/tokens/aave';\n\nexport function tokensToTokenPrices(tokens: Token[]): TokenPrices {\n  const tokenPrices: TokenPrices = {};\n  tokens.forEach((token) => {\n    if (token.price) {\n      tokenPrices[token.address] = token.price;\n    }\n  });\n\n  return tokenPrices;\n}\n\nexport function tokenAddressForPricing(\n  address: string,\n  chainId: Network\n): string {\n  let a = address.toLowerCase();\n  a = addressMapIn(a, chainId);\n  a = unwrapToken(a, chainId);\n\n  return a;\n}\n\n/**\n * Maps testnet tokens, eg: on Göreli to a mainnet one.\n * Used to get the pricing information on networks not supported by a price feed.\n *\n * @param address Address on a testnet network\n */\nexport const addressMapIn = (address: string, chainId: Network): string => {\n  const addressMap = TOKENS(chainId).PriceChainMap;\n  return (addressMap && addressMap[address.toLowerCase()]) || address;\n};\n\n/**\n * Finds an underlying token address for a wrapped one\n *\n * @param wrappedAddress\n * @param chainId\n * @returns underlying token address\n */\nexport const unwrapToken = (\n  wrappedAddress: string,\n  chainId: Network\n): string => {\n  const lowercase = wrappedAddress.toLocaleLowerCase();\n\n  const aaveChain = chainId as keyof typeof aaveWrappedMap;\n  if (\n    aaveWrappedMap[aaveChain] != undefined &&\n    aaveWrappedMap[aaveChain] != null\n  ) {\n    // Double if to avoid skipping just to at after compile: Object.keys()?.includes\n    if (Object.keys(aaveWrappedMap[aaveChain]).includes(lowercase)) {\n      return aaveWrappedMap[aaveChain][\n        lowercase as keyof typeof aaveWrappedMap[typeof aaveChain]\n      ].aToken;\n    } else {\n      return lowercase;\n    }\n  } else {\n    return lowercase;\n  }\n};\n","/* eslint-disable @typescript-eslint/no-empty-function */\n\n/**\n * Debouncer for different attributes requested over time, which need to be aggregated into a single resolving call\n *\n * Choosing deferred promise since we have setTimeout that returns a promise\n * Some reference for history buffs: https://github.com/petkaantonov/bluebird/wiki/Promise-anti-patterns\n */\n\ninterface Promised<T> {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (reason: unknown) => void;\n}\n\nconst makePromise = <T>(): Promised<T> => {\n  let resolve: (value: T) => void = () => {};\n  let reject: (reason: unknown) => void = () => {};\n  const promise = new Promise<T>((res, rej) => {\n    [resolve, reject] = [res, rej];\n  });\n  return { promise, reject, resolve };\n};\n\n/**\n * Aggregates attributes and exectutes a debounced call\n *\n * @param fn Function to debounce\n * @param wait Debouncing waiting time [ms]\n */\nexport class Debouncer<T, A> {\n  requestSet = new Set<A>(); // collection of requested attributes\n  promisedCalls: Promised<T>[] = []; // When requesting a price we return a deferred promise\n  promisedCount = 0; // New request coming when setTimeout is executing will make a new promise\n  timeout?: ReturnType<typeof setTimeout>;\n  debounceCancel = (): void => {}; // Allow to cancel mid-flight requests\n\n  constructor(private fn: (attrs: A[]) => Promise<T>, private wait = 200) {}\n\n  fetch(attr?: A): Promise<T> {\n    if (attr) {\n      this.requestSet.add(attr);\n    }\n\n    if (this.promisedCalls[this.promisedCount]) {\n      return this.promisedCalls[this.promisedCount].promise;\n    }\n\n    this.promisedCalls[this.promisedCount] = makePromise();\n\n    const { promise, resolve, reject } = this.promisedCalls[this.promisedCount];\n\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n\n    this.timeout = setTimeout(() => {\n      this.promisedCount++; // after execution started any new call will get a new promise\n      const requestAttrs = [...this.requestSet];\n      this.requestSet.clear(); // clear optimistically assuming successful results\n      this.fn(requestAttrs)\n        .then((results) => {\n          resolve(results);\n          this.debounceCancel = () => {};\n        })\n        .catch((reason) => {\n          if (\n            reason.response &&\n            reason.response.data &&\n            reason.response.data.error\n          ) {\n            reason = reason.response.data.error;\n          }\n          reject(reason);\n        });\n    }, this.wait);\n\n    this.debounceCancel = () => {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n      reject('Cancelled');\n      delete this.promisedCalls[this.promisedCount];\n    };\n\n    return promise;\n  }\n}\n","import {\n  BigNumber,\n  BigNumberish,\n  parseFixed as _parseFixed,\n  formatFixed as _formatFixed,\n} from '@ethersproject/bignumber';\n\nexport function parseFixed(value: string, decimals?: BigNumberish): BigNumber {\n  const valueWithTrimmedDecimals = new RegExp(`[0-9]+\\\\.?[0-9]{0,${decimals}}`);\n  const result = value.match(valueWithTrimmedDecimals);\n  let parsedValue = value;\n  if (result) {\n    parsedValue = result[0];\n  }\n\n  return _parseFixed(parsedValue, decimals);\n}\n\nexport function formatFixed(value: BigNumber, decimals: BigNumberish): string {\n  const ethersFormat = _formatFixed(value, decimals);\n  return ethersFormat.replace(/(.0$)/, '');\n}\n\nexport function parseToBigInt18(value: string): bigint {\n  return parseFixed(value, 18).toBigInt();\n}\n\nexport function formatFromBigInt18(value: bigint): string {\n  return _formatFixed(BigNumber.from(value), 18);\n}\n\n/**\n * Like parseEther but for numbers. Converts floating point to BigNumber using 18 decimals\n */\nexport const bn = (value: number): BigNumber => _parseFixed(`${value}`, 18);\n","import { getAddress } from '@ethersproject/address';\n\nexport * from './aaveHelpers';\nexport * from './assetHelpers';\nexport * from './errors';\nexport * from './permit';\nexport * from './poolHelper';\nexport * from './signatures';\nexport * from './tokens';\nexport * from './debouncer';\nexport * from './math';\n\nexport const isSameAddress = (address1: string, address2: string): boolean =>\n  getAddress(address1) === getAddress(address2);\n\nexport function insert<T>(arr: T[], index: number, newItem: T): T[] {\n  return [\n    // part of the array before the specified index\n    ...arr.slice(0, index),\n    // inserted item\n    newItem,\n    // part of the array after the specified index\n    ...arr.slice(index),\n  ];\n}\n","import { GraphQLArgs, GraphQLArgsFormatter } from '../types';\n\nexport class BalancerAPIArgsFormatter implements GraphQLArgsFormatter {\n  format(args: GraphQLArgs): GraphQLArgs {\n    return args;\n  }\n}\n","import { GraphQLArgs, GraphQLArgsFormatter, GraphQLFilter } from '../types';\n\nexport class SubgraphArgsFormatter implements GraphQLArgsFormatter {\n  operatorMap: Record<string, string>;\n\n  constructor() {\n    this.operatorMap = {\n      gt: '_gt',\n      lt: '_lt',\n      eq: '',\n      in: '_in',\n      not_in: '_not_in',\n      contains: '_contains',\n    };\n  }\n\n  format(args: GraphQLArgs): GraphQLArgs {\n    const whereQuery: Record<string, GraphQLFilter> = {};\n    if (args.where) {\n      Object.entries(args.where).forEach(([name, filter]) => {\n        Object.entries(filter).forEach(([operator, value]) => {\n          whereQuery[`${name}${this.operatorMap[operator]}`] = value;\n        });\n      });\n    }\n\n    return {\n      ...args,\n      ...{ where: whereQuery },\n    };\n  }\n}\n","import { mergeWith } from 'lodash';\nimport { GraphQLArgs, GraphQLArgsFormatter } from './types';\n\nexport * from './formatters';\n\nexport class GraphQLArgsBuilder {\n  constructor(readonly args: GraphQLArgs) {}\n\n  merge(other: GraphQLArgsBuilder): GraphQLArgsBuilder {\n    const mergedArgs = mergeWith(\n      this.args,\n      other.args,\n      (objValue: unknown, srcValue: unknown) => {\n        if (Array.isArray(objValue)) {\n          return objValue.concat(srcValue);\n        }\n      }\n    );\n\n    return new GraphQLArgsBuilder(mergedArgs);\n  }\n\n  format(formatter: GraphQLArgsFormatter): unknown {\n    return formatter.format(this.args);\n  }\n}\n","import { SwapInfo } from '@balancer-labs/sor';\nimport { Vault } from '@balancer-labs/typechain';\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nexport enum SwapType {\n  SwapExactIn,\n  SwapExactOut,\n}\n\nexport type FundManagement = {\n  sender: string;\n  recipient: string;\n  fromInternalBalance: boolean;\n  toInternalBalance: boolean;\n};\n\nexport type SingleSwap = {\n  poolId: string;\n  kind: SwapType;\n  assetIn: string;\n  assetOut: string;\n  amount: BigNumberish;\n  userData: string;\n};\n\nexport type Swap = {\n  request: SingleSwap;\n  funds: FundManagement;\n  limit: BigNumberish;\n  deadline: BigNumberish;\n  value?: BigNumberish;\n  outputReference?: BigNumberish;\n};\n\nexport type BatchSwapStep = {\n  poolId: string;\n  assetInIndex: number;\n  assetOutIndex: number;\n  amount: string;\n  userData: string;\n};\n\nexport type BatchSwap = {\n  kind: SwapType;\n  swaps: BatchSwapStep[];\n  assets: string[];\n  funds: FundManagement;\n  limits: BigNumberish[];\n  deadline: BigNumberish;\n  value?: BigNumberish;\n  outputReferences?: { index: BigNumberish; key: BigNumberish }[];\n};\n\nexport interface FetchPoolsInput {\n  fetchPools: boolean;\n  fetchOnChain: boolean;\n}\n\nexport interface QueryWithSorInput {\n  tokensIn: string[];\n  tokensOut: string[];\n  swapType: SwapType;\n  amounts: string[];\n  fetchPools: FetchPoolsInput;\n}\n\nexport interface SwapInput {\n  tokenIn: string;\n  tokenOut: string;\n  swapType: SwapType;\n  amount: string;\n}\n\nexport interface QueryWithSorOutput {\n  returnAmounts: string[];\n  swaps: BatchSwapStep[];\n  assets: string[];\n  deltas: string[];\n}\n\nexport interface QuerySimpleFlashSwapParameters {\n  poolIds: string[];\n  assets: BatchSwap['assets'];\n  flashLoanAmount: string;\n  vaultContract: Vault;\n}\n\nexport interface SimpleFlashSwapParameters {\n  poolIds: string[];\n  assets: BatchSwap['assets'];\n  flashLoanAmount: string;\n  walletAddress: string;\n}\n\nexport interface QuerySimpleFlashSwapResponse {\n  profits: Record<string, string>;\n  isProfitable: boolean;\n}\n\nexport interface FindRouteParameters {\n  tokenIn: string;\n  tokenOut: string;\n  amount: BigNumber;\n  gasPrice: BigNumber;\n  maxPools: number;\n}\n\nexport interface BuildTransactionParameters {\n  userAddress: string;\n  recipient?: string;\n  swapInfo: SwapInfo;\n  kind: SwapType;\n  deadline: BigNumber;\n  maxSlippage: number;\n}\n\nexport interface SwapTransactionRequest {\n  to: string;\n  data: string;\n  value?: BigNumber;\n}\n\nexport interface SwapAttributes {\n  to: string;\n  functionName: string;\n  attributes: Swap | BatchSwap;\n  data: string;\n  value?: BigNumber;\n}\n","import { BigNumberish, BigNumber } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther } from '@ethersproject/constants';\n\nimport { SwapType } from './types';\nimport { isSameAddress } from '@/lib/utils';\n\n/**\n * Helper to create limits using a defined slippage amount.\n * @param tokensIn - Array of token in addresses.\n * @param tokensOut - Array of token out addresses.\n * @param swapType - Type of swap - SwapExactIn or SwapExactOut\n * @param deltas - An array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array.\n * @param assets - array contains the addresses of all assets involved in the swaps.\n * @param slippage - Slippage to be applied. i.e. 5%=50000000000000000.\n * @returns Returns an array (same length as assets) with limits applied for each asset.\n */\nexport function getLimitsForSlippage(\n  tokensIn: string[],\n  tokensOut: string[],\n  swapType: SwapType,\n  deltas: BigNumberish[],\n  assets: string[],\n  slippage: BigNumberish\n): BigNumberish[] {\n  // Limits:\n  // +ve means max to send\n  // -ve mean min to receive\n  // For a multihop the intermediate tokens should be 0\n  const limits: BigNumber[] = new Array(assets.length).fill(Zero);\n\n  assets.forEach((token, i) => {\n    if (tokensIn.some((tokenIn) => isSameAddress(token, tokenIn))) {\n      // For SwapExactOut slippage is on tokenIn, i.e. amtIn + slippage\n      const slippageAmount = BigNumber.from(slippage).add(WeiPerEther);\n      limits[i] =\n        swapType === SwapType.SwapExactOut\n          ? limits[i].add(\n              BigNumber.from(deltas[i]).mul(slippageAmount).div(WeiPerEther)\n            )\n          : limits[i].add(deltas[i]);\n    }\n\n    if (tokensOut.some((tokenOut) => isSameAddress(token, tokenOut))) {\n      // For SwapExactIn slippage is on tokenOut, i.e. amtOut - slippage\n      const slippageAmount = WeiPerEther.sub(BigNumber.from(slippage));\n      limits[i] =\n        swapType === SwapType.SwapExactIn\n          ? limits[i].add(\n              BigNumber.from(deltas[i]).mul(slippageAmount).div(WeiPerEther)\n            )\n          : limits[i].add(deltas[i]);\n    }\n  });\n\n  return limits;\n}\n","import { BigNumber } from '@ethersproject/bignumber';\n\nconst bpsPerOne = BigNumber.from('10000'); // number of basis points in 100%\n\n/**\n * Multiplies input by slippage amount\n *\n * @param {BigNumber} amount Input amount (not parsed)\n * @param {BigNumber} slippage Slippage value in bps - i.e. 50 = 0.5%\n * @returns Result delta from multiplying amount and slippage\n */\nexport const mulSlippage = (\n  amount: BigNumber,\n  slippage: BigNumber\n): BigNumber => {\n  const delta = amount.mul(slippage).div(bpsPerOne);\n  return delta;\n};\n\n/**\n * Reduce input amount by slippage factor\n *\n * @param {BigNumber} amount Input in EVM amounts\n * @param {BigNumber} slippage Slippage value in bps - i.e. 50 = 0.5%\n * @returns Result amount subtracting slippage\n */\nexport const subSlippage = (\n  amount: BigNumber,\n  slippage: BigNumber\n): BigNumber => {\n  const delta = mulSlippage(amount, slippage);\n  return amount.sub(delta);\n};\n\n/**\n * Increase input amount by slippage factor\n *\n * @param {BigNumber} amount Input in EVM amounts\n * @param {BigNumber} slippage Slippage value in bps - i.e. 50 = 0.5%\n * @returns Result amount adding slippage\n */\nexport const addSlippage = (\n  amount: BigNumber,\n  slippage: BigNumber\n): BigNumber => {\n  const delta = mulSlippage(amount, slippage);\n  return amount.add(delta);\n};\n","import { Network } from './network';\nimport { BalancerNetworkConfig } from '@/types';\n\n//export const balancerVault = '0xBA12222222228d8Ba445958a75a0704d566BF2C8';\nexport const balancerVault = '0x0855eA6187dE973Bc5849d67C14f59c6fE2cF039';\n\nexport const BALANCER_NETWORK_CONFIG: Record<Network, BalancerNetworkConfig> = {\n  [Network.MAINNET]: {\n    chainId: Network.MAINNET, //1\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0xeefba1e63905ef1d7acba5a8513c70307c1ce441',\n        balancerHelpers: '0x5aDDCCa35b7A0D07C74063c48700C8590E87864E',\n        lidoRelayer: '0xdcdbf71A870cc60C6F9B621E28a7D3Ffd6Dd4965',\n        relayerV3: '0x886A3Ec7bcC508B8795990B60Fa21f85F9dB7948',\n        relayerV4: '0x2536dfeeCB7A0397CF98eDaDA8486254533b1aFA',\n        gaugeController: '0xc128468b7ce63ea702c1f104d55a2566b13d3abd',\n        feeDistributor: '0xD3cf852898b21fc233251427c2DC93d3d604F3BB',\n        protocolFeePercentagesProvider:\n          '0x97207B095e4D5C9a6e4cfbfcd2C3358E03B90c4A',\n        veBal: '0xC128a9954e6c874eA3d62ce62B468bA073093F25',\n        veBalProxy: '0x6f5a2eE11E7a772AeB5114A20d0D7c0ff61EB8A0',\n        weightedPoolFactory: '0x8E9aa87E45e92bad84D5F8DD1bff34Fb92637dE9',\n        composableStablePoolFactory:\n          '0x85a80afee867adf27b50bdb7b76da70f1e853062',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n        lbpRaisingTokens: [\n          '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n          '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n          '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n        ],\n        stETH: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n        wstETH: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n        bal: '0xba100000625a3754423978a60c9317c58a424e3d',\n        veBal: '0xC128a9954e6c874eA3d62ce62B468bA073093F25',\n        bbaUsd: '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb2',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks',\n    },\n    pools: {\n      wETHwstETH: {\n        id: '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080',\n        address: '0x32296969ef14eb0c6d29669c550d4a0449130230',\n      },\n    },\n    poolsToIgnore: [\n      '0xbd482ffb3e6e50dc1c437557c3bea2b68f3683ee', // a pool made by an external dev who was playing with a novel rate provider mechanism in production.\n    ],\n    sorConnectingTokens: [\n      {\n        symbol: 'wEth',\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      },\n      {\n        symbol: 'wstEth',\n        address: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',\n      },\n      {\n        symbol: 'DOLA',\n        address: '0x865377367054516e17014CcdED1e7d814EDC9ce4',\n      },\n    ],\n  },\n  [Network.POLYGON]: {\n    chainId: Network.POLYGON, //137\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0xa1B2b503959aedD81512C37e9dce48164ec6a94d',\n        relayerV3: '0xcf6a66E32dCa0e26AcC3426b851FD8aCbF12Dac7',\n        relayerV4: '0x28A224d9d398a1eBB7BA69BCA515898966Bb1B6b',\n        balancerHelpers: '0x239e55F427D44C3cc793f49bFB507ebe76638a2b',\n        weightedPoolFactory: '0x0e39C3D9b2ec765eFd9c5c70BB290B1fCD8536E3',\n        composableStablePoolFactory:\n          '0x85a80afee867adf27b50bdb7b76da70f1e853062',\n      },\n      tokens: {\n        bal: '0x9a71012b13ca4d3d0cdc72a177df3ef03b0e76a3',\n        wrappedNativeAsset: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-polygon-prune-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges-polygon',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/ianlapham/polygon-blocks',\n    },\n    pools: {},\n    poolsToIgnore: [\n      '0x600bd01b6526611079e12e1ff93aba7a3e34226f', // This pool has rateProviders with incorrect scaling\n    ],\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n      },\n      {\n        symbol: 'bbrz2',\n        address: '0xe22483774bd8611be2ad2f4194078dac9159f4ba',\n      }, // Joins Stables<>BRZ via https://app.balancer.fi/#/polygon/pool/0x4a0b73f0d13ff6d43e304a174697e3d5cfd310a400020000000000000000091c\n    ],\n  },\n  [Network.ARBITRUM]: {\n    chainId: Network.ARBITRUM, //42161\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x269ff446d9892c9e19082564df3f5e8741e190a1',\n        relayerV3: '0x42E49B48573c725ee32d2579060Ed06894f97002',\n        relayerV4: '0x5bf3B7c14b10f16939d63Bd679264A1Aa951B4D5',\n        balancerHelpers: '0x77d46184d22CA6a3726a2F500c776767b6A3d6Ab',\n        weightedPoolFactory: '0x8df6EfEc5547e31B0eb7d1291B511FF8a2bf987c',\n        composableStablePoolFactory:\n          '0x85a80afee867adf27b50bdb7b76da70f1e853062',\n      },\n      tokens: {\n        bal: '0x040d1edc9569d4bab2d15287dc5a4f10f56a56b8',\n        wrappedNativeAsset: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-arbitrum-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges-arbitrum',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-one-blocks',\n    },\n    pools: {},\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n      },\n    ],\n  },\n  [Network.KOVAN]: {\n    chainId: Network.KOVAN, //42\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x2cc8688C5f75E365aaEEb4ea8D6a480405A48D2A',\n        veBal: '0x16ba924752EF283C7946db8A122a6742AA35C1DC',\n        veBalProxy: '0x98D0d0a65cBeCCaa647a5a95cf27Cf2f00E1231C',\n        balancerHelpers: '0x94905e703fEAd7f0fD0eEe355D267eE909784e6d',\n        weightedPoolFactory: '0x8df6EfEc5547e31B0eb7d1291B511FF8a2bf987c',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-kovan-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges',\n    },\n    pools: {},\n  },\n  [Network.ROPSTEN]: {\n    chainId: Network.ROPSTEN, //3\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x53c43764255c17bd724f74c4ef150724ac50a3ed',\n        balancerHelpers: '',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    },\n    urls: {\n      subgraph: '',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges',\n    },\n    pools: {},\n  },\n  [Network.RINKEBY]: {\n    chainId: Network.RINKEBY, //4\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821',\n        balancerHelpers: '0x5aDDCCa35b7A0D07C74063c48700C8590E87864E',\n        weightedPoolFactory: '0x8df6EfEc5547e31B0eb7d1291B511FF8a2bf987c',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-rinkeby-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges',\n    },\n    pools: {},\n  },\n  [Network.GOERLI]: {\n    chainId: Network.GOERLI, //5\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x77dCa2C955b15e9dE4dbBCf1246B4B85b651e50e',\n        relayerV3: '0x7b9B6f094DC2Bd1c12024b0D9CC63d6993Be1888',\n        relayerV4: '0x00e695aA8000df01B8DC8401B4C34Fba5D56BBb2',\n        gaugeController: '0xBB1CE49b16d55A1f2c6e88102f32144C7334B116',\n        veBal: '0x33A99Dcc4C85C014cf12626959111D5898bbCAbF',\n        veBalProxy: '0xA1F107D1cD709514AE8A914eCB757E95f9cedB31',\n        balancerHelpers: '0x5aDDCCa35b7A0D07C74063c48700C8590E87864E',\n        weightedPoolFactory: '0x8E9aa87E45e92bad84D5F8DD1bff34Fb92637dE9',\n        composableStablePoolFactory:\n          '0x85a80afee867adf27b50bdb7b76da70f1e853062',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-goerli-v2',\n      gaugesSubgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gauges-goerli',\n      blockNumberSubgraph:\n        'https://api.thegraph.com/subgraphs/name/blocklytics/goerli-blocks',\n    },\n    pools: {},\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0xdFCeA9088c8A88A76FF74892C1457C17dfeef9C1',\n      },\n    ],\n  },\n  [Network.OPTIMISM]: {\n    chainId: Network.OPTIMISM, //10\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0x2dc0e2aa608532da689e89e237df582b783e552c',\n        relayerV3: '0x195CcCBE464EF9073d1f7A1ba1C9Bf0f56dfFFff',\n        relayerV4: '0x1a58897Ab366082028ced3740900ecBD765Af738',\n        balancerHelpers: '0x8E9aa87E45e92bad84D5F8DD1bff34Fb92637dE9',\n        weightedPoolFactory: '0x0e39C3D9b2ec765eFd9c5c70BB290B1fCD8536E3',\n        composableStablePoolFactory:\n          '0x85a80afee867adf27b50bdb7b76da70f1e853062',\n      },\n      tokens: {\n        wrappedNativeAsset: '0x4200000000000000000000000000000000000006',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/beethovenxfi/beethovenx-optimism',\n      gaugesSubgraph: '',\n    },\n    pools: {},\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0x4200000000000000000000000000000000000006',\n      },\n    ],\n  },\n  [Network.GNOSIS]: {\n    chainId: Network.GNOSIS, //100\n    addresses: {\n      contracts: {\n        vault: '0xBA12222222228d8Ba445958a75a0704d566BF2C8',\n        multicall: '0xbb6fab6b627947dae0a75808250d8b2652952cb5',\n        relayerV4: '0xeF606F58A4FD0fCcb066c6203d0994694d3eB2D3',\n        balancerHelpers: '0x8E9aa87E45e92bad84D5F8DD1bff34Fb92637dE9',\n        weightedPoolFactory: '0xf302f9F50958c5593770FDf4d4812309fF77414f',\n        composableStablePoolFactory:\n          '0x76578ecf9a141296ec657847fb45b0585bcda3a6',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-gnosis-chain-v2',\n      gaugesSubgraph: '',\n    },\n    pools: {},\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n      },\n    ],\n  },\n  [Network.OASYS]: {\n    chainId: Network.OASYS, //16116\n    addresses: {\n      contracts: {\n        vault: '0x0855eA6187dE973Bc5849d67C14f59c6fE2cF039',\n        multicall: '0xDD99819dDB53fFcc9FF77d8Cda4553b17D27b9a4', // NEED CONFIRM\n        relayerV4: '0xeF606F58A4FD0fCcb066c6203d0994694d3eB2D3', // NEED CONFIRM\n        balancerHelpers: '0x203d5706ddc75EC8eC69b5564802b037cC8B821A',\n        weightedPoolFactory: '0x4F6a9c852Bb5058C3e1d17824A860D60a203E71B',\n        composableStablePoolFactory:\n          '0xcf3821727Baa9df36CA25a91DA330dD01A0e1743',\n      },\n      tokens: {\n        wrappedNativeAsset: '0xEB7638A7c4eAEb25ECe59F4382b9f06a8056F980',\n      },\n    },\n    urls: {\n      subgraph:\n        'https://graphnode.defiverse.net/subgraphs/name/balancer-labs/defiverse',\n      gaugesSubgraph: '',\n    },\n    pools: {},\n    sorConnectingTokens: [\n      {\n        symbol: 'weth',\n        address: '0xEB7638A7c4eAEb25ECe59F4382b9f06a8056F980',\n      },\n    ],\n  },\n};\n\nexport const networkAddresses = (\n  chainId: number\n): BalancerNetworkConfig['addresses'] =>\n  BALANCER_NETWORK_CONFIG[chainId as Network].addresses;\n","export enum BalancerErrorCode {\n  SWAP_ZERO_RETURN_AMOUNT = 'SWAP_ZERO_RETURN_AMOUNT',\n  UNWRAP_ZERO_AMOUNT = 'UNWRAP_ZERO_AMOUNT',\n  WRAP_ZERO_AMOUNT = 'WRAP_ZERO_AMOUNT',\n  QUERY_BATCH_SWAP = 'QUERY_BATCH_SWAP',\n  POOL_DOESNT_EXIST = 'POOL_DOESNT_EXIST',\n  UNSUPPORTED_POOL_TYPE = 'UNSUPPORTED_POOL_TYPE',\n  UNSUPPORTED_PAIR = 'UNSUPPORTED_PAIR',\n  NO_POOL_DATA = 'NO_POOL_DATA',\n  INPUT_OUT_OF_BOUNDS = 'INPUT_OUT_OF_BOUNDS',\n  INPUT_LENGTH_MISMATCH = 'INPUT_LENGTH_MISMATCH',\n  INPUT_TOKEN_INVALID = 'INPUT_TOKEN_INVALID',\n  INPUT_ZERO_NOT_ALLOWED = 'INPUT_ZERO_NOT_ALLOWED',\n  INTERNAL_ERROR_INVALID_ABI = 'INTERNAL_ERROR_INVALID_ABI',\n  TOKEN_MISMATCH = 'TOKEN_MISMATCH',\n  MISSING_TOKENS = 'MISSING_TOKENS',\n  MISSING_AMP = 'MISSING_AMP',\n  MISSING_DECIMALS = 'MISSING_DECIMALS',\n  MISSING_PRICE_RATE = 'MISSING_PRICE_RATE',\n  MISSING_WEIGHT = 'MISSING_WEIGHT',\n  RELAY_SWAP_AMOUNTS = 'RELAY_SWAP_AMOUNTS',\n  NO_VALUE_PARAMETER = 'NO_VALUE_PARAMETER',\n  ILLEGAL_PARAMETER = 'ILLEGAL_PARAMETER',\n  TIMESTAMP_IN_THE_FUTURE = 'TIMESTAMP_IN_THE_FUTURE',\n  JOIN_DELTA_AMOUNTS = 'JOIN_DELTA_AMOUNTS',\n  EXIT_DELTA_AMOUNTS = 'EXIT_DELTA_AMOUNTS',\n}\n\nexport class BalancerError extends Error {\n  constructor(public code: BalancerErrorCode) {\n    super(BalancerError.getMessage(code));\n    this.name = 'BalancerError';\n  }\n\n  static getMessage(code: BalancerErrorCode): string {\n    switch (code) {\n      case BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT:\n        return 'queryBatchSwapWithSor returned 0 amount';\n      case BalancerErrorCode.UNWRAP_ZERO_AMOUNT:\n        return 'swapUnwrapAaveStaticExactIn unwrapped amount < 0';\n      case BalancerErrorCode.WRAP_ZERO_AMOUNT:\n        return 'swapUnwrapAaveStaticExactOut wrapped amount < 0';\n      case BalancerErrorCode.QUERY_BATCH_SWAP:\n        return 'queryBatchSwap on chain call error';\n      case BalancerErrorCode.POOL_DOESNT_EXIST:\n        return 'balancer pool does not exist';\n      case BalancerErrorCode.UNSUPPORTED_POOL_TYPE:\n        return 'unsupported pool type';\n      case BalancerErrorCode.UNSUPPORTED_PAIR:\n        return 'unsupported token pair';\n      case BalancerErrorCode.NO_POOL_DATA:\n        return 'no pool data';\n      case BalancerErrorCode.INPUT_OUT_OF_BOUNDS:\n        return 'input out of bounds';\n      case BalancerErrorCode.INPUT_LENGTH_MISMATCH:\n        return 'input length mismatch';\n      case BalancerErrorCode.INPUT_TOKEN_INVALID:\n        return 'input token invalid';\n      case BalancerErrorCode.TOKEN_MISMATCH:\n        return 'token mismatch';\n      case BalancerErrorCode.MISSING_DECIMALS:\n        return 'missing decimals';\n      case BalancerErrorCode.MISSING_TOKENS:\n        return 'missing tokens';\n      case BalancerErrorCode.MISSING_AMP:\n        return 'missing amp';\n      case BalancerErrorCode.MISSING_PRICE_RATE:\n        return 'missing price rate';\n      case BalancerErrorCode.MISSING_WEIGHT:\n        return 'missing weight';\n      case BalancerErrorCode.INPUT_ZERO_NOT_ALLOWED:\n        return 'zero input not allowed';\n      case BalancerErrorCode.RELAY_SWAP_AMOUNTS:\n        return 'Error when checking swap amounts';\n      case BalancerErrorCode.NO_VALUE_PARAMETER:\n        return 'Illegal value passed as parameter';\n      case BalancerErrorCode.TIMESTAMP_IN_THE_FUTURE:\n        return 'Timestamp cannot be in the future';\n      case BalancerErrorCode.ILLEGAL_PARAMETER:\n        return 'An illegal parameter has been passed';\n      case BalancerErrorCode.JOIN_DELTA_AMOUNTS:\n        return 'Error when checking join call deltas';\n      case BalancerErrorCode.EXIT_DELTA_AMOUNTS:\n        return 'Error when checking exit call deltas';\n      default:\n        return 'Unknown error';\n    }\n  }\n}\n","import { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport * as SOR from '@balancer-labs/sor';\nimport {\n  ExitConcern,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPool,\n} from '../types';\nimport { AssetHelpers, isSameAddress, parsePoolInfo } from '@/lib/utils';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { addSlippage, subSlippage } from '@/lib/utils/slippageHelper';\nimport { balancerVault } from '@/lib/constants/config';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { StablePoolEncoder } from '@/pool-stable';\nimport { _downscaleDownArray, _upscaleArray } from '@/lib/utils/solidityMaths';\n\nexport class StablePoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    if (!bptIn.length || parseFixed(bptIn, 18).isNegative()) {\n      throw new BalancerError(BalancerErrorCode.INPUT_OUT_OF_BOUNDS);\n    }\n    if (\n      singleTokenMaxOut &&\n      singleTokenMaxOut !== AddressZero &&\n      !pool.tokens\n        .map((t) => t.address)\n        .some((a) => isSameAddress(a, singleTokenMaxOut))\n    ) {\n      throw new BalancerError(BalancerErrorCode.TOKEN_MISMATCH);\n    }\n\n    if (!shouldUnwrapNativeAsset && singleTokenMaxOut === AddressZero)\n      throw new Error(\n        'shouldUnwrapNativeAsset and singleTokenMaxOut should not have conflicting values'\n      );\n\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedAmp,\n      parsedTotalShares,\n      parsedSwapFee,\n      upScaledBalances,\n      scalingFactors,\n    } = parsePoolInfo(pool);\n\n    // Replace WETH address with ETH - required for exiting with ETH\n    const unwrappedTokens = parsedTokens.map((token) =>\n      token === wrappedNativeAsset ? AddressZero : token\n    );\n\n    // Sort pool info based on tokens addresses\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    const [sortedTokens, sortedUpscaledBalances, sortedScalingFactors] =\n      assetHelpers.sortTokens(\n        shouldUnwrapNativeAsset ? unwrappedTokens : parsedTokens,\n        upScaledBalances,\n        scalingFactors\n      ) as [string[], string[], string[]];\n\n    let expectedAmountsOut = Array(parsedTokens.length).fill('0');\n    let minAmountsOut = Array(parsedTokens.length).fill('0');\n    let userData: string;\n\n    if (singleTokenMaxOut) {\n      // Exit pool with single token using exact bptIn\n\n      const singleTokenMaxOutIndex = parsedTokens.indexOf(singleTokenMaxOut);\n\n      // Calculate amount out given BPT in\n      const amountOut = SOR.StableMathBigInt._calcTokenOutGivenExactBptIn(\n        BigInt(parsedAmp as string),\n        sortedUpscaledBalances.map((b) => BigInt(b)),\n        singleTokenMaxOutIndex,\n        BigInt(bptIn),\n        BigInt(parsedTotalShares),\n        BigInt(parsedSwapFee)\n      ).toString();\n\n      expectedAmountsOut[singleTokenMaxOutIndex] = amountOut;\n\n      // Apply slippage tolerance\n      minAmountsOut[singleTokenMaxOutIndex] = subSlippage(\n        BigNumber.from(amountOut),\n        BigNumber.from(slippage)\n      ).toString();\n\n      userData = StablePoolEncoder.exitExactBPTInForOneTokenOut(\n        bptIn,\n        singleTokenMaxOutIndex\n      );\n    } else {\n      // Exit pool with all tokens proportinally\n\n      // Calculate amount out given BPT in\n      const amountsOut = SOR.StableMathBigInt._calcTokensOutGivenExactBptIn(\n        sortedUpscaledBalances.map((b) => BigInt(b)),\n        BigInt(bptIn),\n        BigInt(parsedTotalShares)\n      ).map((amount) => amount.toString());\n\n      // Maths return numbers scaled to 18 decimals. Must scale down to token decimals.\n      const amountsOutScaledDown = _downscaleDownArray(\n        amountsOut.map((a) => BigInt(a)),\n        sortedScalingFactors.map((a) => BigInt(a))\n      );\n\n      expectedAmountsOut = amountsOutScaledDown.map((amount) =>\n        amount.toString()\n      );\n\n      // Apply slippage tolerance\n      minAmountsOut = amountsOutScaledDown.map((amount) => {\n        const minAmount = subSlippage(\n          BigNumber.from(amount),\n          BigNumber.from(slippage)\n        );\n        return minAmount.toString();\n      });\n\n      userData = StablePoolEncoder.exitExactBPTInForTokensOut(bptIn);\n    }\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: pool.id,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: sortedTokens,\n        minAmountsOut,\n        userData,\n        toInternalBalance: false,\n      },\n    };\n\n    // Encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      expectedAmountsOut,\n      minAmountsOut,\n    };\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    if (\n      tokensOut.length != amountsOut.length ||\n      tokensOut.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n\n    // Parse pool info into EVM amounts in order to match amountsOut scalling\n    const {\n      parsedTokens,\n      parsedAmp,\n      parsedTotalShares,\n      parsedSwapFee,\n      upScaledBalances,\n      scalingFactors,\n    } = parsePoolInfo(pool);\n\n    // Sort pool info based on tokens addresses\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    const [, sortedUpScaledBalances, sortedScalingFactors] =\n      assetHelpers.sortTokens(\n        parsedTokens,\n        upScaledBalances,\n        scalingFactors\n      ) as [string[], string[], string[]];\n    const [sortedTokens, sortedAmountsOut] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    // Maths should use upscaled amounts, e.g. 1USDC => 1e18 not 1e6\n    const upScaledAmountsOut = _upscaleArray(\n      sortedAmountsOut.map((a) => BigInt(a)),\n      sortedScalingFactors.map((a) => BigInt(a))\n    );\n\n    // Calculate expected BPT in given tokens out\n    const bptIn = SOR.StableMathBigInt._calcBptInGivenExactTokensOut(\n      BigInt(parsedAmp as string),\n      sortedUpScaledBalances.map((b) => BigInt(b)),\n      upScaledAmountsOut,\n      BigInt(parsedTotalShares),\n      BigInt(parsedSwapFee)\n    ).toString();\n\n    // Apply slippage tolerance\n    const maxBPTIn = addSlippage(\n      BigNumber.from(bptIn),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = StablePoolEncoder.exitBPTInForExactTokensOut(\n      sortedAmountsOut,\n      maxBPTIn\n    );\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: pool.id,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: sortedTokens,\n        minAmountsOut: sortedAmountsOut,\n        userData,\n        toInternalBalance: false,\n      },\n    };\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      expectedBPTIn: bptIn,\n      maxBPTIn,\n    };\n  };\n}\n","import * as SOR from '@balancer-labs/sor';\n\nimport {\n  JoinConcern,\n  JoinPool,\n  JoinPoolAttributes,\n  JoinPoolParameters,\n} from '../types';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { AssetHelpers, parsePoolInfo } from '@/lib/utils';\nimport { balancerVault } from '@/lib/constants/config';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { StablePoolEncoder } from '@/pool-stable';\nimport { _upscaleArray } from '@/lib/utils/solidityMaths';\n\nexport class StablePoolJoin implements JoinConcern {\n  /**\n   * Build join pool transaction parameters with exact tokens in and minimum BPT out based on slippage tolerance\n   * @param {JoinPoolParameters}  params - parameters used to build exact tokens in for bpt out transaction\n   * @param {string}              params.joiner - Account address joining pool\n   * @param {Pool}                params.pool - Subgraph pool object of pool being joined\n   * @param {string[]}            params.tokensIn - Token addresses provided for joining pool (same length and order as amountsIn)\n   * @param {string[]}            params.amountsIn -  - Token amounts provided for joining pool in EVM amounts\n   * @param {string}              params.slippage - Maximum slippage tolerance in bps i.e. 50 = 0.5%\n   * @returns                     transaction request ready to send with signer.sendTransaction\n   */\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant stable pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedAmp,\n      parsedTotalShares,\n      parsedSwapFee,\n      scalingFactors,\n      upScaledBalances,\n    } = parsePoolInfo(pool);\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // sort inputs\n    const [sortedTokens, sortedAmountsIn] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n    // sort pool info\n    const [, sortedUpscaledBalances, sortedScalingFactors] =\n      assetHelpers.sortTokens(\n        parsedTokens,\n        upScaledBalances,\n        scalingFactors\n      ) as [string[], string[], string[]];\n\n    // Maths should use upscaled amounts, e.g. 1USDC => 1e18 not 1e6\n    const scaledAmountsIn = _upscaleArray(\n      sortedAmountsIn.map((a) => BigInt(a)),\n      sortedScalingFactors.map((a) => BigInt(a))\n    );\n\n    const expectedBPTOut = SOR.StableMathBigInt._calcBptOutGivenExactTokensIn(\n      BigInt(parsedAmp as string),\n      sortedUpscaledBalances.map((b) => BigInt(b)),\n      scaledAmountsIn,\n      BigInt(parsedTotalShares),\n      BigInt(parsedSwapFee)\n    ).toString();\n\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = StablePoolEncoder.joinExactTokensInForBPTOut(\n      sortedAmountsIn,\n      minBPTOut\n    );\n\n    const to = balancerVault;\n    const functionName = 'joinPool';\n    const attributes: JoinPool = {\n      poolId: pool.id,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn: sortedAmountsIn,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n    const vaultInterface = Vault__factory.createInterface();\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n    const values = amountsIn.filter((amount, i) => tokensIn[i] === AddressZero); // filter native asset (e.g. ETH) amounts\n    const value = values[0] ? BigNumber.from(values[0]) : undefined;\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      value,\n      minBPTOut,\n      expectedBPTOut,\n    };\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { BigNumber, formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\n\nconst SCALING_FACTOR = 18;\n\nexport class StablePoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = BigNumber.from(0);\n    let sumValue = BigNumber.from(0);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(token.price.usd.toString(), SCALING_FACTOR);\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n      const value = balance.mul(price);\n      sumValue = sumValue.add(value);\n      sumBalance = sumBalance.add(balance);\n    }\n\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance.gt(0)) {\n      const avgPrice = sumValue.div(sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n        const value = balance.mul(avgPrice);\n        sumValue = sumValue.add(value);\n        sumBalance = sumBalance.add(balance);\n      }\n    }\n\n    return formatFixed(sumValue, SCALING_FACTOR * 2).toString();\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, StablePool, ZERO } from '@balancer-labs/sor';\nimport { Pool } from '@/types';\n\nexport class StablePoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const stablePool = StablePool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = stablePool.parsePoolPairData(tokenIn, tokenOut);\n    return stablePool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { ONE, SolidityMaths } from '@/lib/utils/solidityMaths';\n\nexport function calcPriceImpact(\n  bptAmount: bigint,\n  bptZeroPriceImpact: bigint,\n  isJoin: boolean\n): bigint {\n  if (isJoin) return calcPriceImpactJoin(bptAmount, bptZeroPriceImpact);\n  else return calcPriceImpactExit(bptAmount, bptZeroPriceImpact);\n}\n\nfunction calcPriceImpactJoin(\n  bptAmount: bigint,\n  bptZeroPriceImpact: bigint\n): bigint {\n  // 1 - (bptAmount/bptZeroPI)\n  const pi = ONE - SolidityMaths.divDownFixed(bptAmount, bptZeroPriceImpact);\n  return pi < 0 ? BigInt(0) : pi;\n}\nfunction calcPriceImpactExit(\n  bptAmount: bigint,\n  bptZeroPriceImpact: bigint\n): bigint {\n  // (bptAmount/bptZeroPI) - 1\n  const pi = SolidityMaths.divDownFixed(bptAmount, bptZeroPriceImpact) - ONE;\n  return pi < 0 ? BigInt(0) : pi;\n}\n","import { BZERO, SolidityMaths } from './solidityMaths';\n\nconst AMP_PRECISION = BigInt(1e3);\n\nexport function bptSpotPrice(\n  amp: bigint,\n  balances: bigint[],\n  bptSupply: bigint,\n  tokenIndexIn: number\n): bigint {\n  const totalCoins = balances.length;\n  const D = _calculateInvariant(amp, balances, true);\n  let S = BZERO;\n  let D_P = D / BigInt(totalCoins);\n  for (let i = 0; i < totalCoins; i++) {\n    if (i != tokenIndexIn) {\n      S = S + balances[i];\n      D_P = (D_P * D) / (BigInt(totalCoins) * balances[i]);\n    }\n  }\n  const x = balances[tokenIndexIn];\n  const alpha = amp * BigInt(totalCoins);\n  const beta = alpha * S; // units: 10 ** 21\n  const gamma = BigInt(AMP_PRECISION) - alpha;\n  const partial_x = BigInt(2) * alpha * x + beta + gamma * D;\n  const minus_partial_D =\n    D_P * BigInt(totalCoins + 1) * AMP_PRECISION - gamma * x;\n  const ans = SolidityMaths.divUpFixed(\n    (partial_x * bptSupply) / minus_partial_D,\n    D\n  );\n  return ans;\n}\n\nfunction _calculateInvariant(\n  amp: bigint,\n  balances: bigint[],\n  roundUp: boolean\n): bigint {\n  /**********************************************************************************************\n      // invariant                                                                                 //\n      // D = invariant                                                  D^(n+1)                    //\n      // A = amplification coefficient      A  n^n S + D = A D n^n + -----------                   //\n      // S = sum of balances                                             n^n P                     //\n      // P = product of balances                                                                   //\n      // n = number of tokens                                                                      //\n      *********x************************************************************************************/\n\n  // We support rounding up or down.\n\n  let sum = BZERO;\n  const numTokens = balances.length;\n  for (let i = 0; i < numTokens; i++) {\n    sum = sum + balances[i];\n  }\n  if (sum == BZERO) {\n    return BZERO;\n  }\n\n  let prevInvariant = BZERO;\n  let invariant = sum;\n  const ampTimesTotal = amp * BigInt(numTokens);\n\n  for (let i = 0; i < 255; i++) {\n    let P_D = balances[0] * BigInt(numTokens);\n    for (let j = 1; j < numTokens; j++) {\n      P_D = SolidityMaths.div(\n        SolidityMaths.mul(\n          SolidityMaths.mul(P_D, balances[j]),\n          BigInt(numTokens)\n        ),\n        invariant,\n        roundUp\n      );\n    }\n    prevInvariant = invariant;\n    invariant = SolidityMaths.div(\n      SolidityMaths.mul(\n        SolidityMaths.mul(BigInt(numTokens), invariant),\n        invariant\n      ) +\n        SolidityMaths.div(\n          SolidityMaths.mul(SolidityMaths.mul(ampTimesTotal, sum), P_D),\n          AMP_PRECISION,\n          roundUp\n        ),\n      SolidityMaths.mul(BigInt(numTokens + 1), invariant) +\n        // No need to use checked arithmetic for the amp precision, the amp is guaranteed to be at least 1\n        SolidityMaths.div(\n          SolidityMaths.mul(ampTimesTotal - AMP_PRECISION, P_D),\n          AMP_PRECISION,\n          !roundUp\n        ),\n      roundUp\n    );\n\n    if (invariant > prevInvariant) {\n      if (invariant - prevInvariant <= 1) {\n        return invariant;\n      }\n    } else if (prevInvariant - invariant <= 1) {\n      return invariant;\n    }\n  }\n\n  throw new Error('Errors.STABLE_INVARIANT_DIDNT_CONVERGE');\n}\n","import { PriceImpactConcern } from '@/modules/pools/pool-types/concerns/types';\nimport {\n  ONE,\n  BZERO,\n  _computeScalingFactor,\n  _upscale,\n} from '@/lib/utils/solidityMaths';\nimport { calcPriceImpact } from '@/modules/pricing/priceImpact';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Pool } from '@/types';\nimport { bptSpotPrice } from '@/lib/utils/stableMathHelpers';\nimport { parsePoolInfo } from '@/lib/utils';\n\nexport class StablePoolPriceImpact implements PriceImpactConcern {\n  /**\n   * Calculates the BPT return amount when investing with no price impact.\n   * @param { Pool } pool Investment pool.\n   * @param { bigint [] } amounts Token amounts being invested. Needs a value for each pool token.\n   * @returns { bigint } BPT amount.\n   */\n  bptZeroPriceImpact(pool: Pool, tokenAmounts: bigint[]): bigint {\n    if (tokenAmounts.length !== pool.tokensList.length)\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n\n    // upscales amp, swapfee, totalshares\n    const { parsedBalances, parsedDecimals, parsedAmp, parsedTotalShares } =\n      parsePoolInfo(pool);\n\n    const decimals = parsedDecimals.map((decimals) => {\n      if (!decimals)\n        throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n      return BigInt(decimals);\n    });\n    if (!parsedAmp)\n      throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n    const totalShares = BigInt(parsedTotalShares);\n\n    const scalingFactors = decimals.map((decimals) =>\n      _computeScalingFactor(BigInt(decimals))\n    );\n    const balances = parsedBalances.map((balance, i) =>\n      _upscale(BigInt(balance), scalingFactors[i])\n    );\n\n    let bptZeroPriceImpact = BZERO;\n    for (let i = 0; i < balances.length; i++) {\n      const price = bptSpotPrice(\n        BigInt(parsedAmp), // this already includes the extra digits from precision\n        balances,\n        totalShares,\n        i\n      );\n      const scalingFactor = _computeScalingFactor(BigInt(decimals[i]));\n      const amountUpscaled = _upscale(tokenAmounts[i], scalingFactor);\n      const newTerm = (price * amountUpscaled) / ONE;\n      bptZeroPriceImpact += newTerm;\n    }\n    return bptZeroPriceImpact;\n  }\n\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: string[],\n    bptAmount: string,\n    isJoin: boolean\n  ): string {\n    const bptZeroPriceImpact = this.bptZeroPriceImpact(\n      pool,\n      tokenAmounts.map((a) => BigInt(a))\n    );\n    return calcPriceImpact(\n      BigInt(bptAmount),\n      bptZeroPriceImpact,\n      isJoin\n    ).toString();\n  }\n}\n","import { StablePoolExit } from './concerns/stable/exit.concern';\nimport { StablePoolJoin } from './concerns/stable/join.concern';\nimport { StablePoolLiquidity } from './concerns/stable/liquidity.concern';\nimport { StablePoolSpotPrice } from './concerns/stable/spotPrice.concern';\nimport { StablePoolPriceImpact } from './concerns/stable/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class Stable implements PoolType {\n  constructor(\n    public exit: ExitConcern = new StablePoolExit(),\n    public join: JoinConcern = new StablePoolJoin(),\n    public liquidity: LiquidityConcern = new StablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new StablePoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new StablePoolPriceImpact()\n  ) {}\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, PhantomStablePool, ZERO } from '@balancer-labs/sor';\nimport { Pool } from '@/types';\n\nexport class PhantomStablePoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const metaStablePool = PhantomStablePool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = metaStablePool.parsePoolPairData(tokenIn, tokenOut);\n    return metaStablePool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { cloneDeep } from 'lodash';\nimport { PriceImpactConcern } from '@/modules/pools/pool-types/concerns/types';\nimport { calcPriceImpact } from '@/modules/pricing/priceImpact';\nimport {\n  ONE,\n  BZERO,\n  _computeScalingFactor,\n  _upscale,\n  SolidityMaths,\n} from '@/lib/utils/solidityMaths';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { bptSpotPrice } from '@/lib/utils/stableMathHelpers';\nimport { Pool } from '@/types';\nimport { parsePoolInfo } from '@/lib/utils';\n\nexport class StablePhantomPriceImpact implements PriceImpactConcern {\n  /**\n   * Calculates the BPT return amount when investing with no price impact.\n   * @param { Pool } pool Investment pool.\n   * @param { bigint [] } amounts Token amounts being invested. Needs a value for each pool token that is not a PhantomBpt.\n   * @returns { bigint } BPT amount.\n   */\n  bptZeroPriceImpact(pool: Pool, tokenAmounts: bigint[]): bigint {\n    if (tokenAmounts.length !== pool.tokensList.length - 1)\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n\n    const tokensList = cloneDeep(pool.tokensList);\n    const bptIndex = tokensList.findIndex((token) => token == pool.address);\n\n    // upscales amp, swapfee, totalshares\n    const {\n      parsedBalances,\n      parsedDecimals,\n      parsedPriceRates,\n      parsedAmp,\n      parsedTotalShares,\n    } = parsePoolInfo(pool);\n    const decimals = parsedDecimals.map((decimals) => {\n      if (!decimals)\n        throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n      return BigInt(decimals);\n    });\n    const priceRates = parsedPriceRates.map((rate) => {\n      if (!rate) throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n      return BigInt(rate);\n    });\n    if (!parsedAmp)\n      throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n    const totalShares = BigInt(parsedTotalShares);\n    tokensList.splice(bptIndex, 1);\n\n    const scalingFactors = decimals.map((decimals) =>\n      _computeScalingFactor(BigInt(decimals))\n    );\n    const balances = parsedBalances.map((balance, i) =>\n      _upscale(BigInt(balance), scalingFactors[i])\n    );\n    if (tokenAmounts.length !== tokensList.length)\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    balances.splice(bptIndex, 1);\n    const balancesScaled = balances.map((balance, i) =>\n      SolidityMaths.mulDownFixed(balance, priceRates[i])\n    );\n    let bptZeroPriceImpact = BZERO;\n    for (let i = 0; i < tokensList.length; i++) {\n      const price =\n        (bptSpotPrice(\n          BigInt(parsedAmp), // this already includes the extra digits from precision\n          balancesScaled,\n          totalShares,\n          i\n        ) *\n          priceRates[i]) /\n        ONE;\n      const scalingFactor = _computeScalingFactor(BigInt(decimals[i]));\n      const amountUpscaled = _upscale(tokenAmounts[i], scalingFactor);\n      const newTerm = (price * amountUpscaled) / ONE;\n      bptZeroPriceImpact += newTerm;\n    }\n    return bptZeroPriceImpact;\n  }\n\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: string[],\n    bptAmount: string,\n    isJoin: boolean\n  ): string {\n    const bptZeroPriceImpact = this.bptZeroPriceImpact(\n      pool,\n      tokenAmounts.map((a) => BigInt(a))\n    );\n    return calcPriceImpact(\n      BigInt(bptAmount),\n      bptZeroPriceImpact,\n      isJoin\n    ).toString();\n  }\n}\n","import {\n  JoinPoolParameters,\n  JoinConcern,\n  JoinPoolAttributes,\n  JoinPool,\n} from '../types';\nimport { StableMathBigInt } from '@balancer-labs/sor';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { AssetHelpers, parsePoolInfo, insert } from '@/lib/utils';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { ComposableStablePoolEncoder } from '@/pool-composable-stable';\nimport { balancerVault } from '@/lib/constants/config';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { AddressZero } from '@ethersproject/constants';\nimport { _upscaleArray } from '@/lib/utils/solidityMaths';\n\nexport class ComposableStablePoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != pool.tokensList.length - 1\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n\n    // amountsIn must be sorted in correct order. Currently ordered with relation to tokensIn so need sorted relative to those\n    const [, sortedAmountsIn] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n\n    // This will order everything correctly based on pool tokens\n    const {\n      parsedTokens,\n      parsedAmp,\n      parsedSwapFee,\n      parsedTotalShares,\n      scalingFactorsWithoutBpt,\n      parsedBalancesWithoutBpt,\n      bptIndex,\n    } = parsePoolInfo(pool, wrappedNativeAsset);\n    if (!parsedAmp) {\n      throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n    }\n\n    const scaledAmountsIn = _upscaleArray(\n      sortedAmountsIn.map(BigInt),\n      scalingFactorsWithoutBpt.map(BigInt)\n    );\n    //NEED TO SEND SORTED BALANCES AND AMOUNTS WITHOUT BPT VALUES\n    const expectedBPTOut = StableMathBigInt._calcBptOutGivenExactTokensIn(\n      BigInt(parsedAmp),\n      parsedBalancesWithoutBpt.map(BigInt), // Should not have BPT\n      scaledAmountsIn, // Should not have BPT\n      BigInt(parsedTotalShares),\n      BigInt(parsedSwapFee)\n    ).toString();\n\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    //NEEDS TO ENCODE USER DATA WITHOUT BPT AMOUNT\n    const userData = ComposableStablePoolEncoder.joinExactTokensInForBPTOut(\n      sortedAmountsIn,\n      minBPTOut\n    );\n\n    const functionName = 'joinPool';\n    //assets AND maxAmountsIn NEEDS THE BPT VALUE IN THE ARRAY\n    const attributes: JoinPool = {\n      poolId: pool.id,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: parsedTokens, // With BPT\n        maxAmountsIn: insert(sortedAmountsIn, bptIndex, '0'), // Need to add value for BPT\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n\n    const vaultInterface = Vault__factory.createInterface();\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n\n    const values = amountsIn.filter((amount, i) => tokensIn[i] === AddressZero); // filter native asset (e.g. ETH) amounts\n    const value = values[0] ? BigNumber.from(values[0]) : undefined;\n\n    return {\n      to: balancerVault,\n      functionName,\n      attributes,\n      data,\n      value,\n      minBPTOut,\n      expectedBPTOut,\n    };\n  };\n}\n","import {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n} from '../types';\n\nexport class ComposableStablePoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      bptIn,\n      slippage,\n      shouldUnwrapNativeAsset,\n      wrappedNativeAsset,\n      singleTokenMaxOut\n    );\n\n    throw new Error('To be implemented');\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      tokensOut,\n      amountsOut,\n      slippage,\n      wrappedNativeAsset\n    );\n\n    throw new Error('To be implemented');\n  };\n}\n","import { StablePoolLiquidity } from './concerns/stable/liquidity.concern';\nimport { PhantomStablePoolSpotPrice } from './concerns/stablePhantom/spotPrice.concern';\nimport { StablePhantomPriceImpact } from './concerns/stablePhantom/priceImpact.concern';\nimport { ComposableStablePoolJoin } from './concerns/composableStable/join.concern';\nimport { ComposableStablePoolExit } from './concerns/composableStable/exit.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class ComposableStable implements PoolType {\n  constructor(\n    public exit: ExitConcern = new ComposableStablePoolExit(),\n    public liquidity: LiquidityConcern = new StablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new PhantomStablePoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new StablePhantomPriceImpact(),\n    public join: JoinConcern = new ComposableStablePoolJoin()\n  ) {}\n}\n","import { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport * as SOR from '@balancer-labs/sor';\nimport {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPool,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n} from '../types';\nimport { AssetHelpers, isSameAddress, parsePoolInfo } from '@/lib/utils';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { addSlippage, subSlippage } from '@/lib/utils/slippageHelper';\nimport { balancerVault } from '@/lib/constants/config';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { AddressZero } from '@ethersproject/constants';\n\nexport class WeightedPoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    if (!bptIn.length || parseFixed(bptIn, 18).isNegative()) {\n      throw new BalancerError(BalancerErrorCode.INPUT_OUT_OF_BOUNDS);\n    }\n    if (\n      singleTokenMaxOut &&\n      singleTokenMaxOut !== AddressZero &&\n      !pool.tokens\n        .map((t) => t.address)\n        .some((a) => isSameAddress(a, singleTokenMaxOut))\n    ) {\n      throw new BalancerError(BalancerErrorCode.TOKEN_MISMATCH);\n    }\n    if (!shouldUnwrapNativeAsset && singleTokenMaxOut === AddressZero)\n      throw new Error(\n        'shouldUnwrapNativeAsset and singleTokenMaxOut should not have conflicting values'\n      );\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedWeights,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    // Replace WETH address with ETH - required for exiting with ETH\n    const unwrappedTokens = parsedTokens.map((token) =>\n      token === wrappedNativeAsset ? AddressZero : token\n    );\n\n    // Sort pool info based on tokens addresses\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    const [sortedTokens, sortedBalances, sortedWeights] =\n      assetHelpers.sortTokens(\n        shouldUnwrapNativeAsset ? unwrappedTokens : parsedTokens,\n        parsedBalances,\n        parsedWeights\n      ) as [string[], string[], string[]];\n\n    let expectedAmountsOut = Array(sortedTokens.length).fill('0');\n    let minAmountsOut = Array(sortedTokens.length).fill('0');\n    let userData: string;\n\n    if (singleTokenMaxOut) {\n      // Exit pool with single token using exact bptIn\n\n      const singleTokenMaxOutIndex = sortedTokens.indexOf(singleTokenMaxOut);\n\n      // Calculate amount out given BPT in\n      const amountOut = SOR.WeightedMaths._calcTokenOutGivenExactBptIn(\n        BigInt(sortedBalances[singleTokenMaxOutIndex]),\n        BigInt(sortedWeights[singleTokenMaxOutIndex]),\n        BigInt(bptIn),\n        BigInt(parsedTotalShares),\n        BigInt(parsedSwapFee)\n      ).toString();\n\n      expectedAmountsOut[singleTokenMaxOutIndex] = amountOut;\n\n      // Apply slippage tolerance\n      minAmountsOut[singleTokenMaxOutIndex] = subSlippage(\n        BigNumber.from(amountOut),\n        BigNumber.from(slippage)\n      ).toString();\n\n      userData = WeightedPoolEncoder.exitExactBPTInForOneTokenOut(\n        bptIn,\n        singleTokenMaxOutIndex\n      );\n    } else {\n      // Exit pool with all tokens proportinally\n\n      // Calculate amounts out given BPT in\n      expectedAmountsOut = SOR.WeightedMaths._calcTokensOutGivenExactBptIn(\n        sortedBalances.map((b) => BigInt(b)),\n        BigInt(bptIn),\n        BigInt(parsedTotalShares)\n      ).map((amount) => amount.toString());\n\n      // Apply slippage tolerance\n      minAmountsOut = expectedAmountsOut.map((amount) => {\n        const minAmount = subSlippage(\n          BigNumber.from(amount),\n          BigNumber.from(slippage)\n        );\n        return minAmount.toString();\n      });\n\n      userData = WeightedPoolEncoder.exitExactBPTInForTokensOut(bptIn);\n    }\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: pool.id,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: sortedTokens,\n        minAmountsOut,\n        userData,\n        toInternalBalance: false,\n      },\n    };\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      expectedAmountsOut,\n      minAmountsOut,\n    };\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    if (\n      tokensOut.length != amountsOut.length ||\n      tokensOut.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedWeights,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    // Sort pool info and inputs based on tokens addresses\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    const [, sortedBalances, sortedWeights] = assetHelpers.sortTokens(\n      parsedTokens,\n      parsedBalances,\n      parsedWeights\n    ) as [string[], string[], string[]];\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    // Calculate expected BPT in given tokens out\n    const bptIn = SOR.WeightedMaths._calcBptInGivenExactTokensOut(\n      sortedBalances.map((b) => BigInt(b)),\n      sortedWeights.map((w) => BigInt(w)),\n      sortedAmounts.map((a) => BigInt(a)),\n      BigInt(parsedTotalShares),\n      BigInt(parsedSwapFee)\n    ).toString();\n\n    // Apply slippage tolerance\n    const maxBPTIn = addSlippage(\n      BigNumber.from(bptIn),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = WeightedPoolEncoder.exitBPTInForExactTokensOut(\n      sortedAmounts,\n      maxBPTIn\n    );\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: pool.id,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: sortedTokens,\n        minAmountsOut: sortedAmounts,\n        userData,\n        toInternalBalance: false,\n      },\n    };\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      expectedBPTIn: bptIn,\n      maxBPTIn,\n    };\n  };\n}\n","import { WeightedMaths } from '@balancer-labs/sor';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport {\n  JoinConcern,\n  JoinPool,\n  JoinPoolAttributes,\n  JoinPoolParameters,\n} from '../types';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { AssetHelpers, parsePoolInfo } from '@/lib/utils';\nimport { balancerVault } from '@/lib/constants/config';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n\nexport class WeightedPoolJoin implements JoinConcern {\n  /**\n   * Build join pool transaction parameters with exact tokens in and minimum BPT out based on slippage tolerance\n   * @param {JoinPoolParameters} params - parameters used to build exact tokens in for bpt out transaction\n   * @param {string}                          params.joiner - Account address joining pool\n   * @param {SubgraphPoolBase}                params.pool - Subgraph pool object of pool being joined\n   * @param {string[]}                        params.tokensIn - Token addresses provided for joining pool (same length and order as amountsIn)\n   * @param {string[]}                        params.amountsIn -  - Token amounts provided for joining pool in EVM amounts\n   * @param {string}                          params.slippage - Maximum slippage tolerance in bps i.e. 50 = 0.5%\n   * @param {string}                          params.wrappedNativeAsset - Address of wrapped native asset for specific network config. Required for joining with ETH.\n   * @returns                                 transaction request ready to send with signer.sendTransaction\n   */\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant weighted pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (pool.tokens.some((token) => !token.weight))\n      throw new BalancerError(BalancerErrorCode.MISSING_WEIGHT);\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedWeights,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // sort inputs\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n    // sort pool info\n    const [, sortedBalances, sortedWeights] = assetHelpers.sortTokens(\n      parsedTokens,\n      parsedBalances,\n      parsedWeights\n    ) as [string[], string[], string[]];\n\n    const expectedBPTOut = WeightedMaths._calcBptOutGivenExactTokensIn(\n      sortedBalances.map((b) => BigInt(b)),\n      sortedWeights.map((w) => BigInt(w)),\n      sortedAmounts.map((a) => BigInt(a)),\n      BigInt(parsedTotalShares),\n      BigInt(parsedSwapFee)\n    ).toString();\n\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = WeightedPoolEncoder.joinExactTokensInForBPTOut(\n      sortedAmounts,\n      minBPTOut\n    );\n\n    const to = balancerVault;\n    const functionName = 'joinPool';\n    const attributes: JoinPool = {\n      poolId: pool.id,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn: sortedAmounts,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n    const vaultInterface = Vault__factory.createInterface();\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n    const values = amountsIn.filter((amount, i) => tokensIn[i] === AddressZero); // filter native asset (e.g. ETH) amounts\n    const value = values[0] ? BigNumber.from(values[0]) : undefined;\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      value,\n      minBPTOut,\n      expectedBPTOut,\n    };\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { parseFixed, formatFixed } from '@/lib/utils/math';\n\nconst SCALING_FACTOR = 18;\n\nexport class WeightedPoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumWeight = BigNumber.from(0);\n    let sumValue = BigNumber.from(0);\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      let price: BigNumber;\n      if (parseFloat(token.price.usd) < 1) {\n        price = parseFixed(parseFloat(token.price.usd).toFixed(10), 10).mul(\n          1e8\n        );\n      } else {\n        price = parseFixed(token.price.usd, SCALING_FACTOR);\n      }\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n      const weight = parseFixed(token.weight || '0', SCALING_FACTOR);\n\n      const value = balance.mul(price);\n      sumValue = sumValue.add(value);\n      sumWeight = sumWeight.add(weight);\n    }\n\n    // Scale the known prices of x% of the pool to get value of 100% of the pool.\n    const totalWeight = tokens.reduce(\n      (total: BigNumber, token) =>\n        total.add(parseFixed(token.weight || '0', SCALING_FACTOR)),\n      BigNumber.from(0)\n    );\n    if (sumWeight.gt(0)) {\n      const liquidity = sumValue.mul(totalWeight).div(sumWeight);\n      return formatFixed(liquidity, SCALING_FACTOR * 2);\n    }\n\n    return '0';\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport {\n  SubgraphPoolBase,\n  WeightedPool,\n  ZERO,\n  SubgraphToken,\n} from '@balancer-labs/sor';\nimport { Pool } from '@/types';\n\nexport class WeightedPoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const isBPTAsToken = tokenIn === pool.address || tokenOut === pool.address;\n    if (isBPTAsToken) {\n      const bptAsToken: SubgraphToken = {\n        address: pool.address,\n        balance: pool.totalShares,\n        decimals: 18,\n        priceRate: '1',\n        weight: '0',\n      };\n      pool.tokens.push(bptAsToken);\n      pool.tokensList.push(pool.address);\n    }\n    const weightedPool = WeightedPool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = weightedPool.parsePoolPairData(tokenIn, tokenOut);\n    const spotPrice = weightedPool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n    if (isBPTAsToken) {\n      pool.tokens.pop();\n      pool.tokensList.pop();\n    }\n    return spotPrice;\n  }\n}\n","import { cloneDeep } from 'lodash';\nimport { PriceImpactConcern } from '@/modules/pools/pool-types/concerns/types';\nimport { calcPriceImpact } from '@/modules/pricing/priceImpact';\nimport {\n  ONE,\n  BZERO,\n  _computeScalingFactor,\n  _upscale,\n} from '@/lib/utils/solidityMaths';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Pool } from '@/types';\nimport { parsePoolInfo } from '@/lib/utils';\n\nexport class WeightedPoolPriceImpact implements PriceImpactConcern {\n  /**\n   * Calculates the BPT return amount when investing with no price impact.\n   * @param { Pool } pool Investment pool.\n   * @param { bigint [] } amounts Token amounts being invested. EVM Scale. Needs a value for each pool token.\n   * @returns { bigint } BPT amount.\n   */\n  bptZeroPriceImpact(pool: Pool, tokenAmounts: bigint[]): bigint {\n    if (tokenAmounts.length !== pool.tokensList.length)\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n\n    // swapFee, totalShares, totalWeight all scaled up to 18 decimals\n    const { parsedBalances, parsedDecimals, parsedTotalShares, parsedWeights } =\n      parsePoolInfo(pool);\n\n    const totalShares = BigInt(parsedTotalShares);\n    const tokensList = cloneDeep(pool.tokensList);\n    let bptZeroPriceImpact = BZERO;\n    for (let i = 0; i < tokensList.length; i++) {\n      const decimals = parsedDecimals[i];\n      let scalingFactor: bigint;\n      let balance: bigint;\n      if (!decimals)\n        throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n      else {\n        scalingFactor = _computeScalingFactor(BigInt(decimals));\n        balance = _upscale(BigInt(parsedBalances[i]), scalingFactor);\n      }\n      const weightString = parsedWeights[i];\n      let weight: bigint;\n      if (!weightString)\n        throw new BalancerError(BalancerErrorCode.MISSING_WEIGHT);\n      else {\n        weight = BigInt(weightString);\n      }\n      const price = (weight * totalShares) / balance;\n      const amountUpscaled = _upscale(tokenAmounts[i], scalingFactor);\n      const newTerm = (price * amountUpscaled) / ONE;\n      bptZeroPriceImpact += newTerm;\n    }\n    return bptZeroPriceImpact;\n  }\n\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: string[],\n    bptAmount: string,\n    isJoin: boolean\n  ): string {\n    const bptZeroPriceImpact = this.bptZeroPriceImpact(\n      pool,\n      tokenAmounts.map((a) => BigInt(a))\n    );\n    return calcPriceImpact(\n      BigInt(bptAmount),\n      bptZeroPriceImpact,\n      isJoin\n    ).toString();\n  }\n}\n","import { WeightedPoolExit } from './concerns/weighted/exit.concern';\nimport { WeightedPoolJoin } from './concerns/weighted/join.concern';\nimport { WeightedPoolLiquidity } from './concerns/weighted/liquidity.concern';\nimport { WeightedPoolSpotPrice } from './concerns/weighted/spotPrice.concern';\nimport { WeightedPoolPriceImpact } from './concerns/weighted/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class Weighted implements PoolType {\n  constructor(\n    public exit: ExitConcern = new WeightedPoolExit(),\n    public join: JoinConcern = new WeightedPoolJoin(),\n    public liquidity: LiquidityConcern = new WeightedPoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new WeightedPoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new WeightedPoolPriceImpact()\n  ) {}\n}\n","import { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport * as SOR from '@balancer-labs/sor';\nimport {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitPool,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n} from '../types';\nimport { AssetHelpers, isSameAddress, parsePoolInfo } from '@/lib/utils';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { addSlippage, subSlippage } from '@/lib/utils/slippageHelper';\nimport { balancerVault } from '@/lib/constants/config';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { AddressZero } from '@ethersproject/constants';\nimport { StablePoolEncoder } from '@/pool-stable';\n\nexport class MetaStablePoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    if (!bptIn.length || parseFixed(bptIn, 18).isNegative()) {\n      throw new BalancerError(BalancerErrorCode.INPUT_OUT_OF_BOUNDS);\n    }\n    if (\n      singleTokenMaxOut &&\n      singleTokenMaxOut !== AddressZero &&\n      !pool.tokens\n        .map((t) => t.address)\n        .some((a) => isSameAddress(a, singleTokenMaxOut))\n    ) {\n      throw new BalancerError(BalancerErrorCode.TOKEN_MISMATCH);\n    }\n\n    if (!shouldUnwrapNativeAsset && singleTokenMaxOut === AddressZero)\n      throw new Error(\n        'shouldUnwrapNativeAsset and singleTokenMaxOut should not have conflicting values'\n      );\n\n    // Check if there's any relevant meta stable pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n    if (pool.tokens.some((token) => !token.priceRate))\n      throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedAmp,\n      parsedPriceRates,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    // Replace WETH address with ETH - required for exiting with ETH\n    const unwrappedTokens = parsedTokens.map((token) =>\n      token === wrappedNativeAsset ? AddressZero : token\n    );\n\n    // Sort pool info based on tokens addresses\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    const [sortedTokens, sortedBalances, sortedPriceRates] =\n      assetHelpers.sortTokens(\n        shouldUnwrapNativeAsset ? unwrappedTokens : parsedTokens,\n        parsedBalances,\n        parsedPriceRates\n      ) as [string[], string[], string[]];\n\n    // Scale balances based on price rate for each token\n    const scaledBalances = sortedBalances.map((balance, i) => {\n      return BigNumber.from(balance)\n        .mul(BigNumber.from(sortedPriceRates[i]))\n        .div(parseFixed('1', 18))\n        .toString();\n    });\n\n    let expectedAmountsOut = Array(parsedTokens.length).fill('0');\n    let minAmountsOut = Array(parsedTokens.length).fill('0');\n    let userData: string;\n\n    if (singleTokenMaxOut) {\n      // Exit pool with single token using exact bptIn\n\n      const singleTokenMaxOutIndex = sortedTokens.indexOf(singleTokenMaxOut);\n\n      // Calculate amount out given BPT in\n      const scaledAmountOut = SOR.StableMathBigInt._calcTokenOutGivenExactBptIn(\n        BigInt(parsedAmp as string),\n        scaledBalances.map((b) => BigInt(b)),\n        singleTokenMaxOutIndex,\n        BigInt(bptIn),\n        BigInt(parsedTotalShares),\n        BigInt(parsedSwapFee)\n      ).toString();\n\n      // Reverse scaled amount out based on token price rate\n      const amountOut = BigNumber.from(scaledAmountOut)\n        .div(BigNumber.from(sortedPriceRates[singleTokenMaxOutIndex]))\n        .mul(parseFixed('1', 18))\n        .toString();\n\n      expectedAmountsOut[singleTokenMaxOutIndex] = amountOut;\n\n      minAmountsOut[singleTokenMaxOutIndex] = subSlippage(\n        BigNumber.from(amountOut),\n        BigNumber.from(slippage)\n      ).toString();\n\n      userData = StablePoolEncoder.exitExactBPTInForOneTokenOut(\n        bptIn,\n        singleTokenMaxOutIndex\n      );\n    } else {\n      // Exit pool with all tokens proportinally\n\n      // Calculate amount out given BPT in\n      const scaledAmountsOut =\n        SOR.StableMathBigInt._calcTokensOutGivenExactBptIn(\n          scaledBalances.map((b) => BigInt(b)),\n          BigInt(bptIn),\n          BigInt(parsedTotalShares)\n        ).map((amount) => amount.toString());\n\n      // Reverse scaled amounts out based on token price rate\n      expectedAmountsOut = scaledAmountsOut.map((amount, i) => {\n        return BigNumber.from(amount)\n          .mul(parseFixed('1', 18))\n          .div(BigNumber.from(sortedPriceRates[i]))\n          .toString();\n      });\n\n      // Apply slippage tolerance\n      minAmountsOut = expectedAmountsOut.map((amount) => {\n        const minAmount = subSlippage(\n          BigNumber.from(amount),\n          BigNumber.from(slippage)\n        );\n        return minAmount.toString();\n      });\n\n      userData = StablePoolEncoder.exitExactBPTInForTokensOut(bptIn);\n    }\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: pool.id,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: sortedTokens,\n        minAmountsOut,\n        userData,\n        toInternalBalance: false,\n      },\n    };\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      expectedAmountsOut,\n      minAmountsOut,\n    };\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    if (\n      tokensOut.length != amountsOut.length ||\n      tokensOut.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant meta stable pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n    if (pool.tokens.some((token) => !token.priceRate))\n      throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n\n    // Parse pool info into EVM amounts in order to match amountsOut scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedPriceRates,\n      parsedAmp,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    // Sort pool info based on tokens addresses\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    const [, sortedBalances, sortedPriceRates] = assetHelpers.sortTokens(\n      parsedTokens,\n      parsedBalances,\n      parsedPriceRates\n    ) as [string[], string[], string[]];\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    // Scale amounts out based on price rate for each token\n    const scaledAmounts = sortedAmounts.map((amount, i) => {\n      return BigNumber.from(amount)\n        .mul(BigNumber.from(sortedPriceRates[i]))\n        .div(parseFixed('1', 18))\n        .toString();\n    });\n\n    // Scale balances based on price rate for each token\n    const scaledBalances = sortedBalances.map((balance, i) => {\n      return BigNumber.from(balance)\n        .mul(BigNumber.from(sortedPriceRates[i]))\n        .div(parseFixed('1', 18))\n        .toString();\n    });\n\n    // Calculate expected BPT in given tokens out\n    const bptIn = SOR.StableMathBigInt._calcBptInGivenExactTokensOut(\n      BigInt(parsedAmp as string),\n      scaledBalances.map((b) => BigInt(b)),\n      scaledAmounts.map((a) => BigInt(a)),\n      BigInt(parsedTotalShares),\n      BigInt(parsedSwapFee)\n    ).toString();\n\n    // Apply slippage tolerance\n    const maxBPTIn = addSlippage(\n      BigNumber.from(bptIn),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = StablePoolEncoder.exitBPTInForExactTokensOut(\n      sortedAmounts, // must not use scaledAmounts because it should match amountsOut provided by the user\n      maxBPTIn\n    );\n\n    // This is a hack to get around rounding issues for scaled amounts on MetaStable pools\n    // TODO: do this more elegantly\n    const minAmountsOut = sortedAmounts.map((a, i) =>\n      a === scaledAmounts[i] ? a : BigNumber.from(a).sub(1).toString()\n    );\n\n    const to = balancerVault;\n    const functionName = 'exitPool';\n    const attributes: ExitPool = {\n      poolId: pool.id,\n      sender: exiter,\n      recipient: exiter,\n      exitPoolRequest: {\n        assets: sortedTokens,\n        minAmountsOut,\n        userData,\n        toInternalBalance: false,\n      },\n    };\n\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.exitPoolRequest,\n    ]);\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      expectedBPTIn: bptIn,\n      maxBPTIn,\n    };\n  };\n}\n","import * as SOR from '@balancer-labs/sor';\n\nimport {\n  JoinConcern,\n  JoinPool,\n  JoinPoolAttributes,\n  JoinPoolParameters,\n} from '../types';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { AssetHelpers, parsePoolInfo } from '@/lib/utils';\nimport { balancerVault } from '@/lib/constants/config';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { StablePoolEncoder } from '@/pool-stable';\n\nexport class MetaStablePoolJoin implements JoinConcern {\n  /**\n   * Build join pool transaction parameters with exact tokens in and minimum BPT out based on slippage tolerance\n   * @param {JoinPoolParameters}  params - parameters used to build exact tokens in for bpt out transaction\n   * @param {string}              params.joiner - Account address joining pool\n   * @param {Pool}                params.pool - Subgraph pool object of pool being joined\n   * @param {string[]}            params.tokensIn - Token addresses provided for joining pool (same length and order as amountsIn)\n   * @param {string[]}            params.amountsIn -  - Token amounts provided for joining pool in EVM amounts\n   * @param {string}              params.slippage - Maximum slippage tolerance in bps i.e. 50 = 0.5%\n   * @returns                     transaction request ready to send with signer.sendTransaction\n   */\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    if (\n      tokensIn.length != amountsIn.length ||\n      tokensIn.length != pool.tokensList.length\n    ) {\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n    }\n\n    // Check if there's any relevant meta stable pool info missing\n    if (pool.tokens.some((token) => !token.decimals))\n      throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n    if (!pool.amp) throw new BalancerError(BalancerErrorCode.MISSING_AMP);\n    if (pool.tokens.some((token) => !token.priceRate))\n      throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n\n    // Parse pool info into EVM amounts in order to match amountsIn scalling\n    const {\n      parsedTokens,\n      parsedBalances,\n      parsedPriceRates,\n      parsedAmp,\n      parsedTotalShares,\n      parsedSwapFee,\n    } = parsePoolInfo(pool);\n\n    const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n    // sort input\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n    // sort pool info\n    const [, sortedBalances, sortedPriceRates] = assetHelpers.sortTokens(\n      parsedTokens,\n      parsedBalances,\n      parsedPriceRates\n    ) as [string[], string[], string[]];\n\n    // scale amounts in based on price rate for each token\n    const scaledAmounts = sortedAmounts.map((amount, i) => {\n      return BigNumber.from(amount)\n        .mul(BigNumber.from(sortedPriceRates[i]))\n        .div(parseFixed('1', 18))\n        .toString();\n    });\n\n    // scale balances based on price rate for each token\n    const scaledBalances = sortedBalances.map((balance, i) => {\n      return BigNumber.from(balance)\n        .mul(BigNumber.from(sortedPriceRates[i]))\n        .div(parseFixed('1', 18))\n        .toString();\n    });\n\n    const expectedBPTOut = SOR.StableMathBigInt._calcBptOutGivenExactTokensIn(\n      BigInt(parsedAmp as string),\n      scaledBalances.map((b) => BigInt(b)),\n      scaledAmounts.map((a) => BigInt(a)),\n      BigInt(parsedTotalShares),\n      BigInt(parsedSwapFee)\n    ).toString();\n\n    const minBPTOut = subSlippage(\n      BigNumber.from(expectedBPTOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    const userData = StablePoolEncoder.joinExactTokensInForBPTOut(\n      sortedAmounts,\n      minBPTOut\n    );\n\n    const to = balancerVault;\n    const functionName = 'joinPool';\n    const attributes: JoinPool = {\n      poolId: pool.id,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn: sortedAmounts,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n    const vaultInterface = Vault__factory.createInterface();\n    // encode transaction data into an ABI byte string which can be sent to the network to be executed\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n    const values = amountsIn.filter((amount, i) => tokensIn[i] === AddressZero); // filter native asset (e.g. ETH) amounts\n    const value = values[0] ? BigNumber.from(values[0]) : undefined;\n\n    return {\n      to,\n      functionName,\n      attributes,\n      data,\n      value,\n      minBPTOut,\n      expectedBPTOut,\n    };\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { formatFixed } from '@ethersproject/bignumber';\nimport { parseFixed } from '@/lib/utils/math';\nimport { Zero } from '@ethersproject/constants';\n\nconst SCALING_FACTOR = 18;\n\nexport class MetaStablePoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = Zero;\n    let sumValue = Zero;\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(token.price.usd.toString(), SCALING_FACTOR);\n\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n      const value = balance.mul(price);\n      sumValue = sumValue.add(value);\n      sumBalance = sumBalance.add(balance);\n    }\n\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance.gt(0)) {\n      const avgPrice = sumValue.div(sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const balance = parseFixed(token.balance, SCALING_FACTOR);\n\n        const value = balance.mul(avgPrice);\n        sumValue = sumValue.add(value);\n        sumBalance = sumBalance.add(balance);\n      }\n    }\n\n    return formatFixed(sumValue, SCALING_FACTOR * 2).toString();\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, MetaStablePool, ZERO } from '@balancer-labs/sor';\nimport { Pool } from '@/types';\n\nexport class MetaStablePoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const metaStablePool = MetaStablePool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = metaStablePool.parsePoolPairData(tokenIn, tokenOut);\n    return metaStablePool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","import { PriceImpactConcern } from '@/modules/pools/pool-types/concerns/types';\nimport { calcPriceImpact } from '@/modules/pricing/priceImpact';\nimport {\n  ONE,\n  BZERO,\n  SolidityMaths,\n  _upscale,\n  _computeScalingFactor,\n} from '@/lib/utils/solidityMaths';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Pool } from '@/types';\nimport { parsePoolInfo } from '@/lib/utils';\nimport { bptSpotPrice } from '@/lib/utils/stableMathHelpers';\n\nexport class MetaStablePoolPriceImpact implements PriceImpactConcern {\n  /**\n   * Calculates the BPT return amount when investing with no price impact.\n   * @param { Pool } pool Investment pool.\n   * @param { string [] } amounts Token amounts being invested. Needs a value for each pool token.\n   * @returns { string } BPT amount.\n   */\n  bptZeroPriceImpact(pool: Pool, tokenAmounts: bigint[]): bigint {\n    if (tokenAmounts.length !== pool.tokensList.length)\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n\n    const {\n      parsedBalances,\n      parsedDecimals,\n      parsedPriceRates,\n      parsedAmp,\n      parsedTotalShares,\n    } = parsePoolInfo(pool);\n    const totalShares = BigInt(parsedTotalShares);\n    const decimals = parsedDecimals.map((decimals) => {\n      if (!decimals)\n        throw new BalancerError(BalancerErrorCode.MISSING_DECIMALS);\n      return BigInt(decimals);\n    });\n    const priceRates = parsedPriceRates.map((rate) => {\n      if (!rate) throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n      return BigInt(rate);\n    });\n    if (!parsedAmp)\n      throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n\n    const scalingFactors = decimals.map((decimals) =>\n      _computeScalingFactor(BigInt(decimals))\n    );\n    const balances = parsedBalances.map((balance, i) =>\n      _upscale(BigInt(balance), scalingFactors[i])\n    );\n    const balancesScaled = balances.map((balance, i) =>\n      SolidityMaths.mulDownFixed(balance, priceRates[i])\n    );\n    let bptZeroPriceImpact = BZERO;\n    for (let i = 0; i < balances.length; i++) {\n      const price =\n        (bptSpotPrice(\n          BigInt(parsedAmp as string), // this already includes the extra digits from precision\n          balancesScaled,\n          totalShares,\n          i\n        ) *\n          priceRates[i]) /\n        ONE;\n      const scalingFactor = _computeScalingFactor(\n        BigInt(pool.tokens[i].decimals as number)\n      );\n      const amountUpscaled = _upscale(tokenAmounts[i], scalingFactor);\n      const newTerm = (price * amountUpscaled) / ONE;\n      bptZeroPriceImpact += newTerm;\n    }\n    return bptZeroPriceImpact;\n  }\n\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: string[],\n    bptAmount: string,\n    isJoin: boolean\n  ): string {\n    const bptZeroPriceImpact = this.bptZeroPriceImpact(\n      pool,\n      tokenAmounts.map((a) => BigInt(a))\n    );\n    return calcPriceImpact(\n      BigInt(bptAmount),\n      bptZeroPriceImpact,\n      isJoin\n    ).toString();\n  }\n}\n","import { MetaStablePoolExit } from './concerns/metaStable/exit.concern';\nimport { MetaStablePoolJoin } from './concerns/metaStable/join.concern';\nimport { MetaStablePoolLiquidity } from './concerns/metaStable/liquidity.concern';\nimport { MetaStablePoolSpotPrice } from './concerns/metaStable/spotPrice.concern';\nimport { MetaStablePoolPriceImpact } from './concerns/metaStable/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  SpotPriceConcern,\n  PriceImpactConcern,\n} from './concerns/types';\n\nexport class MetaStable implements PoolType {\n  constructor(\n    public exit: ExitConcern = new MetaStablePoolExit(),\n    public join: JoinConcern = new MetaStablePoolJoin(),\n    public liquidity: LiquidityConcern = new MetaStablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new MetaStablePoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new MetaStablePoolPriceImpact()\n  ) {}\n}\n","import {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n} from '../types';\n\nexport class StablePhantomPoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      bptIn,\n      slippage,\n      shouldUnwrapNativeAsset,\n      wrappedNativeAsset,\n      singleTokenMaxOut\n    );\n    throw new Error('To be implemented');\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      tokensOut,\n      amountsOut,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import { JoinPoolParameters, JoinConcern, JoinPoolAttributes } from '../types';\n\nexport class StablePhantomPoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    // TODO implementation\n    console.log(\n      joiner,\n      pool,\n      tokensIn,\n      amountsIn,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import { StablePhantomPoolExit } from './concerns/stablePhantom/exit.concern';\nimport { StablePhantomPoolJoin } from './concerns/stablePhantom/join.concern';\nimport { StablePoolLiquidity } from './concerns/stable/liquidity.concern';\nimport { PhantomStablePoolSpotPrice } from './concerns/stablePhantom/spotPrice.concern';\nimport { StablePhantomPriceImpact } from './concerns/stablePhantom/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  PriceImpactConcern,\n  LiquidityConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class StablePhantom implements PoolType {\n  constructor(\n    public exit: ExitConcern = new StablePhantomPoolExit(),\n    public join: JoinConcern = new StablePhantomPoolJoin(),\n    public liquidity: LiquidityConcern = new StablePoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new PhantomStablePoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new StablePhantomPriceImpact()\n  ) {}\n}\n","import {\n  ExitConcern,\n  ExitExactBPTInParameters,\n  ExitExactTokensOutParameters,\n  ExitExactBPTInAttributes,\n  ExitExactTokensOutAttributes,\n} from '../types';\n\nexport class LinearPoolExit implements ExitConcern {\n  buildExitExactBPTIn = ({\n    exiter,\n    pool,\n    bptIn,\n    slippage,\n    shouldUnwrapNativeAsset,\n    wrappedNativeAsset,\n    singleTokenMaxOut,\n  }: ExitExactBPTInParameters): ExitExactBPTInAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      bptIn,\n      slippage,\n      shouldUnwrapNativeAsset,\n      wrappedNativeAsset,\n      singleTokenMaxOut\n    );\n    throw new Error('To be implemented');\n  };\n\n  buildExitExactTokensOut = ({\n    exiter,\n    pool,\n    tokensOut,\n    amountsOut,\n    slippage,\n    wrappedNativeAsset,\n  }: ExitExactTokensOutParameters): ExitExactTokensOutAttributes => {\n    // TODO implementation\n    console.log(\n      exiter,\n      pool,\n      tokensOut,\n      amountsOut,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import { JoinPoolParameters, JoinConcern, JoinPoolAttributes } from '../types';\n\nexport class LinearPoolJoin implements JoinConcern {\n  buildJoin = ({\n    joiner,\n    pool,\n    tokensIn,\n    amountsIn,\n    slippage,\n    wrappedNativeAsset,\n  }: JoinPoolParameters): JoinPoolAttributes => {\n    // TODO implementation\n    console.log(\n      joiner,\n      pool,\n      tokensIn,\n      amountsIn,\n      slippage,\n      wrappedNativeAsset\n    );\n    throw new Error('To be implemented');\n  };\n}\n","import { LiquidityConcern } from '../types';\nimport { PoolToken } from '@/types';\nimport { parseFixed, formatFixed } from '@/lib/utils/math';\nimport { Zero } from '@ethersproject/constants';\n\nconst SCALING_FACTOR = 18;\nconst ONE = parseFixed('1', SCALING_FACTOR);\n\nexport class LinearPoolLiquidity implements LiquidityConcern {\n  calcTotal(tokens: PoolToken[]): string {\n    let sumBalance = Zero;\n    let sumValue = Zero;\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      // if a token's price is unknown, ignore it\n      // it will be computed at the next step\n      if (!token.price?.usd) {\n        continue;\n      }\n\n      const price = parseFixed(token.price.usd.toString(), SCALING_FACTOR);\n\n      const balance = parseFixed(token.balance, SCALING_FACTOR);\n      const value = balance.mul(price);\n\n      sumValue = sumValue.add(value);\n      sumBalance = sumBalance.add(balance);\n    }\n\n    // if at least the partial value of the pool is known\n    // then compute the rest of the value of tokens with unknown prices\n    if (sumBalance.gt(0)) {\n      const avgPrice = sumValue.div(sumBalance);\n\n      for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n\n        if (token.price?.usd) {\n          continue;\n        }\n\n        const priceRate = parseFixed(token.priceRate || '1', SCALING_FACTOR);\n\n        // Apply priceRate to scale the balance correctly\n        const balance = parseFixed(token.balance, SCALING_FACTOR)\n          .mul(priceRate)\n          .div(ONE);\n\n        const value = balance.mul(avgPrice);\n        sumValue = sumValue.add(value);\n        sumBalance = sumBalance.add(balance);\n      }\n    }\n\n    return formatFixed(sumValue, SCALING_FACTOR * 2);\n  }\n}\n","import { SpotPriceConcern } from '../types';\nimport { SubgraphPoolBase, LinearPool, ZERO } from '@balancer-labs/sor';\nimport { Pool } from '@/types';\n\nexport class LinearPoolSpotPrice implements SpotPriceConcern {\n  calcPoolSpotPrice(tokenIn: string, tokenOut: string, pool: Pool): string {\n    const linearPool = LinearPool.fromPool(pool as SubgraphPoolBase);\n    const poolPairData = linearPool.parsePoolPairData(tokenIn, tokenOut);\n    return linearPool\n      ._spotPriceAfterSwapExactTokenInForTokenOut(poolPairData, ZERO)\n      .toString();\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { PriceImpactConcern } from '../types';\nimport { Pool } from '@/types';\n\nexport class LinearPriceImpact implements PriceImpactConcern {\n  bptZeroPriceImpact(pool: Pool, amounts: bigint[]): bigint {\n    throw new Error('Linear Pool bptZeroPriceImpact Not Implented');\n  }\n  calcPriceImpact(\n    pool: Pool,\n    tokenAmounts: string[],\n    bptAmount: string\n  ): string {\n    throw new Error('Linear Pool Price Impact Not Implented');\n  }\n}\n","import { LinearPoolExit } from './concerns/linear/exit.concern';\nimport { LinearPoolJoin } from './concerns/linear/join.concern';\nimport { LinearPoolLiquidity } from './concerns/linear/liquidity.concern';\nimport { LinearPoolSpotPrice } from './concerns/linear/spotPrice.concern';\nimport { LinearPriceImpact } from './concerns/linear/priceImpact.concern';\nimport { PoolType } from './pool-type.interface';\nimport {\n  ExitConcern,\n  JoinConcern,\n  LiquidityConcern,\n  PriceImpactConcern,\n  SpotPriceConcern,\n} from './concerns/types';\n\nexport class Linear implements PoolType {\n  constructor(\n    public exit: ExitConcern = new LinearPoolExit(),\n    public join: JoinConcern = new LinearPoolJoin(),\n    public liquidity: LiquidityConcern = new LinearPoolLiquidity(),\n    public spotPriceCalculator: SpotPriceConcern = new LinearPoolSpotPrice(),\n    public priceImpactCalculator: PriceImpactConcern = new LinearPriceImpact()\n  ) {}\n}\n","import { BalancerSdkConfig, PoolType } from '@/types';\nimport { Stable } from './pool-types/stable.module';\nimport { ComposableStable } from './pool-types/composableStable.module';\nimport { Weighted } from './pool-types/weighted.module';\nimport { MetaStable } from './pool-types/metaStable.module';\nimport { StablePhantom } from './pool-types/stablePhantom.module';\nimport { Linear } from './pool-types/linear.module';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n\n/**\n * Wrapper around pool type specific methods.\n *\n * Returns a class instance of a type specific method handlers.\n */\nexport class PoolTypeConcerns {\n  constructor(\n    config: BalancerSdkConfig,\n    public weighted = new Weighted(),\n    public stable = new Stable(),\n    public composableStable = new ComposableStable(),\n    public metaStable = new MetaStable(),\n    public stablePhantom = new StablePhantom(),\n    public linear = new Linear()\n  ) {}\n\n  static from(\n    poolType: PoolType\n  ):\n    | Weighted\n    | Stable\n    | ComposableStable\n    | MetaStable\n    | StablePhantom\n    | Linear {\n    // Calculate spot price using pool type\n    switch (poolType) {\n      case 'Weighted':\n      case 'Investment':\n      case 'LiquidityBootstrapping': {\n        return new Weighted();\n      }\n      case 'Stable': {\n        return new Stable();\n      }\n      case 'HighAmpComposableStable':\n      case 'ComposableStable': {\n        return new ComposableStable();\n      }\n      case 'MetaStable': {\n        return new MetaStable();\n      }\n      case 'StablePhantom': {\n        return new StablePhantom();\n      }\n      case 'AaveLinear':\n      case 'EulerLinear':\n      case 'ERC4626Linear': {\n        return new Linear();\n      }\n      default:\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n    }\n  }\n}\n","import { Findable, Pool, PoolToken, Price } from '@/types';\nimport { PoolAttribute } from '../data';\nimport { PoolTypeConcerns } from '../pools/pool-type-concerns';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { formatFixed, parseFixed } from '@/lib/utils/math';\n\nconst SCALE = 18;\n\nexport interface PoolBPTValue {\n  address: string;\n  liquidity: string;\n}\n\nexport class Liquidity {\n  constructor(\n    private pools: Findable<Pool, PoolAttribute>,\n    private tokenPrices: Findable<Price>\n  ) {}\n\n  async getLiquidity(pool: Pool): Promise<string> {\n    // Remove any tokens with same address as pool as they are pre-printed BPT\n    const parsedTokens = pool.tokens.filter((token) => {\n      return token.address !== pool.address;\n    });\n\n    // For all tokens that are pools (BPT), recurse into them and fetch their liquidity\n    const subPoolLiquidity = await Promise.all(\n      parsedTokens.map(async (token) => {\n        const pool = await this.pools.findBy('address', token.address);\n        if (!pool) return;\n\n        const liquidity = parseFixed(await this.getLiquidity(pool), SCALE);\n        const totalBPT = parseFixed(pool.totalShares, SCALE);\n        const bptInParentPool = parseFixed(token.balance, SCALE);\n        const liquidityInParentPool = totalBPT.eq(0)\n          ? 0\n          : liquidity.mul(bptInParentPool).div(totalBPT);\n\n        return {\n          address: pool.address,\n          liquidity: liquidityInParentPool.toString(),\n        };\n      })\n    );\n\n    const totalSubPoolLiquidity = subPoolLiquidity.reduce(\n      (totalLiquidity, subPool) => {\n        return totalLiquidity.add(\n          subPool ? subPool.liquidity : BigNumber.from(0)\n        );\n      },\n      BigNumber.from(0)\n    );\n\n    // Filter tokens within pool that are not BPT themselves\n    const nonPoolTokens = parsedTokens.filter((token) => {\n      return !subPoolLiquidity.find((pool) => pool?.address === token.address);\n    });\n\n    // Update price using tokenPrices repository\n    const nonPoolTokensWithUpdatedPrice: PoolToken[] = await Promise.all(\n      nonPoolTokens.map(async (token) => {\n        const tokenPrice = await this.tokenPrices.find(token.address);\n        const poolToken: PoolToken = {\n          address: token.address,\n          decimals: token.decimals,\n          priceRate: token.priceRate,\n          price: (tokenPrice?.usd && tokenPrice) || {\n            usd: token.token?.latestUSDPrice,\n          },\n          balance: token.balance,\n          weight: token.weight,\n        };\n        return poolToken;\n      })\n    );\n\n    // TODO: Just in case we need it soon. Otherwise remove without mercy.\n    // Any of the tokens is missing the price, use subgraph totalLiquidity\n    // if(nonPoolTokensWithUpdatedPrice.map((t) => t.price?.usd).indexOf(undefined) > -1) {\n    //   return pool.totalLiquidity\n    // }\n\n    const tokenLiquidity = PoolTypeConcerns.from(\n      pool.poolType\n    ).liquidity.calcTotal(nonPoolTokensWithUpdatedPrice);\n\n    const parsedTokenLiquidity = parseFixed(tokenLiquidity, SCALE);\n\n    const totalLiquidity = totalSubPoolLiquidity.add(parsedTokenLiquidity);\n\n    return formatFixed(totalLiquidity, SCALE);\n  }\n}\n","import { BigNumberish } from '@ethersproject/bignumber';\nimport { AddressZero, Zero } from '@ethersproject/constants';\nimport { SOR, SwapTypes, SwapInfo } from '@balancer-labs/sor';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport {\n  SwapType,\n  BatchSwapStep,\n  FundManagement,\n  QueryWithSorInput,\n  QueryWithSorOutput,\n} from './types';\nimport { Vault } from '@balancer-labs/typechain';\n\n/*\n * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n *\n * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n * receives are the same that an equivalent `batchSwap` call would receive.\n */\nexport async function queryBatchSwap(\n  vaultContract: Vault,\n  swapType: SwapType,\n  swaps: BatchSwapStep[],\n  assets: string[]\n): Promise<string[]> {\n  const funds: FundManagement = {\n    sender: AddressZero,\n    recipient: AddressZero,\n    fromInternalBalance: false,\n    toInternalBalance: false,\n  };\n\n  try {\n    const deltas = await vaultContract.callStatic.queryBatchSwap(\n      swapType,\n      swaps,\n      assets,\n      funds\n    );\n    return deltas.map((d: BigNumberish) => d.toString());\n  } catch (err) {\n    throw `queryBatchSwap call error: ${err}`;\n  }\n}\n\n/*\nUses SOR to create a batchSwap which is then queried onChain.\n*/\nexport async function queryBatchSwapWithSor(\n  sor: SOR,\n  vaultContract: Vault,\n  queryWithSor: QueryWithSorInput\n): Promise<QueryWithSorOutput> {\n  if (queryWithSor.fetchPools.fetchPools) await sor.fetchPools();\n\n  const swaps: BatchSwapStep[][] = [];\n  const assetArray: string[][] = [];\n  // get path information for each tokenIn\n  for (let i = 0; i < queryWithSor.tokensIn.length; i++) {\n    const swap = await getSorSwapInfo(\n      queryWithSor.tokensIn[i],\n      queryWithSor.tokensOut[i],\n      queryWithSor.swapType,\n      queryWithSor.amounts[i].toString(),\n      sor\n    );\n    if (!swap.returnAmount.gt(Zero))\n      // Throw here because swaps with 0 amounts has no path and has misleading result for query\n      throw new BalancerError(BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT);\n\n    swaps.push(swap.swaps);\n    assetArray.push(swap.tokenAddresses);\n  }\n\n  // Join swaps and assets together correctly\n  const batchedSwaps = batchSwaps(assetArray, swaps);\n\n  const returnTokens =\n    queryWithSor.swapType === SwapType.SwapExactIn\n      ? queryWithSor.tokensOut\n      : queryWithSor.tokensIn;\n  const returnAmounts: string[] = Array(returnTokens.length).fill('0');\n  let deltas: BigNumberish[] = Array(batchedSwaps.assets.length).fill('0');\n  try {\n    // Onchain query\n    deltas = await queryBatchSwap(\n      vaultContract,\n      queryWithSor.swapType,\n      batchedSwaps.swaps,\n      batchedSwaps.assets\n    );\n\n    if (deltas.length > 0) {\n      returnTokens.forEach(\n        (t, i) =>\n          (returnAmounts[i] =\n            deltas[batchedSwaps.assets.indexOf(t.toLowerCase())].toString() ??\n            Zero.toString())\n      );\n    }\n  } catch (err) {\n    throw new BalancerError(BalancerErrorCode.QUERY_BATCH_SWAP);\n  }\n\n  return {\n    returnAmounts,\n    swaps: batchedSwaps.swaps,\n    assets: batchedSwaps.assets,\n    deltas: deltas.map((d) => d.toString()),\n  };\n}\n\n/*\nUse SOR to get swapInfo for tokenIn>tokenOut.\nSwapInfos.swaps has path information.\n*/\nexport async function getSorSwapInfo(\n  tokenIn: string,\n  tokenOut: string,\n  swapType: SwapType,\n  amount: string,\n  sor: SOR\n): Promise<SwapInfo> {\n  const swapTypeSOR: SwapTypes =\n    swapType === SwapType.SwapExactIn\n      ? SwapTypes.SwapExactIn\n      : SwapTypes.SwapExactOut;\n  const swapInfo = await sor.getSwaps(\n    tokenIn.toLowerCase(),\n    tokenOut.toLowerCase(),\n    swapTypeSOR,\n    amount\n  );\n  return swapInfo;\n}\n\n/*\nFormat multiple individual swaps/assets into a single swap/asset.\n*/\nfunction batchSwaps(\n  assetArray: string[][],\n  swaps: BatchSwapStep[][]\n): { swaps: BatchSwapStep[]; assets: string[] } {\n  // asset addresses without duplicates\n  const newAssetArray = [...new Set(assetArray.flat())];\n\n  // Update indices of each swap to use new asset array\n  swaps.forEach((swap, i) => {\n    swap.forEach((poolSwap) => {\n      poolSwap.assetInIndex = newAssetArray.indexOf(\n        assetArray[i][poolSwap.assetInIndex]\n      );\n      poolSwap.assetOutIndex = newAssetArray.indexOf(\n        assetArray[i][poolSwap.assetOutIndex]\n      );\n    });\n  });\n\n  // Join Swaps into a single batchSwap\n  const batchedSwaps = swaps.flat();\n  return { swaps: batchedSwaps, assets: newAssetArray };\n}\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","import { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  BigDecimal: string;\n  BigInt: string;\n  Bytes: string;\n};\n\nexport type AmpUpdate = {\n  __typename?: 'AmpUpdate';\n  endAmp: Scalars['BigInt'];\n  endTimestamp: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startAmp: Scalars['BigInt'];\n  startTimestamp: Scalars['BigInt'];\n};\n\nexport type AmpUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  endAmp?: InputMaybe<Scalars['BigInt']>;\n  endAmp_gt?: InputMaybe<Scalars['BigInt']>;\n  endAmp_gte?: InputMaybe<Scalars['BigInt']>;\n  endAmp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endAmp_lt?: InputMaybe<Scalars['BigInt']>;\n  endAmp_lte?: InputMaybe<Scalars['BigInt']>;\n  endAmp_not?: InputMaybe<Scalars['BigInt']>;\n  endAmp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startAmp?: InputMaybe<Scalars['BigInt']>;\n  startAmp_gt?: InputMaybe<Scalars['BigInt']>;\n  startAmp_gte?: InputMaybe<Scalars['BigInt']>;\n  startAmp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startAmp_lt?: InputMaybe<Scalars['BigInt']>;\n  startAmp_lte?: InputMaybe<Scalars['BigInt']>;\n  startAmp_not?: InputMaybe<Scalars['BigInt']>;\n  startAmp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum AmpUpdate_OrderBy {\n  EndAmp = 'endAmp',\n  EndTimestamp = 'endTimestamp',\n  Id = 'id',\n  PoolId = 'poolId',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartAmp = 'startAmp',\n  StartTimestamp = 'startTimestamp'\n}\n\nexport type Balancer = {\n  __typename?: 'Balancer';\n  id: Scalars['ID'];\n  poolCount: Scalars['Int'];\n  pools?: Maybe<Array<Pool>>;\n  totalLiquidity: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\n\nexport type BalancerPoolsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Pool_Filter>;\n};\n\nexport type BalancerSnapshot = {\n  __typename?: 'BalancerSnapshot';\n  id: Scalars['ID'];\n  poolCount: Scalars['Int'];\n  timestamp: Scalars['Int'];\n  totalLiquidity: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n  vault: Balancer;\n};\n\nexport type BalancerSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolCount?: InputMaybe<Scalars['Int']>;\n  poolCount_gt?: InputMaybe<Scalars['Int']>;\n  poolCount_gte?: InputMaybe<Scalars['Int']>;\n  poolCount_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolCount_lt?: InputMaybe<Scalars['Int']>;\n  poolCount_lte?: InputMaybe<Scalars['Int']>;\n  poolCount_not?: InputMaybe<Scalars['Int']>;\n  poolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  vault?: InputMaybe<Scalars['String']>;\n  vault_?: InputMaybe<Balancer_Filter>;\n  vault_contains?: InputMaybe<Scalars['String']>;\n  vault_contains_nocase?: InputMaybe<Scalars['String']>;\n  vault_ends_with?: InputMaybe<Scalars['String']>;\n  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_gt?: InputMaybe<Scalars['String']>;\n  vault_gte?: InputMaybe<Scalars['String']>;\n  vault_in?: InputMaybe<Array<Scalars['String']>>;\n  vault_lt?: InputMaybe<Scalars['String']>;\n  vault_lte?: InputMaybe<Scalars['String']>;\n  vault_not?: InputMaybe<Scalars['String']>;\n  vault_not_contains?: InputMaybe<Scalars['String']>;\n  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  vault_not_ends_with?: InputMaybe<Scalars['String']>;\n  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_not_in?: InputMaybe<Array<Scalars['String']>>;\n  vault_not_starts_with?: InputMaybe<Scalars['String']>;\n  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  vault_starts_with?: InputMaybe<Scalars['String']>;\n  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum BalancerSnapshot_OrderBy {\n  Id = 'id',\n  PoolCount = 'poolCount',\n  Timestamp = 'timestamp',\n  TotalLiquidity = 'totalLiquidity',\n  TotalSwapCount = 'totalSwapCount',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume',\n  Vault = 'vault'\n}\n\nexport type Balancer_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolCount?: InputMaybe<Scalars['Int']>;\n  poolCount_gt?: InputMaybe<Scalars['Int']>;\n  poolCount_gte?: InputMaybe<Scalars['Int']>;\n  poolCount_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolCount_lt?: InputMaybe<Scalars['Int']>;\n  poolCount_lte?: InputMaybe<Scalars['Int']>;\n  poolCount_not?: InputMaybe<Scalars['Int']>;\n  poolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  pools_?: InputMaybe<Pool_Filter>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Balancer_OrderBy {\n  Id = 'id',\n  PoolCount = 'poolCount',\n  Pools = 'pools',\n  TotalLiquidity = 'totalLiquidity',\n  TotalSwapCount = 'totalSwapCount',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type BlockChangedFilter = {\n  number_gte: Scalars['Int'];\n};\n\nexport type Block_Height = {\n  hash?: InputMaybe<Scalars['Bytes']>;\n  number?: InputMaybe<Scalars['Int']>;\n  number_gte?: InputMaybe<Scalars['Int']>;\n};\n\nexport type GradualWeightUpdate = {\n  __typename?: 'GradualWeightUpdate';\n  endTimestamp: Scalars['BigInt'];\n  endWeights: Array<Scalars['BigInt']>;\n  id: Scalars['ID'];\n  poolId: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startTimestamp: Scalars['BigInt'];\n  startWeights: Array<Scalars['BigInt']>;\n};\n\nexport type GradualWeightUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  endWeights_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;\n  startWeights_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum GradualWeightUpdate_OrderBy {\n  EndTimestamp = 'endTimestamp',\n  EndWeights = 'endWeights',\n  Id = 'id',\n  PoolId = 'poolId',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartTimestamp = 'startTimestamp',\n  StartWeights = 'startWeights'\n}\n\nexport enum InvestType {\n  Exit = 'Exit',\n  Join = 'Join'\n}\n\nexport type JoinExit = {\n  __typename?: 'JoinExit';\n  amounts: Array<Scalars['BigDecimal']>;\n  id: Scalars['ID'];\n  pool: Pool;\n  sender: Scalars['Bytes'];\n  timestamp: Scalars['Int'];\n  tx: Scalars['Bytes'];\n  type: InvestType;\n  user: User;\n  valueUSD?: Maybe<Scalars['BigDecimal']>;\n};\n\nexport type JoinExit_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amounts?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  sender?: InputMaybe<Scalars['Bytes']>;\n  sender_contains?: InputMaybe<Scalars['Bytes']>;\n  sender_gt?: InputMaybe<Scalars['Bytes']>;\n  sender_gte?: InputMaybe<Scalars['Bytes']>;\n  sender_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  sender_lt?: InputMaybe<Scalars['Bytes']>;\n  sender_lte?: InputMaybe<Scalars['Bytes']>;\n  sender_not?: InputMaybe<Scalars['Bytes']>;\n  sender_not_contains?: InputMaybe<Scalars['Bytes']>;\n  sender_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_gt?: InputMaybe<Scalars['Bytes']>;\n  tx_gte?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_lt?: InputMaybe<Scalars['Bytes']>;\n  tx_lte?: InputMaybe<Scalars['Bytes']>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  type?: InputMaybe<InvestType>;\n  type_in?: InputMaybe<Array<InvestType>>;\n  type_not?: InputMaybe<InvestType>;\n  type_not_in?: InputMaybe<Array<InvestType>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_?: InputMaybe<User_Filter>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  valueUSD?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  valueUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum JoinExit_OrderBy {\n  Amounts = 'amounts',\n  Id = 'id',\n  Pool = 'pool',\n  Sender = 'sender',\n  Timestamp = 'timestamp',\n  Tx = 'tx',\n  Type = 'type',\n  User = 'user',\n  ValueUsd = 'valueUSD'\n}\n\nexport type LatestPrice = {\n  __typename?: 'LatestPrice';\n  asset: Scalars['Bytes'];\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  price: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n};\n\nexport type LatestPrice_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  asset?: InputMaybe<Scalars['Bytes']>;\n  asset_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_gt?: InputMaybe<Scalars['Bytes']>;\n  asset_gte?: InputMaybe<Scalars['Bytes']>;\n  asset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  asset_lt?: InputMaybe<Scalars['Bytes']>;\n  asset_lte?: InputMaybe<Scalars['Bytes']>;\n  asset_not?: InputMaybe<Scalars['Bytes']>;\n  asset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['BigDecimal']>;\n  price_gt?: InputMaybe<Scalars['BigDecimal']>;\n  price_gte?: InputMaybe<Scalars['BigDecimal']>;\n  price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  price_lt?: InputMaybe<Scalars['BigDecimal']>;\n  price_lte?: InputMaybe<Scalars['BigDecimal']>;\n  price_not?: InputMaybe<Scalars['BigDecimal']>;\n  price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_lt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_lte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n};\n\nexport enum LatestPrice_OrderBy {\n  Asset = 'asset',\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  Price = 'price',\n  PricingAsset = 'pricingAsset'\n}\n\nexport type ManagementOperation = {\n  __typename?: 'ManagementOperation';\n  cashDelta: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  managedDelta: Scalars['BigDecimal'];\n  poolTokenId: PoolToken;\n  timestamp: Scalars['Int'];\n  type: OperationType;\n};\n\nexport type ManagementOperation_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  cashDelta?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  cashDelta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_not?: InputMaybe<Scalars['BigDecimal']>;\n  cashDelta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  managedDelta?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managedDelta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_not?: InputMaybe<Scalars['BigDecimal']>;\n  managedDelta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolTokenId?: InputMaybe<Scalars['String']>;\n  poolTokenId_?: InputMaybe<PoolToken_Filter>;\n  poolTokenId_contains?: InputMaybe<Scalars['String']>;\n  poolTokenId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_ends_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_gt?: InputMaybe<Scalars['String']>;\n  poolTokenId_gte?: InputMaybe<Scalars['String']>;\n  poolTokenId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolTokenId_lt?: InputMaybe<Scalars['String']>;\n  poolTokenId_lte?: InputMaybe<Scalars['String']>;\n  poolTokenId_not?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_contains?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolTokenId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolTokenId_starts_with?: InputMaybe<Scalars['String']>;\n  poolTokenId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  type?: InputMaybe<OperationType>;\n  type_in?: InputMaybe<Array<OperationType>>;\n  type_not?: InputMaybe<OperationType>;\n  type_not_in?: InputMaybe<Array<OperationType>>;\n};\n\nexport enum ManagementOperation_OrderBy {\n  CashDelta = 'cashDelta',\n  Id = 'id',\n  ManagedDelta = 'managedDelta',\n  PoolTokenId = 'poolTokenId',\n  Timestamp = 'timestamp',\n  Type = 'type'\n}\n\nexport enum OperationType {\n  Deposit = 'Deposit',\n  Update = 'Update',\n  Withdraw = 'Withdraw'\n}\n\n/** Defines the order direction, either ascending or descending */\nexport enum OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type Pool = {\n  __typename?: 'Pool';\n  address: Scalars['Bytes'];\n  alpha?: Maybe<Scalars['BigDecimal']>;\n  amp?: Maybe<Scalars['BigInt']>;\n  baseToken?: Maybe<Scalars['Bytes']>;\n  beta?: Maybe<Scalars['BigDecimal']>;\n  c?: Maybe<Scalars['BigDecimal']>;\n  createTime: Scalars['Int'];\n  dSq?: Maybe<Scalars['BigDecimal']>;\n  delta?: Maybe<Scalars['BigDecimal']>;\n  epsilon?: Maybe<Scalars['BigDecimal']>;\n  expiryTime?: Maybe<Scalars['BigInt']>;\n  factory?: Maybe<Scalars['Bytes']>;\n  historicalValues?: Maybe<Array<PoolHistoricalLiquidity>>;\n  holdersCount: Scalars['BigInt'];\n  id: Scalars['ID'];\n  isInRecoveryMode?: Maybe<Scalars['Boolean']>;\n  isPaused?: Maybe<Scalars['Boolean']>;\n  lambda?: Maybe<Scalars['BigDecimal']>;\n  lowerTarget?: Maybe<Scalars['BigDecimal']>;\n  mainIndex?: Maybe<Scalars['Int']>;\n  managementFee?: Maybe<Scalars['BigDecimal']>;\n  name?: Maybe<Scalars['String']>;\n  oracleEnabled: Scalars['Boolean'];\n  owner?: Maybe<Scalars['Bytes']>;\n  poolType?: Maybe<Scalars['String']>;\n  poolTypeVersion?: Maybe<Scalars['Int']>;\n  priceRateProviders?: Maybe<Array<PriceRateProvider>>;\n  principalToken?: Maybe<Scalars['Bytes']>;\n  protocolAumFeeCache?: Maybe<Scalars['BigDecimal']>;\n  protocolId?: Maybe<Scalars['Int']>;\n  protocolSwapFeeCache?: Maybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache?: Maybe<Scalars['BigDecimal']>;\n  root3Alpha?: Maybe<Scalars['BigDecimal']>;\n  s?: Maybe<Scalars['BigDecimal']>;\n  shares?: Maybe<Array<PoolShare>>;\n  snapshots?: Maybe<Array<PoolSnapshot>>;\n  sqrtAlpha?: Maybe<Scalars['BigDecimal']>;\n  sqrtBeta?: Maybe<Scalars['BigDecimal']>;\n  strategyType: Scalars['Int'];\n  swapEnabled: Scalars['Boolean'];\n  swapFee: Scalars['BigDecimal'];\n  swaps?: Maybe<Array<Swap>>;\n  swapsCount: Scalars['BigInt'];\n  symbol?: Maybe<Scalars['String']>;\n  tauAlphaX?: Maybe<Scalars['BigDecimal']>;\n  tauAlphaY?: Maybe<Scalars['BigDecimal']>;\n  tauBetaX?: Maybe<Scalars['BigDecimal']>;\n  tauBetaY?: Maybe<Scalars['BigDecimal']>;\n  tokens?: Maybe<Array<PoolToken>>;\n  tokensList: Array<Scalars['Bytes']>;\n  totalLiquidity: Scalars['BigDecimal'];\n  totalShares: Scalars['BigDecimal'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n  totalWeight?: Maybe<Scalars['BigDecimal']>;\n  tx?: Maybe<Scalars['Bytes']>;\n  u?: Maybe<Scalars['BigDecimal']>;\n  unitSeconds?: Maybe<Scalars['BigInt']>;\n  upperTarget?: Maybe<Scalars['BigDecimal']>;\n  v?: Maybe<Scalars['BigDecimal']>;\n  vaultID: Balancer;\n  w?: Maybe<Scalars['BigDecimal']>;\n  weightUpdates?: Maybe<Array<GradualWeightUpdate>>;\n  wrappedIndex?: Maybe<Scalars['Int']>;\n  z?: Maybe<Scalars['BigDecimal']>;\n};\n\n\nexport type PoolHistoricalValuesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type PoolPriceRateProvidersArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type PoolSharesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type PoolSnapshotsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type PoolSwapsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type PoolTokensArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type PoolWeightUpdatesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\nexport type PoolContract = {\n  __typename?: 'PoolContract';\n  id: Scalars['ID'];\n  pool: Pool;\n};\n\nexport type PoolContract_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PoolContract_OrderBy {\n  Id = 'id',\n  Pool = 'pool'\n}\n\nexport type PoolHistoricalLiquidity = {\n  __typename?: 'PoolHistoricalLiquidity';\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  poolLiquidity: Scalars['BigDecimal'];\n  poolShareValue: Scalars['BigDecimal'];\n  poolTotalShares: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n};\n\nexport type PoolHistoricalLiquidity_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolShareValue?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolShareValue_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolShareValue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolTotalShares?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  poolTotalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  poolTotalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_lt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_lte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n};\n\nexport enum PoolHistoricalLiquidity_OrderBy {\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  PoolLiquidity = 'poolLiquidity',\n  PoolShareValue = 'poolShareValue',\n  PoolTotalShares = 'poolTotalShares',\n  PricingAsset = 'pricingAsset'\n}\n\nexport type PoolShare = {\n  __typename?: 'PoolShare';\n  balance: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  userAddress: User;\n};\n\nexport type PoolShare_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_?: InputMaybe<User_Filter>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PoolShare_OrderBy {\n  Balance = 'balance',\n  Id = 'id',\n  PoolId = 'poolId',\n  UserAddress = 'userAddress'\n}\n\nexport type PoolSnapshot = {\n  __typename?: 'PoolSnapshot';\n  amounts: Array<Scalars['BigDecimal']>;\n  holdersCount: Scalars['BigInt'];\n  id: Scalars['ID'];\n  liquidity: Scalars['BigDecimal'];\n  pool: Pool;\n  swapFees: Scalars['BigDecimal'];\n  swapVolume: Scalars['BigDecimal'];\n  swapsCount: Scalars['BigInt'];\n  timestamp: Scalars['Int'];\n  totalShares: Scalars['BigDecimal'];\n};\n\nexport type PoolSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amounts?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  holdersCount?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  holdersCount_lt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_lte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  liquidity?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  liquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  liquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  swapFees?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapFees_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapFees_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapsCount?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  swapsCount_lt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_lte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalShares?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolSnapshot_OrderBy {\n  Amounts = 'amounts',\n  HoldersCount = 'holdersCount',\n  Id = 'id',\n  Liquidity = 'liquidity',\n  Pool = 'pool',\n  SwapFees = 'swapFees',\n  SwapVolume = 'swapVolume',\n  SwapsCount = 'swapsCount',\n  Timestamp = 'timestamp',\n  TotalShares = 'totalShares'\n}\n\nexport type PoolToken = {\n  __typename?: 'PoolToken';\n  address: Scalars['String'];\n  assetManager: Scalars['Bytes'];\n  balance: Scalars['BigDecimal'];\n  cashBalance: Scalars['BigDecimal'];\n  decimals: Scalars['Int'];\n  id: Scalars['ID'];\n  index?: Maybe<Scalars['Int']>;\n  isExemptFromYieldProtocolFee?: Maybe<Scalars['Boolean']>;\n  managedBalance: Scalars['BigDecimal'];\n  managements?: Maybe<Array<ManagementOperation>>;\n  name: Scalars['String'];\n  poolId?: Maybe<Pool>;\n  priceRate: Scalars['BigDecimal'];\n  symbol: Scalars['String'];\n  token: Token;\n  weight?: Maybe<Scalars['BigDecimal']>;\n};\n\n\nexport type PoolTokenManagementsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ManagementOperation_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<ManagementOperation_Filter>;\n};\n\nexport type PoolToken_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['String']>;\n  address_contains?: InputMaybe<Scalars['String']>;\n  address_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_ends_with?: InputMaybe<Scalars['String']>;\n  address_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_gt?: InputMaybe<Scalars['String']>;\n  address_gte?: InputMaybe<Scalars['String']>;\n  address_in?: InputMaybe<Array<Scalars['String']>>;\n  address_lt?: InputMaybe<Scalars['String']>;\n  address_lte?: InputMaybe<Scalars['String']>;\n  address_not?: InputMaybe<Scalars['String']>;\n  address_not_contains?: InputMaybe<Scalars['String']>;\n  address_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_not_ends_with?: InputMaybe<Scalars['String']>;\n  address_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_not_in?: InputMaybe<Array<Scalars['String']>>;\n  address_not_starts_with?: InputMaybe<Scalars['String']>;\n  address_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  address_starts_with?: InputMaybe<Scalars['String']>;\n  address_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  assetManager?: InputMaybe<Scalars['Bytes']>;\n  assetManager_contains?: InputMaybe<Scalars['Bytes']>;\n  assetManager_gt?: InputMaybe<Scalars['Bytes']>;\n  assetManager_gte?: InputMaybe<Scalars['Bytes']>;\n  assetManager_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  assetManager_lt?: InputMaybe<Scalars['Bytes']>;\n  assetManager_lte?: InputMaybe<Scalars['Bytes']>;\n  assetManager_not?: InputMaybe<Scalars['Bytes']>;\n  assetManager_not_contains?: InputMaybe<Scalars['Bytes']>;\n  assetManager_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  cashBalance?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  cashBalance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_not?: InputMaybe<Scalars['BigDecimal']>;\n  cashBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  index?: InputMaybe<Scalars['Int']>;\n  index_gt?: InputMaybe<Scalars['Int']>;\n  index_gte?: InputMaybe<Scalars['Int']>;\n  index_in?: InputMaybe<Array<Scalars['Int']>>;\n  index_lt?: InputMaybe<Scalars['Int']>;\n  index_lte?: InputMaybe<Scalars['Int']>;\n  index_not?: InputMaybe<Scalars['Int']>;\n  index_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  isExemptFromYieldProtocolFee?: InputMaybe<Scalars['Boolean']>;\n  isExemptFromYieldProtocolFee_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isExemptFromYieldProtocolFee_not?: InputMaybe<Scalars['Boolean']>;\n  isExemptFromYieldProtocolFee_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  managedBalance?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managedBalance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_not?: InputMaybe<Scalars['BigDecimal']>;\n  managedBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managements_?: InputMaybe<ManagementOperation_Filter>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  priceRate?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  priceRate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_not?: InputMaybe<Scalars['BigDecimal']>;\n  priceRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token?: InputMaybe<Scalars['String']>;\n  token_?: InputMaybe<Token_Filter>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  weight?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  weight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum PoolToken_OrderBy {\n  Address = 'address',\n  AssetManager = 'assetManager',\n  Balance = 'balance',\n  CashBalance = 'cashBalance',\n  Decimals = 'decimals',\n  Id = 'id',\n  Index = 'index',\n  IsExemptFromYieldProtocolFee = 'isExemptFromYieldProtocolFee',\n  ManagedBalance = 'managedBalance',\n  Managements = 'managements',\n  Name = 'name',\n  PoolId = 'poolId',\n  PriceRate = 'priceRate',\n  Symbol = 'symbol',\n  Token = 'token',\n  Weight = 'weight'\n}\n\nexport type Pool_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_gt?: InputMaybe<Scalars['Bytes']>;\n  address_gte?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_lt?: InputMaybe<Scalars['Bytes']>;\n  address_lte?: InputMaybe<Scalars['Bytes']>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  alpha?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_gt?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_gte?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  alpha_lt?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_lte?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_not?: InputMaybe<Scalars['BigDecimal']>;\n  alpha_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amp?: InputMaybe<Scalars['BigInt']>;\n  amp_gt?: InputMaybe<Scalars['BigInt']>;\n  amp_gte?: InputMaybe<Scalars['BigInt']>;\n  amp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  amp_lt?: InputMaybe<Scalars['BigInt']>;\n  amp_lte?: InputMaybe<Scalars['BigInt']>;\n  amp_not?: InputMaybe<Scalars['BigInt']>;\n  amp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  baseToken?: InputMaybe<Scalars['Bytes']>;\n  baseToken_contains?: InputMaybe<Scalars['Bytes']>;\n  baseToken_gt?: InputMaybe<Scalars['Bytes']>;\n  baseToken_gte?: InputMaybe<Scalars['Bytes']>;\n  baseToken_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  baseToken_lt?: InputMaybe<Scalars['Bytes']>;\n  baseToken_lte?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not_contains?: InputMaybe<Scalars['Bytes']>;\n  baseToken_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  beta?: InputMaybe<Scalars['BigDecimal']>;\n  beta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  beta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  beta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  beta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  beta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  beta_not?: InputMaybe<Scalars['BigDecimal']>;\n  beta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  c?: InputMaybe<Scalars['BigDecimal']>;\n  c_gt?: InputMaybe<Scalars['BigDecimal']>;\n  c_gte?: InputMaybe<Scalars['BigDecimal']>;\n  c_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  c_lt?: InputMaybe<Scalars['BigDecimal']>;\n  c_lte?: InputMaybe<Scalars['BigDecimal']>;\n  c_not?: InputMaybe<Scalars['BigDecimal']>;\n  c_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  createTime?: InputMaybe<Scalars['Int']>;\n  createTime_gt?: InputMaybe<Scalars['Int']>;\n  createTime_gte?: InputMaybe<Scalars['Int']>;\n  createTime_in?: InputMaybe<Array<Scalars['Int']>>;\n  createTime_lt?: InputMaybe<Scalars['Int']>;\n  createTime_lte?: InputMaybe<Scalars['Int']>;\n  createTime_not?: InputMaybe<Scalars['Int']>;\n  createTime_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  dSq?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_gt?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_gte?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  dSq_lt?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_lte?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_not?: InputMaybe<Scalars['BigDecimal']>;\n  dSq_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  delta?: InputMaybe<Scalars['BigDecimal']>;\n  delta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  delta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  delta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  delta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  delta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  delta_not?: InputMaybe<Scalars['BigDecimal']>;\n  delta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  epsilon?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_gt?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_gte?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  epsilon_lt?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_lte?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_not?: InputMaybe<Scalars['BigDecimal']>;\n  epsilon_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  expiryTime?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_gt?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_gte?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  expiryTime_lt?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_lte?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_not?: InputMaybe<Scalars['BigInt']>;\n  expiryTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  factory?: InputMaybe<Scalars['Bytes']>;\n  factory_contains?: InputMaybe<Scalars['Bytes']>;\n  factory_gt?: InputMaybe<Scalars['Bytes']>;\n  factory_gte?: InputMaybe<Scalars['Bytes']>;\n  factory_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  factory_lt?: InputMaybe<Scalars['Bytes']>;\n  factory_lte?: InputMaybe<Scalars['Bytes']>;\n  factory_not?: InputMaybe<Scalars['Bytes']>;\n  factory_not_contains?: InputMaybe<Scalars['Bytes']>;\n  factory_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  historicalValues_?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n  holdersCount?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_gte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  holdersCount_lt?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_lte?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not?: InputMaybe<Scalars['BigInt']>;\n  holdersCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  isInRecoveryMode?: InputMaybe<Scalars['Boolean']>;\n  isInRecoveryMode_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isInRecoveryMode_not?: InputMaybe<Scalars['Boolean']>;\n  isInRecoveryMode_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isPaused?: InputMaybe<Scalars['Boolean']>;\n  isPaused_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isPaused_not?: InputMaybe<Scalars['Boolean']>;\n  isPaused_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  lambda?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lambda_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_not?: InputMaybe<Scalars['BigDecimal']>;\n  lambda_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lowerTarget?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lowerTarget_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_not?: InputMaybe<Scalars['BigDecimal']>;\n  lowerTarget_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  mainIndex?: InputMaybe<Scalars['Int']>;\n  mainIndex_gt?: InputMaybe<Scalars['Int']>;\n  mainIndex_gte?: InputMaybe<Scalars['Int']>;\n  mainIndex_in?: InputMaybe<Array<Scalars['Int']>>;\n  mainIndex_lt?: InputMaybe<Scalars['Int']>;\n  mainIndex_lte?: InputMaybe<Scalars['Int']>;\n  mainIndex_not?: InputMaybe<Scalars['Int']>;\n  mainIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  managementFee?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  managementFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  managementFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  oracleEnabled?: InputMaybe<Scalars['Boolean']>;\n  oracleEnabled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  oracleEnabled_not?: InputMaybe<Scalars['Boolean']>;\n  oracleEnabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  owner?: InputMaybe<Scalars['Bytes']>;\n  owner_contains?: InputMaybe<Scalars['Bytes']>;\n  owner_gt?: InputMaybe<Scalars['Bytes']>;\n  owner_gte?: InputMaybe<Scalars['Bytes']>;\n  owner_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  owner_lt?: InputMaybe<Scalars['Bytes']>;\n  owner_lte?: InputMaybe<Scalars['Bytes']>;\n  owner_not?: InputMaybe<Scalars['Bytes']>;\n  owner_not_contains?: InputMaybe<Scalars['Bytes']>;\n  owner_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolType?: InputMaybe<Scalars['String']>;\n  poolTypeVersion?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_gt?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_gte?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolTypeVersion_lt?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_lte?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_not?: InputMaybe<Scalars['Int']>;\n  poolTypeVersion_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolType_contains?: InputMaybe<Scalars['String']>;\n  poolType_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolType_ends_with?: InputMaybe<Scalars['String']>;\n  poolType_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_gt?: InputMaybe<Scalars['String']>;\n  poolType_gte?: InputMaybe<Scalars['String']>;\n  poolType_in?: InputMaybe<Array<Scalars['String']>>;\n  poolType_lt?: InputMaybe<Scalars['String']>;\n  poolType_lte?: InputMaybe<Scalars['String']>;\n  poolType_not?: InputMaybe<Scalars['String']>;\n  poolType_not_contains?: InputMaybe<Scalars['String']>;\n  poolType_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolType_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolType_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolType_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolType_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolType_starts_with?: InputMaybe<Scalars['String']>;\n  poolType_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  priceRateProviders_?: InputMaybe<PriceRateProvider_Filter>;\n  principalToken?: InputMaybe<Scalars['Bytes']>;\n  principalToken_contains?: InputMaybe<Scalars['Bytes']>;\n  principalToken_gt?: InputMaybe<Scalars['Bytes']>;\n  principalToken_gte?: InputMaybe<Scalars['Bytes']>;\n  principalToken_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  principalToken_lt?: InputMaybe<Scalars['Bytes']>;\n  principalToken_lte?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not_contains?: InputMaybe<Scalars['Bytes']>;\n  principalToken_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  protocolAumFeeCache?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_gt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_gte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolAumFeeCache_lt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_lte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_not?: InputMaybe<Scalars['BigDecimal']>;\n  protocolAumFeeCache_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolId?: InputMaybe<Scalars['Int']>;\n  protocolId_gt?: InputMaybe<Scalars['Int']>;\n  protocolId_gte?: InputMaybe<Scalars['Int']>;\n  protocolId_in?: InputMaybe<Array<Scalars['Int']>>;\n  protocolId_lt?: InputMaybe<Scalars['Int']>;\n  protocolId_lte?: InputMaybe<Scalars['Int']>;\n  protocolId_not?: InputMaybe<Scalars['Int']>;\n  protocolId_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  protocolSwapFeeCache?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_gt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_gte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolSwapFeeCache_lt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_lte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_not?: InputMaybe<Scalars['BigDecimal']>;\n  protocolSwapFeeCache_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolYieldFeeCache?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_gt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_gte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  protocolYieldFeeCache_lt?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_lte?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_not?: InputMaybe<Scalars['BigDecimal']>;\n  protocolYieldFeeCache_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  root3Alpha?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_gt?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_gte?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  root3Alpha_lt?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_lte?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_not?: InputMaybe<Scalars['BigDecimal']>;\n  root3Alpha_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  s?: InputMaybe<Scalars['BigDecimal']>;\n  s_gt?: InputMaybe<Scalars['BigDecimal']>;\n  s_gte?: InputMaybe<Scalars['BigDecimal']>;\n  s_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  s_lt?: InputMaybe<Scalars['BigDecimal']>;\n  s_lte?: InputMaybe<Scalars['BigDecimal']>;\n  s_not?: InputMaybe<Scalars['BigDecimal']>;\n  s_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  shares_?: InputMaybe<PoolShare_Filter>;\n  snapshots_?: InputMaybe<PoolSnapshot_Filter>;\n  sqrtAlpha?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_gt?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_gte?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  sqrtAlpha_lt?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_lte?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_not?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtAlpha_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  sqrtBeta?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_gt?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_gte?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  sqrtBeta_lt?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_lte?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_not?: InputMaybe<Scalars['BigDecimal']>;\n  sqrtBeta_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  strategyType?: InputMaybe<Scalars['Int']>;\n  strategyType_gt?: InputMaybe<Scalars['Int']>;\n  strategyType_gte?: InputMaybe<Scalars['Int']>;\n  strategyType_in?: InputMaybe<Array<Scalars['Int']>>;\n  strategyType_lt?: InputMaybe<Scalars['Int']>;\n  strategyType_lte?: InputMaybe<Scalars['Int']>;\n  strategyType_not?: InputMaybe<Scalars['Int']>;\n  strategyType_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  swapEnabled?: InputMaybe<Scalars['Boolean']>;\n  swapEnabled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapEnabled_not?: InputMaybe<Scalars['Boolean']>;\n  swapEnabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  swapFee?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  swapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  swapsCount?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_gte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  swapsCount_lt?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_lte?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not?: InputMaybe<Scalars['BigInt']>;\n  swapsCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  swaps_?: InputMaybe<Swap_Filter>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tauAlphaX?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauAlphaX_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_not?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaX_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauAlphaY?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauAlphaY_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_not?: InputMaybe<Scalars['BigDecimal']>;\n  tauAlphaY_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauBetaX?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauBetaX_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_not?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaX_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauBetaY?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tauBetaY_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_not?: InputMaybe<Scalars['BigDecimal']>;\n  tauBetaY_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokensList?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokensList_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokens_?: InputMaybe<PoolToken_Filter>;\n  totalLiquidity?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalLiquidity_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalLiquidity_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalShares_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalShares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalWeight?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalWeight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalWeight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_gt?: InputMaybe<Scalars['Bytes']>;\n  tx_gte?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_lt?: InputMaybe<Scalars['Bytes']>;\n  tx_lte?: InputMaybe<Scalars['Bytes']>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  u?: InputMaybe<Scalars['BigDecimal']>;\n  u_gt?: InputMaybe<Scalars['BigDecimal']>;\n  u_gte?: InputMaybe<Scalars['BigDecimal']>;\n  u_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  u_lt?: InputMaybe<Scalars['BigDecimal']>;\n  u_lte?: InputMaybe<Scalars['BigDecimal']>;\n  u_not?: InputMaybe<Scalars['BigDecimal']>;\n  u_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  unitSeconds?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_gt?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_gte?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  unitSeconds_lt?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_lte?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_not?: InputMaybe<Scalars['BigInt']>;\n  unitSeconds_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  upperTarget?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_gt?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_gte?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  upperTarget_lt?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_lte?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_not?: InputMaybe<Scalars['BigDecimal']>;\n  upperTarget_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  v?: InputMaybe<Scalars['BigDecimal']>;\n  v_gt?: InputMaybe<Scalars['BigDecimal']>;\n  v_gte?: InputMaybe<Scalars['BigDecimal']>;\n  v_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  v_lt?: InputMaybe<Scalars['BigDecimal']>;\n  v_lte?: InputMaybe<Scalars['BigDecimal']>;\n  v_not?: InputMaybe<Scalars['BigDecimal']>;\n  v_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  vaultID?: InputMaybe<Scalars['String']>;\n  vaultID_?: InputMaybe<Balancer_Filter>;\n  vaultID_contains?: InputMaybe<Scalars['String']>;\n  vaultID_contains_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_ends_with?: InputMaybe<Scalars['String']>;\n  vaultID_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_gt?: InputMaybe<Scalars['String']>;\n  vaultID_gte?: InputMaybe<Scalars['String']>;\n  vaultID_in?: InputMaybe<Array<Scalars['String']>>;\n  vaultID_lt?: InputMaybe<Scalars['String']>;\n  vaultID_lte?: InputMaybe<Scalars['String']>;\n  vaultID_not?: InputMaybe<Scalars['String']>;\n  vaultID_not_contains?: InputMaybe<Scalars['String']>;\n  vaultID_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_not_ends_with?: InputMaybe<Scalars['String']>;\n  vaultID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_not_in?: InputMaybe<Array<Scalars['String']>>;\n  vaultID_not_starts_with?: InputMaybe<Scalars['String']>;\n  vaultID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  vaultID_starts_with?: InputMaybe<Scalars['String']>;\n  vaultID_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  w?: InputMaybe<Scalars['BigDecimal']>;\n  w_gt?: InputMaybe<Scalars['BigDecimal']>;\n  w_gte?: InputMaybe<Scalars['BigDecimal']>;\n  w_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  w_lt?: InputMaybe<Scalars['BigDecimal']>;\n  w_lte?: InputMaybe<Scalars['BigDecimal']>;\n  w_not?: InputMaybe<Scalars['BigDecimal']>;\n  w_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  weightUpdates_?: InputMaybe<GradualWeightUpdate_Filter>;\n  wrappedIndex?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_gt?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_gte?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_in?: InputMaybe<Array<Scalars['Int']>>;\n  wrappedIndex_lt?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_lte?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_not?: InputMaybe<Scalars['Int']>;\n  wrappedIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  z?: InputMaybe<Scalars['BigDecimal']>;\n  z_gt?: InputMaybe<Scalars['BigDecimal']>;\n  z_gte?: InputMaybe<Scalars['BigDecimal']>;\n  z_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  z_lt?: InputMaybe<Scalars['BigDecimal']>;\n  z_lte?: InputMaybe<Scalars['BigDecimal']>;\n  z_not?: InputMaybe<Scalars['BigDecimal']>;\n  z_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Pool_OrderBy {\n  Address = 'address',\n  Alpha = 'alpha',\n  Amp = 'amp',\n  BaseToken = 'baseToken',\n  Beta = 'beta',\n  C = 'c',\n  CreateTime = 'createTime',\n  DSq = 'dSq',\n  Delta = 'delta',\n  Epsilon = 'epsilon',\n  ExpiryTime = 'expiryTime',\n  Factory = 'factory',\n  HistoricalValues = 'historicalValues',\n  HoldersCount = 'holdersCount',\n  Id = 'id',\n  IsInRecoveryMode = 'isInRecoveryMode',\n  IsPaused = 'isPaused',\n  Lambda = 'lambda',\n  LowerTarget = 'lowerTarget',\n  MainIndex = 'mainIndex',\n  ManagementFee = 'managementFee',\n  Name = 'name',\n  OracleEnabled = 'oracleEnabled',\n  Owner = 'owner',\n  PoolType = 'poolType',\n  PoolTypeVersion = 'poolTypeVersion',\n  PriceRateProviders = 'priceRateProviders',\n  PrincipalToken = 'principalToken',\n  ProtocolAumFeeCache = 'protocolAumFeeCache',\n  ProtocolId = 'protocolId',\n  ProtocolSwapFeeCache = 'protocolSwapFeeCache',\n  ProtocolYieldFeeCache = 'protocolYieldFeeCache',\n  Root3Alpha = 'root3Alpha',\n  S = 's',\n  Shares = 'shares',\n  Snapshots = 'snapshots',\n  SqrtAlpha = 'sqrtAlpha',\n  SqrtBeta = 'sqrtBeta',\n  StrategyType = 'strategyType',\n  SwapEnabled = 'swapEnabled',\n  SwapFee = 'swapFee',\n  Swaps = 'swaps',\n  SwapsCount = 'swapsCount',\n  Symbol = 'symbol',\n  TauAlphaX = 'tauAlphaX',\n  TauAlphaY = 'tauAlphaY',\n  TauBetaX = 'tauBetaX',\n  TauBetaY = 'tauBetaY',\n  Tokens = 'tokens',\n  TokensList = 'tokensList',\n  TotalLiquidity = 'totalLiquidity',\n  TotalShares = 'totalShares',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume',\n  TotalWeight = 'totalWeight',\n  Tx = 'tx',\n  U = 'u',\n  UnitSeconds = 'unitSeconds',\n  UpperTarget = 'upperTarget',\n  V = 'v',\n  VaultId = 'vaultID',\n  W = 'w',\n  WeightUpdates = 'weightUpdates',\n  WrappedIndex = 'wrappedIndex',\n  Z = 'z'\n}\n\nexport type PriceRateProvider = {\n  __typename?: 'PriceRateProvider';\n  address: Scalars['Bytes'];\n  cacheDuration?: Maybe<Scalars['Int']>;\n  cacheExpiry?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  lastCached?: Maybe<Scalars['Int']>;\n  poolId: Pool;\n  rate?: Maybe<Scalars['BigDecimal']>;\n  token: PoolToken;\n};\n\nexport type PriceRateProvider_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_gt?: InputMaybe<Scalars['Bytes']>;\n  address_gte?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_lt?: InputMaybe<Scalars['Bytes']>;\n  address_lte?: InputMaybe<Scalars['Bytes']>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  cacheDuration?: InputMaybe<Scalars['Int']>;\n  cacheDuration_gt?: InputMaybe<Scalars['Int']>;\n  cacheDuration_gte?: InputMaybe<Scalars['Int']>;\n  cacheDuration_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheDuration_lt?: InputMaybe<Scalars['Int']>;\n  cacheDuration_lte?: InputMaybe<Scalars['Int']>;\n  cacheDuration_not?: InputMaybe<Scalars['Int']>;\n  cacheDuration_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheExpiry?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_gt?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_gte?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_in?: InputMaybe<Array<Scalars['Int']>>;\n  cacheExpiry_lt?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_lte?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_not?: InputMaybe<Scalars['Int']>;\n  cacheExpiry_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  lastCached?: InputMaybe<Scalars['Int']>;\n  lastCached_gt?: InputMaybe<Scalars['Int']>;\n  lastCached_gte?: InputMaybe<Scalars['Int']>;\n  lastCached_in?: InputMaybe<Array<Scalars['Int']>>;\n  lastCached_lt?: InputMaybe<Scalars['Int']>;\n  lastCached_lte?: InputMaybe<Scalars['Int']>;\n  lastCached_not?: InputMaybe<Scalars['Int']>;\n  lastCached_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  rate?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  rate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  token?: InputMaybe<Scalars['String']>;\n  token_?: InputMaybe<PoolToken_Filter>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum PriceRateProvider_OrderBy {\n  Address = 'address',\n  CacheDuration = 'cacheDuration',\n  CacheExpiry = 'cacheExpiry',\n  Id = 'id',\n  LastCached = 'lastCached',\n  PoolId = 'poolId',\n  Rate = 'rate',\n  Token = 'token'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  ampUpdate?: Maybe<AmpUpdate>;\n  ampUpdates: Array<AmpUpdate>;\n  balancer?: Maybe<Balancer>;\n  balancerSnapshot?: Maybe<BalancerSnapshot>;\n  balancerSnapshots: Array<BalancerSnapshot>;\n  balancers: Array<Balancer>;\n  gradualWeightUpdate?: Maybe<GradualWeightUpdate>;\n  gradualWeightUpdates: Array<GradualWeightUpdate>;\n  joinExit?: Maybe<JoinExit>;\n  joinExits: Array<JoinExit>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestPrices: Array<LatestPrice>;\n  managementOperation?: Maybe<ManagementOperation>;\n  managementOperations: Array<ManagementOperation>;\n  pool?: Maybe<Pool>;\n  poolContract?: Maybe<PoolContract>;\n  poolContracts: Array<PoolContract>;\n  poolHistoricalLiquidities: Array<PoolHistoricalLiquidity>;\n  poolHistoricalLiquidity?: Maybe<PoolHistoricalLiquidity>;\n  poolShare?: Maybe<PoolShare>;\n  poolShares: Array<PoolShare>;\n  poolSnapshot?: Maybe<PoolSnapshot>;\n  poolSnapshots: Array<PoolSnapshot>;\n  poolToken?: Maybe<PoolToken>;\n  poolTokens: Array<PoolToken>;\n  pools: Array<Pool>;\n  priceRateProvider?: Maybe<PriceRateProvider>;\n  priceRateProviders: Array<PriceRateProvider>;\n  swap?: Maybe<Swap>;\n  swapFeeUpdate?: Maybe<SwapFeeUpdate>;\n  swapFeeUpdates: Array<SwapFeeUpdate>;\n  swaps: Array<Swap>;\n  token?: Maybe<Token>;\n  tokenPrice?: Maybe<TokenPrice>;\n  tokenPrices: Array<TokenPrice>;\n  tokenSnapshot?: Maybe<TokenSnapshot>;\n  tokenSnapshots: Array<TokenSnapshot>;\n  tokens: Array<Token>;\n  tradePair?: Maybe<TradePair>;\n  tradePairSnapshot?: Maybe<TradePairSnapshot>;\n  tradePairSnapshots: Array<TradePairSnapshot>;\n  tradePairs: Array<TradePair>;\n  user?: Maybe<User>;\n  userInternalBalance?: Maybe<UserInternalBalance>;\n  userInternalBalances: Array<UserInternalBalance>;\n  users: Array<User>;\n};\n\n\nexport type Query_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type QueryAmpUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryAmpUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AmpUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<AmpUpdate_Filter>;\n};\n\n\nexport type QueryBalancerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryBalancerSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryBalancerSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<BalancerSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<BalancerSnapshot_Filter>;\n};\n\n\nexport type QueryBalancersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Balancer_Filter>;\n};\n\n\nexport type QueryGradualWeightUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGradualWeightUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\n\nexport type QueryJoinExitArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryJoinExitsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<JoinExit_Filter>;\n};\n\n\nexport type QueryLatestPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryLatestPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LatestPrice_Filter>;\n};\n\n\nexport type QueryManagementOperationArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryManagementOperationsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ManagementOperation_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<ManagementOperation_Filter>;\n};\n\n\nexport type QueryPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolContractArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolContractsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolContract_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolContract_Filter>;\n};\n\n\nexport type QueryPoolHistoricalLiquiditiesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type QueryPoolHistoricalLiquidityArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type QueryPoolSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type QueryPoolTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type QueryPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type QueryPriceRateProviderArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPriceRateProvidersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type QuerySwapArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QuerySwapFeeUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QuerySwapFeeUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SwapFeeUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<SwapFeeUpdate_Filter>;\n};\n\n\nexport type QuerySwapsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type QueryTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenPrice_Filter>;\n};\n\n\nexport type QueryTokenSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTokenSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenSnapshot_Filter>;\n};\n\n\nexport type QueryTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Token_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Token_Filter>;\n};\n\n\nexport type QueryTradePairArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTradePairSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryTradePairSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePairSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePairSnapshot_Filter>;\n};\n\n\nexport type QueryTradePairsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePair_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePair_Filter>;\n};\n\n\nexport type QueryUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUserInternalBalanceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUserInternalBalancesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\n\nexport type QueryUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  ampUpdate?: Maybe<AmpUpdate>;\n  ampUpdates: Array<AmpUpdate>;\n  balancer?: Maybe<Balancer>;\n  balancerSnapshot?: Maybe<BalancerSnapshot>;\n  balancerSnapshots: Array<BalancerSnapshot>;\n  balancers: Array<Balancer>;\n  gradualWeightUpdate?: Maybe<GradualWeightUpdate>;\n  gradualWeightUpdates: Array<GradualWeightUpdate>;\n  joinExit?: Maybe<JoinExit>;\n  joinExits: Array<JoinExit>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestPrices: Array<LatestPrice>;\n  managementOperation?: Maybe<ManagementOperation>;\n  managementOperations: Array<ManagementOperation>;\n  pool?: Maybe<Pool>;\n  poolContract?: Maybe<PoolContract>;\n  poolContracts: Array<PoolContract>;\n  poolHistoricalLiquidities: Array<PoolHistoricalLiquidity>;\n  poolHistoricalLiquidity?: Maybe<PoolHistoricalLiquidity>;\n  poolShare?: Maybe<PoolShare>;\n  poolShares: Array<PoolShare>;\n  poolSnapshot?: Maybe<PoolSnapshot>;\n  poolSnapshots: Array<PoolSnapshot>;\n  poolToken?: Maybe<PoolToken>;\n  poolTokens: Array<PoolToken>;\n  pools: Array<Pool>;\n  priceRateProvider?: Maybe<PriceRateProvider>;\n  priceRateProviders: Array<PriceRateProvider>;\n  swap?: Maybe<Swap>;\n  swapFeeUpdate?: Maybe<SwapFeeUpdate>;\n  swapFeeUpdates: Array<SwapFeeUpdate>;\n  swaps: Array<Swap>;\n  token?: Maybe<Token>;\n  tokenPrice?: Maybe<TokenPrice>;\n  tokenPrices: Array<TokenPrice>;\n  tokenSnapshot?: Maybe<TokenSnapshot>;\n  tokenSnapshots: Array<TokenSnapshot>;\n  tokens: Array<Token>;\n  tradePair?: Maybe<TradePair>;\n  tradePairSnapshot?: Maybe<TradePairSnapshot>;\n  tradePairSnapshots: Array<TradePairSnapshot>;\n  tradePairs: Array<TradePair>;\n  user?: Maybe<User>;\n  userInternalBalance?: Maybe<UserInternalBalance>;\n  userInternalBalances: Array<UserInternalBalance>;\n  users: Array<User>;\n};\n\n\nexport type Subscription_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type SubscriptionAmpUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionAmpUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<AmpUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<AmpUpdate_Filter>;\n};\n\n\nexport type SubscriptionBalancerArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionBalancerSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionBalancerSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<BalancerSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<BalancerSnapshot_Filter>;\n};\n\n\nexport type SubscriptionBalancersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Balancer_Filter>;\n};\n\n\nexport type SubscriptionGradualWeightUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGradualWeightUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GradualWeightUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GradualWeightUpdate_Filter>;\n};\n\n\nexport type SubscriptionJoinExitArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionJoinExitsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<JoinExit_Filter>;\n};\n\n\nexport type SubscriptionLatestPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionLatestPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LatestPrice_Filter>;\n};\n\n\nexport type SubscriptionManagementOperationArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionManagementOperationsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<ManagementOperation_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<ManagementOperation_Filter>;\n};\n\n\nexport type SubscriptionPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolContractArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolContractsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolContract_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolContract_Filter>;\n};\n\n\nexport type SubscriptionPoolHistoricalLiquiditiesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n};\n\n\nexport type SubscriptionPoolHistoricalLiquidityArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type SubscriptionPoolSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n};\n\n\nexport type SubscriptionPoolTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PoolToken_Filter>;\n};\n\n\nexport type SubscriptionPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type SubscriptionPriceRateProviderArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPriceRateProvidersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PriceRateProvider_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<PriceRateProvider_Filter>;\n};\n\n\nexport type SubscriptionSwapArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionSwapFeeUpdateArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionSwapFeeUpdatesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<SwapFeeUpdate_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<SwapFeeUpdate_Filter>;\n};\n\n\nexport type SubscriptionSwapsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type SubscriptionTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenPriceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenPricesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenPrice_Filter>;\n};\n\n\nexport type SubscriptionTokenSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTokenSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TokenSnapshot_Filter>;\n};\n\n\nexport type SubscriptionTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Token_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Token_Filter>;\n};\n\n\nexport type SubscriptionTradePairArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTradePairSnapshotArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionTradePairSnapshotsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePairSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePairSnapshot_Filter>;\n};\n\n\nexport type SubscriptionTradePairsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TradePair_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<TradePair_Filter>;\n};\n\n\nexport type SubscriptionUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUserInternalBalanceArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUserInternalBalancesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\n\nexport type SubscriptionUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\nexport type Swap = {\n  __typename?: 'Swap';\n  caller: Scalars['Bytes'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  timestamp: Scalars['Int'];\n  tokenAmountIn: Scalars['BigDecimal'];\n  tokenAmountOut: Scalars['BigDecimal'];\n  tokenIn: Scalars['Bytes'];\n  tokenInSym: Scalars['String'];\n  tokenOut: Scalars['Bytes'];\n  tokenOutSym: Scalars['String'];\n  tx: Scalars['Bytes'];\n  userAddress: User;\n  valueUSD: Scalars['BigDecimal'];\n};\n\nexport type SwapFeeUpdate = {\n  __typename?: 'SwapFeeUpdate';\n  endSwapFeePercentage: Scalars['BigDecimal'];\n  endTimestamp: Scalars['BigInt'];\n  id: Scalars['ID'];\n  pool: Pool;\n  scheduledTimestamp: Scalars['Int'];\n  startSwapFeePercentage: Scalars['BigDecimal'];\n  startTimestamp: Scalars['BigInt'];\n};\n\nexport type SwapFeeUpdate_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  endSwapFeePercentage?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_gt?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_gte?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  endSwapFeePercentage_lt?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_lte?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_not?: InputMaybe<Scalars['BigDecimal']>;\n  endSwapFeePercentage_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  endTimestamp?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  endTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  endTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  scheduledTimestamp?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  scheduledTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not?: InputMaybe<Scalars['Int']>;\n  scheduledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  startSwapFeePercentage?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_gt?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_gte?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  startSwapFeePercentage_lt?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_lte?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_not?: InputMaybe<Scalars['BigDecimal']>;\n  startSwapFeePercentage_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  startTimestamp?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  startTimestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not?: InputMaybe<Scalars['BigInt']>;\n  startTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n};\n\nexport enum SwapFeeUpdate_OrderBy {\n  EndSwapFeePercentage = 'endSwapFeePercentage',\n  EndTimestamp = 'endTimestamp',\n  Id = 'id',\n  Pool = 'pool',\n  ScheduledTimestamp = 'scheduledTimestamp',\n  StartSwapFeePercentage = 'startSwapFeePercentage',\n  StartTimestamp = 'startTimestamp'\n}\n\nexport type Swap_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  caller?: InputMaybe<Scalars['Bytes']>;\n  caller_contains?: InputMaybe<Scalars['Bytes']>;\n  caller_gt?: InputMaybe<Scalars['Bytes']>;\n  caller_gte?: InputMaybe<Scalars['Bytes']>;\n  caller_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  caller_lt?: InputMaybe<Scalars['Bytes']>;\n  caller_lte?: InputMaybe<Scalars['Bytes']>;\n  caller_not?: InputMaybe<Scalars['Bytes']>;\n  caller_not_contains?: InputMaybe<Scalars['Bytes']>;\n  caller_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  tokenAmountIn?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountIn_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_not?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountIn_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountOut?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_gt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_gte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenAmountOut_lt?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_lte?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_not?: InputMaybe<Scalars['BigDecimal']>;\n  tokenAmountOut_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  tokenIn?: InputMaybe<Scalars['Bytes']>;\n  tokenInSym?: InputMaybe<Scalars['String']>;\n  tokenInSym_contains?: InputMaybe<Scalars['String']>;\n  tokenInSym_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_gt?: InputMaybe<Scalars['String']>;\n  tokenInSym_gte?: InputMaybe<Scalars['String']>;\n  tokenInSym_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInSym_lt?: InputMaybe<Scalars['String']>;\n  tokenInSym_lte?: InputMaybe<Scalars['String']>;\n  tokenInSym_not?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_contains?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_ends_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenInSym_not_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenInSym_starts_with?: InputMaybe<Scalars['String']>;\n  tokenInSym_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenIn_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_gt?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_gte?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenIn_lt?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_lte?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenIn_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenOut?: InputMaybe<Scalars['Bytes']>;\n  tokenOutSym?: InputMaybe<Scalars['String']>;\n  tokenOutSym_contains?: InputMaybe<Scalars['String']>;\n  tokenOutSym_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_ends_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_gt?: InputMaybe<Scalars['String']>;\n  tokenOutSym_gte?: InputMaybe<Scalars['String']>;\n  tokenOutSym_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenOutSym_lt?: InputMaybe<Scalars['String']>;\n  tokenOutSym_lte?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_contains?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_ends_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_in?: InputMaybe<Array<Scalars['String']>>;\n  tokenOutSym_not_starts_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOutSym_starts_with?: InputMaybe<Scalars['String']>;\n  tokenOutSym_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokenOut_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_gt?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_gte?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tokenOut_lt?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_lte?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tokenOut_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx?: InputMaybe<Scalars['Bytes']>;\n  tx_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_gt?: InputMaybe<Scalars['Bytes']>;\n  tx_gte?: InputMaybe<Scalars['Bytes']>;\n  tx_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  tx_lt?: InputMaybe<Scalars['Bytes']>;\n  tx_lte?: InputMaybe<Scalars['Bytes']>;\n  tx_not?: InputMaybe<Scalars['Bytes']>;\n  tx_not_contains?: InputMaybe<Scalars['Bytes']>;\n  tx_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_?: InputMaybe<User_Filter>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  valueUSD?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  valueUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  valueUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Swap_OrderBy {\n  Caller = 'caller',\n  Id = 'id',\n  PoolId = 'poolId',\n  Timestamp = 'timestamp',\n  TokenAmountIn = 'tokenAmountIn',\n  TokenAmountOut = 'tokenAmountOut',\n  TokenIn = 'tokenIn',\n  TokenInSym = 'tokenInSym',\n  TokenOut = 'tokenOut',\n  TokenOutSym = 'tokenOutSym',\n  Tx = 'tx',\n  UserAddress = 'userAddress',\n  ValueUsd = 'valueUSD'\n}\n\nexport type Token = {\n  __typename?: 'Token';\n  address: Scalars['String'];\n  decimals: Scalars['Int'];\n  id: Scalars['ID'];\n  latestFXPrice?: Maybe<Scalars['BigDecimal']>;\n  latestPrice?: Maybe<LatestPrice>;\n  latestUSDPrice?: Maybe<Scalars['BigDecimal']>;\n  name?: Maybe<Scalars['String']>;\n  pool?: Maybe<Pool>;\n  symbol?: Maybe<Scalars['String']>;\n  totalBalanceNotional: Scalars['BigDecimal'];\n  totalBalanceUSD: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalVolumeNotional: Scalars['BigDecimal'];\n  totalVolumeUSD: Scalars['BigDecimal'];\n};\n\nexport type TokenPrice = {\n  __typename?: 'TokenPrice';\n  amount: Scalars['BigDecimal'];\n  asset: Scalars['Bytes'];\n  block: Scalars['BigInt'];\n  id: Scalars['ID'];\n  poolId: Pool;\n  price: Scalars['BigDecimal'];\n  pricingAsset: Scalars['Bytes'];\n  timestamp: Scalars['Int'];\n};\n\nexport type TokenPrice_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  amount?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_gte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  amount_lt?: InputMaybe<Scalars['BigDecimal']>;\n  amount_lte?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not?: InputMaybe<Scalars['BigDecimal']>;\n  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  asset?: InputMaybe<Scalars['Bytes']>;\n  asset_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_gt?: InputMaybe<Scalars['Bytes']>;\n  asset_gte?: InputMaybe<Scalars['Bytes']>;\n  asset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  asset_lt?: InputMaybe<Scalars['Bytes']>;\n  asset_lte?: InputMaybe<Scalars['Bytes']>;\n  asset_not?: InputMaybe<Scalars['Bytes']>;\n  asset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  asset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  block?: InputMaybe<Scalars['BigInt']>;\n  block_gt?: InputMaybe<Scalars['BigInt']>;\n  block_gte?: InputMaybe<Scalars['BigInt']>;\n  block_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  block_lt?: InputMaybe<Scalars['BigInt']>;\n  block_lte?: InputMaybe<Scalars['BigInt']>;\n  block_not?: InputMaybe<Scalars['BigInt']>;\n  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['String']>;\n  poolId_?: InputMaybe<Pool_Filter>;\n  poolId_contains?: InputMaybe<Scalars['String']>;\n  poolId_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_gt?: InputMaybe<Scalars['String']>;\n  poolId_gte?: InputMaybe<Scalars['String']>;\n  poolId_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_lt?: InputMaybe<Scalars['String']>;\n  poolId_lte?: InputMaybe<Scalars['String']>;\n  poolId_not?: InputMaybe<Scalars['String']>;\n  poolId_not_contains?: InputMaybe<Scalars['String']>;\n  poolId_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with?: InputMaybe<Scalars['String']>;\n  poolId_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['String']>>;\n  poolId_not_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  poolId_starts_with?: InputMaybe<Scalars['String']>;\n  poolId_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  price?: InputMaybe<Scalars['BigDecimal']>;\n  price_gt?: InputMaybe<Scalars['BigDecimal']>;\n  price_gte?: InputMaybe<Scalars['BigDecimal']>;\n  price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  price_lt?: InputMaybe<Scalars['BigDecimal']>;\n  price_lte?: InputMaybe<Scalars['BigDecimal']>;\n  price_not?: InputMaybe<Scalars['BigDecimal']>;\n  price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  pricingAsset?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_gte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pricingAsset_lt?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_lte?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_contains?: InputMaybe<Scalars['Bytes']>;\n  pricingAsset_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n};\n\nexport enum TokenPrice_OrderBy {\n  Amount = 'amount',\n  Asset = 'asset',\n  Block = 'block',\n  Id = 'id',\n  PoolId = 'poolId',\n  Price = 'price',\n  PricingAsset = 'pricingAsset',\n  Timestamp = 'timestamp'\n}\n\nexport type TokenSnapshot = {\n  __typename?: 'TokenSnapshot';\n  id: Scalars['ID'];\n  timestamp: Scalars['Int'];\n  token: Token;\n  totalBalanceNotional: Scalars['BigDecimal'];\n  totalBalanceUSD: Scalars['BigDecimal'];\n  totalSwapCount: Scalars['BigInt'];\n  totalVolumeNotional: Scalars['BigDecimal'];\n  totalVolumeUSD: Scalars['BigDecimal'];\n};\n\nexport type TokenSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  token?: InputMaybe<Scalars['String']>;\n  token_?: InputMaybe<Token_Filter>;\n  token_contains?: InputMaybe<Scalars['String']>;\n  token_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_ends_with?: InputMaybe<Scalars['String']>;\n  token_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_gt?: InputMaybe<Scalars['String']>;\n  token_gte?: InputMaybe<Scalars['String']>;\n  token_in?: InputMaybe<Array<Scalars['String']>>;\n  token_lt?: InputMaybe<Scalars['String']>;\n  token_lte?: InputMaybe<Scalars['String']>;\n  token_not?: InputMaybe<Scalars['String']>;\n  token_not_contains?: InputMaybe<Scalars['String']>;\n  token_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token_not_ends_with?: InputMaybe<Scalars['String']>;\n  token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token_not_starts_with?: InputMaybe<Scalars['String']>;\n  token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token_starts_with?: InputMaybe<Scalars['String']>;\n  token_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalBalanceNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalVolumeNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TokenSnapshot_OrderBy {\n  Id = 'id',\n  Timestamp = 'timestamp',\n  Token = 'token',\n  TotalBalanceNotional = 'totalBalanceNotional',\n  TotalBalanceUsd = 'totalBalanceUSD',\n  TotalSwapCount = 'totalSwapCount',\n  TotalVolumeNotional = 'totalVolumeNotional',\n  TotalVolumeUsd = 'totalVolumeUSD'\n}\n\nexport type Token_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['String']>;\n  address_contains?: InputMaybe<Scalars['String']>;\n  address_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_ends_with?: InputMaybe<Scalars['String']>;\n  address_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_gt?: InputMaybe<Scalars['String']>;\n  address_gte?: InputMaybe<Scalars['String']>;\n  address_in?: InputMaybe<Array<Scalars['String']>>;\n  address_lt?: InputMaybe<Scalars['String']>;\n  address_lte?: InputMaybe<Scalars['String']>;\n  address_not?: InputMaybe<Scalars['String']>;\n  address_not_contains?: InputMaybe<Scalars['String']>;\n  address_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  address_not_ends_with?: InputMaybe<Scalars['String']>;\n  address_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  address_not_in?: InputMaybe<Array<Scalars['String']>>;\n  address_not_starts_with?: InputMaybe<Scalars['String']>;\n  address_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  address_starts_with?: InputMaybe<Scalars['String']>;\n  address_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  latestFXPrice?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_gt?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_gte?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  latestFXPrice_lt?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_lte?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_not?: InputMaybe<Scalars['BigDecimal']>;\n  latestFXPrice_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  latestPrice?: InputMaybe<Scalars['String']>;\n  latestPrice_?: InputMaybe<LatestPrice_Filter>;\n  latestPrice_contains?: InputMaybe<Scalars['String']>;\n  latestPrice_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_ends_with?: InputMaybe<Scalars['String']>;\n  latestPrice_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_gt?: InputMaybe<Scalars['String']>;\n  latestPrice_gte?: InputMaybe<Scalars['String']>;\n  latestPrice_in?: InputMaybe<Array<Scalars['String']>>;\n  latestPrice_lt?: InputMaybe<Scalars['String']>;\n  latestPrice_lte?: InputMaybe<Scalars['String']>;\n  latestPrice_not?: InputMaybe<Scalars['String']>;\n  latestPrice_not_contains?: InputMaybe<Scalars['String']>;\n  latestPrice_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_not_ends_with?: InputMaybe<Scalars['String']>;\n  latestPrice_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_not_in?: InputMaybe<Array<Scalars['String']>>;\n  latestPrice_not_starts_with?: InputMaybe<Scalars['String']>;\n  latestPrice_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  latestPrice_starts_with?: InputMaybe<Scalars['String']>;\n  latestPrice_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  latestUSDPrice?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_gt?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_gte?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  latestUSDPrice_lt?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_lte?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_not?: InputMaybe<Scalars['BigDecimal']>;\n  latestUSDPrice_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool?: InputMaybe<Scalars['String']>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalBalanceNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalBalanceUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalBalanceUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapCount?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_gte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalSwapCount_lt?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_lte?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not?: InputMaybe<Scalars['BigInt']>;\n  totalSwapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  totalVolumeNotional?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeNotional_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeNotional_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalVolumeUSD_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalVolumeUSD_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum Token_OrderBy {\n  Address = 'address',\n  Decimals = 'decimals',\n  Id = 'id',\n  LatestFxPrice = 'latestFXPrice',\n  LatestPrice = 'latestPrice',\n  LatestUsdPrice = 'latestUSDPrice',\n  Name = 'name',\n  Pool = 'pool',\n  Symbol = 'symbol',\n  TotalBalanceNotional = 'totalBalanceNotional',\n  TotalBalanceUsd = 'totalBalanceUSD',\n  TotalSwapCount = 'totalSwapCount',\n  TotalVolumeNotional = 'totalVolumeNotional',\n  TotalVolumeUsd = 'totalVolumeUSD'\n}\n\nexport type TradePair = {\n  __typename?: 'TradePair';\n  /** Token Address - Token Address */\n  id: Scalars['ID'];\n  token0: Token;\n  token1: Token;\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\nexport type TradePairSnapshot = {\n  __typename?: 'TradePairSnapshot';\n  id: Scalars['ID'];\n  pair: TradePair;\n  timestamp: Scalars['Int'];\n  totalSwapFee: Scalars['BigDecimal'];\n  totalSwapVolume: Scalars['BigDecimal'];\n};\n\nexport type TradePairSnapshot_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  pair?: InputMaybe<Scalars['String']>;\n  pair_?: InputMaybe<TradePair_Filter>;\n  pair_contains?: InputMaybe<Scalars['String']>;\n  pair_contains_nocase?: InputMaybe<Scalars['String']>;\n  pair_ends_with?: InputMaybe<Scalars['String']>;\n  pair_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_gt?: InputMaybe<Scalars['String']>;\n  pair_gte?: InputMaybe<Scalars['String']>;\n  pair_in?: InputMaybe<Array<Scalars['String']>>;\n  pair_lt?: InputMaybe<Scalars['String']>;\n  pair_lte?: InputMaybe<Scalars['String']>;\n  pair_not?: InputMaybe<Scalars['String']>;\n  pair_not_contains?: InputMaybe<Scalars['String']>;\n  pair_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pair_not_ends_with?: InputMaybe<Scalars['String']>;\n  pair_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pair_not_starts_with?: InputMaybe<Scalars['String']>;\n  pair_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pair_starts_with?: InputMaybe<Scalars['String']>;\n  pair_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  timestamp?: InputMaybe<Scalars['Int']>;\n  timestamp_gt?: InputMaybe<Scalars['Int']>;\n  timestamp_gte?: InputMaybe<Scalars['Int']>;\n  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  timestamp_lt?: InputMaybe<Scalars['Int']>;\n  timestamp_lte?: InputMaybe<Scalars['Int']>;\n  timestamp_not?: InputMaybe<Scalars['Int']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TradePairSnapshot_OrderBy {\n  Id = 'id',\n  Pair = 'pair',\n  Timestamp = 'timestamp',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type TradePair_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  token0?: InputMaybe<Scalars['String']>;\n  token0_?: InputMaybe<Token_Filter>;\n  token0_contains?: InputMaybe<Scalars['String']>;\n  token0_contains_nocase?: InputMaybe<Scalars['String']>;\n  token0_ends_with?: InputMaybe<Scalars['String']>;\n  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_gt?: InputMaybe<Scalars['String']>;\n  token0_gte?: InputMaybe<Scalars['String']>;\n  token0_in?: InputMaybe<Array<Scalars['String']>>;\n  token0_lt?: InputMaybe<Scalars['String']>;\n  token0_lte?: InputMaybe<Scalars['String']>;\n  token0_not?: InputMaybe<Scalars['String']>;\n  token0_not_contains?: InputMaybe<Scalars['String']>;\n  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token0_not_ends_with?: InputMaybe<Scalars['String']>;\n  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token0_not_starts_with?: InputMaybe<Scalars['String']>;\n  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token0_starts_with?: InputMaybe<Scalars['String']>;\n  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token1?: InputMaybe<Scalars['String']>;\n  token1_?: InputMaybe<Token_Filter>;\n  token1_contains?: InputMaybe<Scalars['String']>;\n  token1_contains_nocase?: InputMaybe<Scalars['String']>;\n  token1_ends_with?: InputMaybe<Scalars['String']>;\n  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_gt?: InputMaybe<Scalars['String']>;\n  token1_gte?: InputMaybe<Scalars['String']>;\n  token1_in?: InputMaybe<Array<Scalars['String']>>;\n  token1_lt?: InputMaybe<Scalars['String']>;\n  token1_lte?: InputMaybe<Scalars['String']>;\n  token1_not?: InputMaybe<Scalars['String']>;\n  token1_not_contains?: InputMaybe<Scalars['String']>;\n  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  token1_not_ends_with?: InputMaybe<Scalars['String']>;\n  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_not_in?: InputMaybe<Array<Scalars['String']>>;\n  token1_not_starts_with?: InputMaybe<Scalars['String']>;\n  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  token1_starts_with?: InputMaybe<Scalars['String']>;\n  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalSwapFee?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapFee_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapFee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSwapVolume_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSwapVolume_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum TradePair_OrderBy {\n  Id = 'id',\n  Token0 = 'token0',\n  Token1 = 'token1',\n  TotalSwapFee = 'totalSwapFee',\n  TotalSwapVolume = 'totalSwapVolume'\n}\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  sharesOwned?: Maybe<Array<PoolShare>>;\n  swaps?: Maybe<Array<Swap>>;\n  userInternalBalances?: Maybe<Array<UserInternalBalance>>;\n};\n\n\nexport type UserSharesOwnedArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n};\n\n\nexport type UserSwapsArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Swap_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<Swap_Filter>;\n};\n\n\nexport type UserUserInternalBalancesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<UserInternalBalance_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<UserInternalBalance_Filter>;\n};\n\nexport type UserInternalBalance = {\n  __typename?: 'UserInternalBalance';\n  balance: Scalars['BigDecimal'];\n  id: Scalars['ID'];\n  token: Scalars['Bytes'];\n  userAddress?: Maybe<User>;\n};\n\nexport type UserInternalBalance_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  token?: InputMaybe<Scalars['Bytes']>;\n  token_contains?: InputMaybe<Scalars['Bytes']>;\n  token_gt?: InputMaybe<Scalars['Bytes']>;\n  token_gte?: InputMaybe<Scalars['Bytes']>;\n  token_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  token_lt?: InputMaybe<Scalars['Bytes']>;\n  token_lte?: InputMaybe<Scalars['Bytes']>;\n  token_not?: InputMaybe<Scalars['Bytes']>;\n  token_not_contains?: InputMaybe<Scalars['Bytes']>;\n  token_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  userAddress?: InputMaybe<Scalars['String']>;\n  userAddress_?: InputMaybe<User_Filter>;\n  userAddress_contains?: InputMaybe<Scalars['String']>;\n  userAddress_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_gt?: InputMaybe<Scalars['String']>;\n  userAddress_gte?: InputMaybe<Scalars['String']>;\n  userAddress_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_lt?: InputMaybe<Scalars['String']>;\n  userAddress_lte?: InputMaybe<Scalars['String']>;\n  userAddress_not?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains?: InputMaybe<Scalars['String']>;\n  userAddress_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_not_in?: InputMaybe<Array<Scalars['String']>>;\n  userAddress_not_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with?: InputMaybe<Scalars['String']>;\n  userAddress_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum UserInternalBalance_OrderBy {\n  Balance = 'balance',\n  Id = 'id',\n  Token = 'token',\n  UserAddress = 'userAddress'\n}\n\nexport type User_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  sharesOwned_?: InputMaybe<PoolShare_Filter>;\n  swaps_?: InputMaybe<Swap_Filter>;\n  userInternalBalances_?: InputMaybe<UserInternalBalance_Filter>;\n};\n\nexport enum User_OrderBy {\n  Id = 'id',\n  SharesOwned = 'sharesOwned',\n  Swaps = 'swaps',\n  UserInternalBalances = 'userInternalBalances'\n}\n\nexport type _Block_ = {\n  __typename?: '_Block_';\n  /** The hash of the block */\n  hash?: Maybe<Scalars['Bytes']>;\n  /** The block number */\n  number: Scalars['Int'];\n  /** Integer representation of the timestamp stored in blocks for the chain */\n  timestamp?: Maybe<Scalars['Int']>;\n};\n\n/** The type for the top-level _meta field */\nexport type _Meta_ = {\n  __typename?: '_Meta_';\n  /**\n   * Information about a specific subgraph block. The hash of the block\n   * will be null if the _meta field has a block constraint that asks for\n   * a block number. It will be filled if the _meta field has no block constraint\n   * and therefore asks for the latest  block\n   *\n   */\n  block: _Block_;\n  /** The deployment ID */\n  deployment: Scalars['String'];\n  /** If `true`, the subgraph encountered indexing errors at some past block */\n  hasIndexingErrors: Scalars['Boolean'];\n};\n\nexport enum _SubgraphErrorPolicy_ {\n  /** Data will be returned even if the subgraph has indexing errors */\n  Allow = 'allow',\n  /** If the subgraph has indexing errors, data will be omitted. The default. */\n  Deny = 'deny'\n}\n\nexport type PoolShareQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolShareQuery = { __typename?: 'Query', poolShare?: { __typename?: 'PoolShare', id: string, balance: string, userAddress: { __typename?: 'User', id: string }, poolId: { __typename?: 'Pool', id: string, address: string } } | null };\n\nexport type PoolSharesQueryVariables = Exact<{\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<PoolShare_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolSharesQuery = { __typename?: 'Query', poolShares: Array<{ __typename?: 'PoolShare', id: string, balance: string, userAddress: { __typename?: 'User', id: string }, poolId: { __typename?: 'Pool', id: string, address: string } }> };\n\nexport type SubgraphPoolShareFragment = { __typename?: 'PoolShare', id: string, balance: string, userAddress: { __typename?: 'User', id: string }, poolId: { __typename?: 'Pool', id: string, address: string } };\n\nexport type PoolsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolsQuery = { __typename?: 'Query', pools: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null }> };\n\nexport type AllPoolsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type AllPoolsQuery = { __typename?: 'Query', pool0: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null }>, pool1000: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null }>, pool2000: Array<{ __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null }> };\n\nexport type PoolQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolQuery = { __typename?: 'Query', pool?: { __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null } | null };\n\nexport type SubgraphPoolFragment = { __typename?: 'Pool', id: string, address: string, poolType?: string | null, poolTypeVersion?: number | null, factory?: string | null, strategyType: number, symbol?: string | null, name?: string | null, swapEnabled: boolean, swapFee: string, protocolYieldFeeCache?: string | null, protocolSwapFeeCache?: string | null, owner?: string | null, totalWeight?: string | null, totalSwapVolume: string, totalSwapFee: string, totalLiquidity: string, totalShares: string, swapsCount: string, holdersCount: string, tokensList: Array<string>, amp?: string | null, expiryTime?: string | null, unitSeconds?: string | null, createTime: number, principalToken?: string | null, baseToken?: string | null, wrappedIndex?: number | null, mainIndex?: number | null, lowerTarget?: string | null, upperTarget?: string | null, sqrtAlpha?: string | null, sqrtBeta?: string | null, root3Alpha?: string | null, tokens?: Array<{ __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } }> | null, priceRateProviders?: Array<{ __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } }> | null };\n\nexport type SubgraphPoolTokenFragment = { __typename?: 'PoolToken', id: string, symbol: string, name: string, decimals: number, address: string, balance: string, managedBalance: string, weight?: string | null, priceRate: string, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null } };\n\nexport type SubgraphSubPoolTokenFragment = { __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null };\n\nexport type TokenAttrsFragment = { __typename?: 'Token', address: string, symbol?: string | null, decimals: number };\n\nexport type SubgraphSubPoolFragment = { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null };\n\nexport type TokenTreeFragment = { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null, tokens?: Array<{ __typename?: 'PoolToken', address: string, balance: string, weight?: string | null, priceRate: string, symbol: string, decimals: number, isExemptFromYieldProtocolFee?: boolean | null, token: { __typename?: 'Token', latestUSDPrice?: string | null, pool?: { __typename?: 'Pool', id: string, totalShares: string, address: string, poolType?: string | null, mainIndex?: number | null } | null } }> | null } | null } }> | null } | null };\n\nexport type SubgraphPriceRateProviderFragment = { __typename?: 'PriceRateProvider', address: string, token: { __typename?: 'PoolToken', address: string } };\n\nexport type PoolHistoricalLiquiditiesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolHistoricalLiquidity_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<PoolHistoricalLiquidity_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolHistoricalLiquiditiesQuery = { __typename?: 'Query', poolHistoricalLiquidities: Array<{ __typename?: 'PoolHistoricalLiquidity', id: string, poolTotalShares: string, poolLiquidity: string, poolShareValue: string, pricingAsset: string, block: string, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type PoolSnapshotsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<PoolSnapshot_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<PoolSnapshot_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolSnapshotsQuery = { __typename?: 'Query', poolSnapshots: Array<{ __typename?: 'PoolSnapshot', id: string, totalShares: string, swapVolume: string, swapFees: string, timestamp: number, pool: { __typename?: 'Pool', id: string } }> };\n\nexport type SubgraphPoolSnapshotFragment = { __typename?: 'PoolSnapshot', id: string, totalShares: string, swapVolume: string, swapFees: string, timestamp: number, pool: { __typename?: 'Pool', id: string } };\n\nexport type JoinExitsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<JoinExit_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<JoinExit_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type JoinExitsQuery = { __typename?: 'Query', joinExits: Array<{ __typename?: 'JoinExit', amounts: Array<string>, id: string, sender: string, timestamp: number, tx: string, type: InvestType, user: { __typename?: 'User', id: string }, pool: { __typename?: 'Pool', id: string, tokensList: Array<string> } }> };\n\nexport type SubgraphJoinExitFragment = { __typename?: 'JoinExit', amounts: Array<string>, id: string, sender: string, timestamp: number, tx: string, type: InvestType, user: { __typename?: 'User', id: string }, pool: { __typename?: 'Pool', id: string, tokensList: Array<string> } };\n\nexport type BalancersQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Balancer_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Balancer_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type BalancersQuery = { __typename?: 'Query', balancers: Array<{ __typename?: 'Balancer', id: string, totalLiquidity: string, totalSwapVolume: string, totalSwapFee: string, totalSwapCount: string, poolCount: number }> };\n\nexport type SubgraphBalancerFragment = { __typename?: 'Balancer', id: string, totalLiquidity: string, totalSwapVolume: string, totalSwapFee: string, totalSwapCount: string, poolCount: number };\n\nexport type TokenPricesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<TokenPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<TokenPrice_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type TokenPricesQuery = { __typename?: 'Query', tokenPrices: Array<{ __typename?: 'TokenPrice', id: string, asset: string, amount: string, pricingAsset: string, price: string, block: string, timestamp: number, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type SubgraphTokenPriceFragment = { __typename?: 'TokenPrice', id: string, asset: string, amount: string, pricingAsset: string, price: string, block: string, timestamp: number, poolId: { __typename?: 'Pool', id: string } };\n\nexport type TokenLatestPricesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LatestPrice_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<LatestPrice_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type TokenLatestPricesQuery = { __typename?: 'Query', latestPrices: Array<{ __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } }> };\n\nexport type TokenLatestPriceQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type TokenLatestPriceQuery = { __typename?: 'Query', latestPrice?: { __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } } | null };\n\nexport type SubgraphTokenLatestPriceFragment = { __typename?: 'LatestPrice', id: string, asset: string, price: string, pricingAsset: string, poolId: { __typename?: 'Pool', id: string } };\n\nexport type UserQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type UserQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null } | null };\n\nexport type UsersQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<User_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null }> };\n\nexport type SubgraphUserFragment = { __typename?: 'User', id: string, sharesOwned?: Array<{ __typename?: 'PoolShare', balance: string, poolId: { __typename?: 'Pool', id: string } }> | null };\n\nexport const SubgraphPoolShareFragmentDoc = gql`\n    fragment SubgraphPoolShare on PoolShare {\n  id\n  balance\n  userAddress {\n    id\n  }\n  poolId {\n    id\n    address\n  }\n}\n    `;\nexport const SubgraphSubPoolFragmentDoc = gql`\n    fragment SubgraphSubPool on Pool {\n  id\n  totalShares\n  address\n  poolType\n  mainIndex\n}\n    `;\nexport const SubgraphSubPoolTokenFragmentDoc = gql`\n    fragment SubgraphSubPoolToken on PoolToken {\n  address\n  balance\n  weight\n  priceRate\n  symbol\n  decimals\n  isExemptFromYieldProtocolFee\n}\n    `;\nexport const TokenTreeFragmentDoc = gql`\n    fragment TokenTree on Token {\n  latestUSDPrice\n  pool {\n    ...SubgraphSubPool\n    tokens {\n      ...SubgraphSubPoolToken\n      token {\n        latestUSDPrice\n        pool {\n          ...SubgraphSubPool\n          tokens {\n            ...SubgraphSubPoolToken\n            token {\n              latestUSDPrice\n              pool {\n                ...SubgraphSubPool\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    ${SubgraphSubPoolFragmentDoc}\n${SubgraphSubPoolTokenFragmentDoc}`;\nexport const SubgraphPoolTokenFragmentDoc = gql`\n    fragment SubgraphPoolToken on PoolToken {\n  id\n  symbol\n  name\n  decimals\n  address\n  balance\n  managedBalance\n  weight\n  priceRate\n  isExemptFromYieldProtocolFee\n  token {\n    ...TokenTree\n  }\n}\n    ${TokenTreeFragmentDoc}`;\nexport const SubgraphPriceRateProviderFragmentDoc = gql`\n    fragment SubgraphPriceRateProvider on PriceRateProvider {\n  address\n  token {\n    address\n  }\n}\n    `;\nexport const SubgraphPoolFragmentDoc = gql`\n    fragment SubgraphPool on Pool {\n  id\n  address\n  poolType\n  poolTypeVersion\n  factory\n  strategyType\n  symbol\n  name\n  swapEnabled\n  swapFee\n  protocolYieldFeeCache\n  protocolSwapFeeCache\n  owner\n  totalWeight\n  totalSwapVolume\n  totalSwapFee\n  totalLiquidity\n  totalShares\n  tokens(first: 100) {\n    ...SubgraphPoolToken\n  }\n  swapsCount\n  holdersCount\n  tokensList\n  amp\n  priceRateProviders(first: 100) {\n    ...SubgraphPriceRateProvider\n  }\n  expiryTime\n  unitSeconds\n  createTime\n  principalToken\n  baseToken\n  wrappedIndex\n  mainIndex\n  lowerTarget\n  upperTarget\n  sqrtAlpha\n  sqrtBeta\n  root3Alpha\n}\n    ${SubgraphPoolTokenFragmentDoc}\n${SubgraphPriceRateProviderFragmentDoc}`;\nexport const TokenAttrsFragmentDoc = gql`\n    fragment TokenAttrs on Token {\n  address\n  symbol\n  decimals\n}\n    `;\nexport const SubgraphPoolSnapshotFragmentDoc = gql`\n    fragment SubgraphPoolSnapshot on PoolSnapshot {\n  id\n  pool {\n    id\n  }\n  totalShares\n  swapVolume\n  swapFees\n  timestamp\n}\n    `;\nexport const SubgraphJoinExitFragmentDoc = gql`\n    fragment SubgraphJoinExit on JoinExit {\n  amounts\n  id\n  sender\n  timestamp\n  tx\n  type\n  user {\n    id\n  }\n  pool {\n    id\n    tokensList\n  }\n}\n    `;\nexport const SubgraphBalancerFragmentDoc = gql`\n    fragment SubgraphBalancer on Balancer {\n  id\n  totalLiquidity\n  totalSwapVolume\n  totalSwapFee\n  totalSwapCount\n  poolCount\n}\n    `;\nexport const SubgraphTokenPriceFragmentDoc = gql`\n    fragment SubgraphTokenPrice on TokenPrice {\n  id\n  poolId {\n    id\n  }\n  asset\n  amount\n  pricingAsset\n  price\n  block\n  timestamp\n}\n    `;\nexport const SubgraphTokenLatestPriceFragmentDoc = gql`\n    fragment SubgraphTokenLatestPrice on LatestPrice {\n  id\n  asset\n  price\n  poolId {\n    id\n  }\n  pricingAsset\n}\n    `;\nexport const SubgraphUserFragmentDoc = gql`\n    fragment SubgraphUser on User {\n  id\n  sharesOwned(first: 1000) {\n    balance\n    poolId {\n      id\n    }\n  }\n}\n    `;\nexport const PoolShareDocument = gql`\n    query PoolShare($id: ID!, $block: Block_height) {\n  poolShare(id: $id, block: $block) {\n    ...SubgraphPoolShare\n  }\n}\n    ${SubgraphPoolShareFragmentDoc}`;\nexport const PoolSharesDocument = gql`\n    query PoolShares($first: Int, $orderBy: PoolShare_orderBy, $orderDirection: OrderDirection, $skip: Int, $where: PoolShare_filter, $block: Block_height) {\n  poolShares(\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    skip: $skip\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolShare\n  }\n}\n    ${SubgraphPoolShareFragmentDoc}`;\nexport const PoolsDocument = gql`\n    query Pools($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pools(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const AllPoolsDocument = gql`\n    query AllPools($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pool0: pools(\n    first: 1000\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n  pool1000: pools(\n    first: 1000\n    skip: 1000\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n  pool2000: pools(\n    first: 1000\n    skip: 2000\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const PoolDocument = gql`\n    query Pool($id: ID!, $block: Block_height) {\n  pool(id: $id, block: $block) {\n    ...SubgraphPool\n  }\n}\n    ${SubgraphPoolFragmentDoc}`;\nexport const PoolHistoricalLiquiditiesDocument = gql`\n    query PoolHistoricalLiquidities($skip: Int, $first: Int, $orderBy: PoolHistoricalLiquidity_orderBy, $orderDirection: OrderDirection, $where: PoolHistoricalLiquidity_filter, $block: Block_height) {\n  poolHistoricalLiquidities(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    id\n    poolId {\n      id\n    }\n    poolTotalShares\n    poolLiquidity\n    poolShareValue\n    pricingAsset\n    block\n  }\n}\n    `;\nexport const PoolSnapshotsDocument = gql`\n    query PoolSnapshots($skip: Int, $first: Int, $orderBy: PoolSnapshot_orderBy, $orderDirection: OrderDirection, $where: PoolSnapshot_filter, $block: Block_height) {\n  poolSnapshots(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolSnapshot\n  }\n}\n    ${SubgraphPoolSnapshotFragmentDoc}`;\nexport const JoinExitsDocument = gql`\n    query JoinExits($skip: Int, $first: Int, $orderBy: JoinExit_orderBy, $orderDirection: OrderDirection, $where: JoinExit_filter, $block: Block_height) {\n  joinExits(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphJoinExit\n  }\n}\n    ${SubgraphJoinExitFragmentDoc}`;\nexport const BalancersDocument = gql`\n    query Balancers($skip: Int, $first: Int, $orderBy: Balancer_orderBy, $orderDirection: OrderDirection, $where: Balancer_filter, $block: Block_height) {\n  balancers(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphBalancer\n  }\n}\n    ${SubgraphBalancerFragmentDoc}`;\nexport const TokenPricesDocument = gql`\n    query TokenPrices($skip: Int, $first: Int, $orderBy: TokenPrice_orderBy, $orderDirection: OrderDirection, $where: TokenPrice_filter, $block: Block_height) {\n  tokenPrices(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphTokenPrice\n  }\n}\n    ${SubgraphTokenPriceFragmentDoc}`;\nexport const TokenLatestPricesDocument = gql`\n    query TokenLatestPrices($skip: Int, $first: Int, $orderBy: LatestPrice_orderBy, $orderDirection: OrderDirection, $where: LatestPrice_filter, $block: Block_height) {\n  latestPrices(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphTokenLatestPrice\n  }\n}\n    ${SubgraphTokenLatestPriceFragmentDoc}`;\nexport const TokenLatestPriceDocument = gql`\n    query TokenLatestPrice($id: ID!) {\n  latestPrice(id: $id) {\n    ...SubgraphTokenLatestPrice\n  }\n}\n    ${SubgraphTokenLatestPriceFragmentDoc}`;\nexport const UserDocument = gql`\n    query User($id: ID!, $block: Block_height) {\n  user(id: $id, block: $block) {\n    ...SubgraphUser\n  }\n}\n    ${SubgraphUserFragmentDoc}`;\nexport const UsersDocument = gql`\n    query Users($skip: Int, $first: Int, $orderBy: User_orderBy, $orderDirection: OrderDirection, $where: User_filter, $block: Block_height) {\n  users(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphUser\n  }\n}\n    ${SubgraphUserFragmentDoc}`;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    PoolShare(variables: PoolShareQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolShareQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolShareQuery>(PoolShareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolShare', 'query');\n    },\n    PoolShares(variables?: PoolSharesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolSharesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolSharesQuery>(PoolSharesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolShares', 'query');\n    },\n    Pools(variables?: PoolsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolsQuery>(PoolsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pools', 'query');\n    },\n    AllPools(variables?: AllPoolsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<AllPoolsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<AllPoolsQuery>(AllPoolsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'AllPools', 'query');\n    },\n    Pool(variables: PoolQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolQuery>(PoolDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pool', 'query');\n    },\n    PoolHistoricalLiquidities(variables?: PoolHistoricalLiquiditiesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolHistoricalLiquiditiesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolHistoricalLiquiditiesQuery>(PoolHistoricalLiquiditiesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolHistoricalLiquidities', 'query');\n    },\n    PoolSnapshots(variables?: PoolSnapshotsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolSnapshotsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolSnapshotsQuery>(PoolSnapshotsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolSnapshots', 'query');\n    },\n    JoinExits(variables?: JoinExitsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<JoinExitsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<JoinExitsQuery>(JoinExitsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'JoinExits', 'query');\n    },\n    Balancers(variables?: BalancersQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<BalancersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<BalancersQuery>(BalancersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Balancers', 'query');\n    },\n    TokenPrices(variables?: TokenPricesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenPricesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenPricesQuery>(TokenPricesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenPrices', 'query');\n    },\n    TokenLatestPrices(variables?: TokenLatestPricesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenLatestPricesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenLatestPricesQuery>(TokenLatestPricesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenLatestPrices', 'query');\n    },\n    TokenLatestPrice(variables: TokenLatestPriceQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<TokenLatestPriceQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<TokenLatestPriceQuery>(TokenLatestPriceDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'TokenLatestPrice', 'query');\n    },\n    User(variables: UserQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<UserQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UserQuery>(UserDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'User', 'query');\n    },\n    Users(variables?: UsersQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<UsersQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<UsersQuery>(UsersDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Users', 'query');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { GraphQLClient } from 'graphql-request';\nimport * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  BigDecimal: string;\n  BigInt: string;\n  Bytes: string;\n};\n\nexport type BlockChangedFilter = {\n  number_gte: Scalars['Int'];\n};\n\nexport type Block_Height = {\n  hash?: InputMaybe<Scalars['Bytes']>;\n  number?: InputMaybe<Scalars['Int']>;\n  number_gte?: InputMaybe<Scalars['Int']>;\n};\n\nexport enum Chain {\n  Arbitrum = 'Arbitrum',\n  Optimism = 'Optimism',\n  Polygon = 'Polygon'\n}\n\nexport type Gauge = {\n  __typename?: 'Gauge';\n  /**  Timestamp at which Balancer DAO added the gauge to GaugeController [seconds]  */\n  addedTimestamp: Scalars['Int'];\n  /**  Address of the gauge  */\n  address: Scalars['Bytes'];\n  /**  Equal to: <gaugeAddress>-<typeID>  */\n  id: Scalars['ID'];\n  /**  Reference to LiquidityGauge  */\n  liquidityGauge?: Maybe<LiquidityGauge>;\n  /**  Reference to RootGauge  */\n  rootGauge?: Maybe<RootGauge>;\n  /**  Type of the gauge  */\n  type: GaugeType;\n};\n\nexport type GaugeFactory = {\n  __typename?: 'GaugeFactory';\n  /**  List of gauges created through the factory  */\n  gauges?: Maybe<Array<LiquidityGauge>>;\n  /**  Factory contract address  */\n  id: Scalars['ID'];\n  /**  Number of gauges created through the factory  */\n  numGauges: Scalars['Int'];\n};\n\n\nexport type GaugeFactoryGaugesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n};\n\nexport type GaugeFactory_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  gauges_?: InputMaybe<LiquidityGauge_Filter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  numGauges?: InputMaybe<Scalars['Int']>;\n  numGauges_gt?: InputMaybe<Scalars['Int']>;\n  numGauges_gte?: InputMaybe<Scalars['Int']>;\n  numGauges_in?: InputMaybe<Array<Scalars['Int']>>;\n  numGauges_lt?: InputMaybe<Scalars['Int']>;\n  numGauges_lte?: InputMaybe<Scalars['Int']>;\n  numGauges_not?: InputMaybe<Scalars['Int']>;\n  numGauges_not_in?: InputMaybe<Array<Scalars['Int']>>;\n};\n\nexport enum GaugeFactory_OrderBy {\n  Gauges = 'gauges',\n  Id = 'id',\n  NumGauges = 'numGauges'\n}\n\nexport type GaugeShare = {\n  __typename?: 'GaugeShare';\n  /**  User's balance of gauge deposit tokens  */\n  balance: Scalars['BigDecimal'];\n  /**  Reference to LiquidityGauge entity  */\n  gauge: LiquidityGauge;\n  /**  Equal to: <userAddress>-<gaugeAddress>  */\n  id: Scalars['ID'];\n  /**  Reference to User entity  */\n  user: User;\n};\n\nexport type GaugeShare_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  balance?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  balance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  balance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not?: InputMaybe<Scalars['BigDecimal']>;\n  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<LiquidityGauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_?: InputMaybe<User_Filter>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum GaugeShare_OrderBy {\n  Balance = 'balance',\n  Gauge = 'gauge',\n  Id = 'id',\n  User = 'user'\n}\n\nexport type GaugeType = {\n  __typename?: 'GaugeType';\n  /**  Type ID  */\n  id: Scalars['ID'];\n  /**  Name of the type - empty string if call reverts  */\n  name: Scalars['String'];\n};\n\nexport type GaugeType_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  name?: InputMaybe<Scalars['String']>;\n  name_contains?: InputMaybe<Scalars['String']>;\n  name_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_ends_with?: InputMaybe<Scalars['String']>;\n  name_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_gt?: InputMaybe<Scalars['String']>;\n  name_gte?: InputMaybe<Scalars['String']>;\n  name_in?: InputMaybe<Array<Scalars['String']>>;\n  name_lt?: InputMaybe<Scalars['String']>;\n  name_lte?: InputMaybe<Scalars['String']>;\n  name_not?: InputMaybe<Scalars['String']>;\n  name_not_contains?: InputMaybe<Scalars['String']>;\n  name_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  name_not_ends_with?: InputMaybe<Scalars['String']>;\n  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  name_not_in?: InputMaybe<Array<Scalars['String']>>;\n  name_not_starts_with?: InputMaybe<Scalars['String']>;\n  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  name_starts_with?: InputMaybe<Scalars['String']>;\n  name_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum GaugeType_OrderBy {\n  Id = 'id',\n  Name = 'name'\n}\n\nexport type GaugeVote = {\n  __typename?: 'GaugeVote';\n  /**  Reference to Gauge entity  */\n  gauge: Gauge;\n  /**  Equal to: <userAddress>-<gaugeAddress>  */\n  id: Scalars['ID'];\n  /**  Timestamp at which user voted [seconds]  */\n  timestamp?: Maybe<Scalars['BigInt']>;\n  /**  Reference to User entity  */\n  user: User;\n  /**  Weight of veBAL power user has used to vote  */\n  weight?: Maybe<Scalars['BigDecimal']>;\n};\n\nexport type GaugeVote_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<Gauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  timestamp?: InputMaybe<Scalars['BigInt']>;\n  timestamp_gt?: InputMaybe<Scalars['BigInt']>;\n  timestamp_gte?: InputMaybe<Scalars['BigInt']>;\n  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  timestamp_lt?: InputMaybe<Scalars['BigInt']>;\n  timestamp_lte?: InputMaybe<Scalars['BigInt']>;\n  timestamp_not?: InputMaybe<Scalars['BigInt']>;\n  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_?: InputMaybe<User_Filter>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  weight?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_gte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  weight_lt?: InputMaybe<Scalars['BigDecimal']>;\n  weight_lte?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not?: InputMaybe<Scalars['BigDecimal']>;\n  weight_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum GaugeVote_OrderBy {\n  Gauge = 'gauge',\n  Id = 'id',\n  Timestamp = 'timestamp',\n  User = 'user',\n  Weight = 'weight'\n}\n\nexport type Gauge_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  addedTimestamp?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_gt?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_gte?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;\n  addedTimestamp_lt?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_lte?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_not?: InputMaybe<Scalars['Int']>;\n  addedTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_gt?: InputMaybe<Scalars['Bytes']>;\n  address_gte?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_lt?: InputMaybe<Scalars['Bytes']>;\n  address_lte?: InputMaybe<Scalars['Bytes']>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  liquidityGauge?: InputMaybe<Scalars['String']>;\n  liquidityGauge_?: InputMaybe<LiquidityGauge_Filter>;\n  liquidityGauge_contains?: InputMaybe<Scalars['String']>;\n  liquidityGauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_ends_with?: InputMaybe<Scalars['String']>;\n  liquidityGauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_gt?: InputMaybe<Scalars['String']>;\n  liquidityGauge_gte?: InputMaybe<Scalars['String']>;\n  liquidityGauge_in?: InputMaybe<Array<Scalars['String']>>;\n  liquidityGauge_lt?: InputMaybe<Scalars['String']>;\n  liquidityGauge_lte?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_contains?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  liquidityGauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  liquidityGauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  liquidityGauge_starts_with?: InputMaybe<Scalars['String']>;\n  liquidityGauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge?: InputMaybe<Scalars['String']>;\n  rootGauge_?: InputMaybe<RootGauge_Filter>;\n  rootGauge_contains?: InputMaybe<Scalars['String']>;\n  rootGauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_ends_with?: InputMaybe<Scalars['String']>;\n  rootGauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_gt?: InputMaybe<Scalars['String']>;\n  rootGauge_gte?: InputMaybe<Scalars['String']>;\n  rootGauge_in?: InputMaybe<Array<Scalars['String']>>;\n  rootGauge_lt?: InputMaybe<Scalars['String']>;\n  rootGauge_lte?: InputMaybe<Scalars['String']>;\n  rootGauge_not?: InputMaybe<Scalars['String']>;\n  rootGauge_not_contains?: InputMaybe<Scalars['String']>;\n  rootGauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  rootGauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  rootGauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  rootGauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  rootGauge_starts_with?: InputMaybe<Scalars['String']>;\n  rootGauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  type?: InputMaybe<Scalars['String']>;\n  type_?: InputMaybe<GaugeType_Filter>;\n  type_contains?: InputMaybe<Scalars['String']>;\n  type_contains_nocase?: InputMaybe<Scalars['String']>;\n  type_ends_with?: InputMaybe<Scalars['String']>;\n  type_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  type_gt?: InputMaybe<Scalars['String']>;\n  type_gte?: InputMaybe<Scalars['String']>;\n  type_in?: InputMaybe<Array<Scalars['String']>>;\n  type_lt?: InputMaybe<Scalars['String']>;\n  type_lte?: InputMaybe<Scalars['String']>;\n  type_not?: InputMaybe<Scalars['String']>;\n  type_not_contains?: InputMaybe<Scalars['String']>;\n  type_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  type_not_ends_with?: InputMaybe<Scalars['String']>;\n  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  type_not_in?: InputMaybe<Array<Scalars['String']>>;\n  type_not_starts_with?: InputMaybe<Scalars['String']>;\n  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  type_starts_with?: InputMaybe<Scalars['String']>;\n  type_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum Gauge_OrderBy {\n  AddedTimestamp = 'addedTimestamp',\n  Address = 'address',\n  Id = 'id',\n  LiquidityGauge = 'liquidityGauge',\n  RootGauge = 'rootGauge',\n  Type = 'type'\n}\n\nexport type LiquidityGauge = {\n  __typename?: 'LiquidityGauge';\n  /**  Factory contract address  */\n  factory: GaugeFactory;\n  /**  Reference to Gauge entity - created when LiquidityGauge is added to GaugeController */\n  gauge?: Maybe<Gauge>;\n  /**  LiquidityGauge contract address  */\n  id: Scalars['ID'];\n  /**  Whether Balancer DAO killed the gauge  */\n  isKilled: Scalars['Boolean'];\n  /**  Whether the LiquidityGauge is the most recent added to GaugeController  */\n  isPreferentialGauge: Scalars['Boolean'];\n  /**  Reference to Pool entity  */\n  pool?: Maybe<Pool>;\n  /**  Address of the pool (lp_token of the gauge)  */\n  poolAddress: Scalars['Bytes'];\n  /**  Pool ID if lp_token is a Balancer pool; null otherwise  */\n  poolId?: Maybe<Scalars['Bytes']>;\n  /**  Relative weight cap of the gauge (0.01 = 1%) - V2 factories only  */\n  relativeWeightCap?: Maybe<Scalars['BigDecimal']>;\n  /**  List of user shares  */\n  shares?: Maybe<Array<GaugeShare>>;\n  /**  Address of the contract that streams reward tokens to the gauge - ChildChainLiquidityGauge only  */\n  streamer?: Maybe<Scalars['Bytes']>;\n  /**  ERC20 token symbol  */\n  symbol: Scalars['String'];\n  /**  List of reward tokens depositted in the gauge  */\n  tokens?: Maybe<Array<RewardToken>>;\n  /**  Total of BPTs users have staked in the LiquidityGauge  */\n  totalSupply: Scalars['BigDecimal'];\n};\n\n\nexport type LiquidityGaugeSharesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GaugeShare_Filter>;\n};\n\n\nexport type LiquidityGaugeTokensArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RewardToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<RewardToken_Filter>;\n};\n\nexport type LiquidityGauge_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  factory?: InputMaybe<Scalars['String']>;\n  factory_?: InputMaybe<GaugeFactory_Filter>;\n  factory_contains?: InputMaybe<Scalars['String']>;\n  factory_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_ends_with?: InputMaybe<Scalars['String']>;\n  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_gt?: InputMaybe<Scalars['String']>;\n  factory_gte?: InputMaybe<Scalars['String']>;\n  factory_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_lt?: InputMaybe<Scalars['String']>;\n  factory_lte?: InputMaybe<Scalars['String']>;\n  factory_not?: InputMaybe<Scalars['String']>;\n  factory_not_contains?: InputMaybe<Scalars['String']>;\n  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_not_starts_with?: InputMaybe<Scalars['String']>;\n  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_starts_with?: InputMaybe<Scalars['String']>;\n  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<Gauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  isKilled?: InputMaybe<Scalars['Boolean']>;\n  isKilled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isKilled_not?: InputMaybe<Scalars['Boolean']>;\n  isKilled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isPreferentialGauge?: InputMaybe<Scalars['Boolean']>;\n  isPreferentialGauge_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isPreferentialGauge_not?: InputMaybe<Scalars['Boolean']>;\n  isPreferentialGauge_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  pool?: InputMaybe<Scalars['String']>;\n  poolAddress?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_contains?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_gt?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_gte?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolAddress_lt?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_lte?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_not?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_not_contains?: InputMaybe<Scalars['Bytes']>;\n  poolAddress_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolId?: InputMaybe<Scalars['Bytes']>;\n  poolId_contains?: InputMaybe<Scalars['Bytes']>;\n  poolId_gt?: InputMaybe<Scalars['Bytes']>;\n  poolId_gte?: InputMaybe<Scalars['Bytes']>;\n  poolId_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolId_lt?: InputMaybe<Scalars['Bytes']>;\n  poolId_lte?: InputMaybe<Scalars['Bytes']>;\n  poolId_not?: InputMaybe<Scalars['Bytes']>;\n  poolId_not_contains?: InputMaybe<Scalars['Bytes']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  pool_?: InputMaybe<Pool_Filter>;\n  pool_contains?: InputMaybe<Scalars['String']>;\n  pool_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_ends_with?: InputMaybe<Scalars['String']>;\n  pool_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_gt?: InputMaybe<Scalars['String']>;\n  pool_gte?: InputMaybe<Scalars['String']>;\n  pool_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_lt?: InputMaybe<Scalars['String']>;\n  pool_lte?: InputMaybe<Scalars['String']>;\n  pool_not?: InputMaybe<Scalars['String']>;\n  pool_not_contains?: InputMaybe<Scalars['String']>;\n  pool_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with?: InputMaybe<Scalars['String']>;\n  pool_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_not_in?: InputMaybe<Array<Scalars['String']>>;\n  pool_not_starts_with?: InputMaybe<Scalars['String']>;\n  pool_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  pool_starts_with?: InputMaybe<Scalars['String']>;\n  pool_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  relativeWeightCap?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  relativeWeightCap_lt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_lte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  shares_?: InputMaybe<GaugeShare_Filter>;\n  streamer?: InputMaybe<Scalars['Bytes']>;\n  streamer_contains?: InputMaybe<Scalars['Bytes']>;\n  streamer_gt?: InputMaybe<Scalars['Bytes']>;\n  streamer_gte?: InputMaybe<Scalars['Bytes']>;\n  streamer_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  streamer_lt?: InputMaybe<Scalars['Bytes']>;\n  streamer_lte?: InputMaybe<Scalars['Bytes']>;\n  streamer_not?: InputMaybe<Scalars['Bytes']>;\n  streamer_not_contains?: InputMaybe<Scalars['Bytes']>;\n  streamer_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  tokens_?: InputMaybe<RewardToken_Filter>;\n  totalSupply?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalSupply_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalSupply_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum LiquidityGauge_OrderBy {\n  Factory = 'factory',\n  Gauge = 'gauge',\n  Id = 'id',\n  IsKilled = 'isKilled',\n  IsPreferentialGauge = 'isPreferentialGauge',\n  Pool = 'pool',\n  PoolAddress = 'poolAddress',\n  PoolId = 'poolId',\n  RelativeWeightCap = 'relativeWeightCap',\n  Shares = 'shares',\n  Streamer = 'streamer',\n  Symbol = 'symbol',\n  Tokens = 'tokens',\n  TotalSupply = 'totalSupply'\n}\n\n/** Defines the order direction, either ascending or descending */\nexport enum OrderDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type Pool = {\n  __typename?: 'Pool';\n  /**  Address of the pool (lp_token of the gauge)  */\n  address: Scalars['Bytes'];\n  /**  List of gauges created for the pool  */\n  gauges?: Maybe<Array<LiquidityGauge>>;\n  /**  List of the pool's gauges addresses  */\n  gaugesList: Array<Scalars['Bytes']>;\n  /**  Address of the pool (lp_token of the gauge)  */\n  id: Scalars['ID'];\n  /**  Pool ID if lp_token is a Balancer pool; null otherwise  */\n  poolId?: Maybe<Scalars['Bytes']>;\n  /**  Most recent, unkilled gauge in the GaugeController  */\n  preferentialGauge?: Maybe<LiquidityGauge>;\n};\n\n\nexport type PoolGaugesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n};\n\nexport type Pool_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  address?: InputMaybe<Scalars['Bytes']>;\n  address_contains?: InputMaybe<Scalars['Bytes']>;\n  address_gt?: InputMaybe<Scalars['Bytes']>;\n  address_gte?: InputMaybe<Scalars['Bytes']>;\n  address_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  address_lt?: InputMaybe<Scalars['Bytes']>;\n  address_lte?: InputMaybe<Scalars['Bytes']>;\n  address_not?: InputMaybe<Scalars['Bytes']>;\n  address_not_contains?: InputMaybe<Scalars['Bytes']>;\n  address_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_not?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;\n  gaugesList_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;\n  gauges_?: InputMaybe<LiquidityGauge_Filter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  poolId?: InputMaybe<Scalars['Bytes']>;\n  poolId_contains?: InputMaybe<Scalars['Bytes']>;\n  poolId_gt?: InputMaybe<Scalars['Bytes']>;\n  poolId_gte?: InputMaybe<Scalars['Bytes']>;\n  poolId_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  poolId_lt?: InputMaybe<Scalars['Bytes']>;\n  poolId_lte?: InputMaybe<Scalars['Bytes']>;\n  poolId_not?: InputMaybe<Scalars['Bytes']>;\n  poolId_not_contains?: InputMaybe<Scalars['Bytes']>;\n  poolId_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  preferentialGauge?: InputMaybe<Scalars['String']>;\n  preferentialGauge_?: InputMaybe<LiquidityGauge_Filter>;\n  preferentialGauge_contains?: InputMaybe<Scalars['String']>;\n  preferentialGauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_ends_with?: InputMaybe<Scalars['String']>;\n  preferentialGauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_gt?: InputMaybe<Scalars['String']>;\n  preferentialGauge_gte?: InputMaybe<Scalars['String']>;\n  preferentialGauge_in?: InputMaybe<Array<Scalars['String']>>;\n  preferentialGauge_lt?: InputMaybe<Scalars['String']>;\n  preferentialGauge_lte?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_contains?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  preferentialGauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  preferentialGauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  preferentialGauge_starts_with?: InputMaybe<Scalars['String']>;\n  preferentialGauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum Pool_OrderBy {\n  Address = 'address',\n  Gauges = 'gauges',\n  GaugesList = 'gaugesList',\n  Id = 'id',\n  PoolId = 'poolId',\n  PreferentialGauge = 'preferentialGauge'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  gauge?: Maybe<Gauge>;\n  gaugeFactories: Array<GaugeFactory>;\n  gaugeFactory?: Maybe<GaugeFactory>;\n  gaugeShare?: Maybe<GaugeShare>;\n  gaugeShares: Array<GaugeShare>;\n  gaugeType?: Maybe<GaugeType>;\n  gaugeTypes: Array<GaugeType>;\n  gaugeVote?: Maybe<GaugeVote>;\n  gaugeVotes: Array<GaugeVote>;\n  gauges: Array<Gauge>;\n  liquidityGauge?: Maybe<LiquidityGauge>;\n  liquidityGauges: Array<LiquidityGauge>;\n  pool?: Maybe<Pool>;\n  pools: Array<Pool>;\n  rewardToken?: Maybe<RewardToken>;\n  rewardTokens: Array<RewardToken>;\n  rootGauge?: Maybe<RootGauge>;\n  rootGauges: Array<RootGauge>;\n  user?: Maybe<User>;\n  users: Array<User>;\n  votingEscrow?: Maybe<VotingEscrow>;\n  votingEscrowLock?: Maybe<VotingEscrowLock>;\n  votingEscrowLocks: Array<VotingEscrowLock>;\n  votingEscrows: Array<VotingEscrow>;\n};\n\n\nexport type Query_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type QueryGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeFactoriesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeFactory_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeFactory_Filter>;\n};\n\n\nexport type QueryGaugeFactoryArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeShare_Filter>;\n};\n\n\nexport type QueryGaugeTypeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeTypesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeType_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeType_Filter>;\n};\n\n\nexport type QueryGaugeVoteArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryGaugeVotesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeVote_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeVote_Filter>;\n};\n\n\nexport type QueryGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Gauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Gauge_Filter>;\n};\n\n\nexport type QueryLiquidityGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryLiquidityGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n};\n\n\nexport type QueryPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type QueryRewardTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryRewardTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RewardToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<RewardToken_Filter>;\n};\n\n\nexport type QueryRootGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryRootGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RootGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<RootGauge_Filter>;\n};\n\n\nexport type QueryUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\n\nexport type QueryVotingEscrowArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryVotingEscrowLockArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type QueryVotingEscrowLocksArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\n\nexport type QueryVotingEscrowsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrow_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<VotingEscrow_Filter>;\n};\n\nexport type RewardToken = {\n  __typename?: 'RewardToken';\n  /**  ERC20 token decimals - zero if call to decimals() reverts  */\n  decimals: Scalars['Int'];\n  /**  Reference to LiquidityGauge entity  */\n  gauge: LiquidityGauge;\n  /**  Equal to: <tokenAddress>-<gaugeAddress>  */\n  id: Scalars['ID'];\n  /**  Timestamp at which finishes the period of rewards  */\n  periodFinish?: Maybe<Scalars['BigInt']>;\n  /**  Rate of reward tokens streamed per second  */\n  rate?: Maybe<Scalars['BigDecimal']>;\n  /**  ERC20 token symbol - empty string if call to symbol() reverts  */\n  symbol: Scalars['String'];\n  /**  Amount of reward tokens that has been deposited into the gauge  */\n  totalDeposited: Scalars['BigDecimal'];\n};\n\nexport type RewardToken_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  decimals?: InputMaybe<Scalars['Int']>;\n  decimals_gt?: InputMaybe<Scalars['Int']>;\n  decimals_gte?: InputMaybe<Scalars['Int']>;\n  decimals_in?: InputMaybe<Array<Scalars['Int']>>;\n  decimals_lt?: InputMaybe<Scalars['Int']>;\n  decimals_lte?: InputMaybe<Scalars['Int']>;\n  decimals_not?: InputMaybe<Scalars['Int']>;\n  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<LiquidityGauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  periodFinish?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_gt?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_gte?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  periodFinish_lt?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_lte?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_not?: InputMaybe<Scalars['BigInt']>;\n  periodFinish_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  rate?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_gte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  rate_lt?: InputMaybe<Scalars['BigDecimal']>;\n  rate_lte?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not?: InputMaybe<Scalars['BigDecimal']>;\n  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  symbol?: InputMaybe<Scalars['String']>;\n  symbol_contains?: InputMaybe<Scalars['String']>;\n  symbol_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_gt?: InputMaybe<Scalars['String']>;\n  symbol_gte?: InputMaybe<Scalars['String']>;\n  symbol_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_lt?: InputMaybe<Scalars['String']>;\n  symbol_lte?: InputMaybe<Scalars['String']>;\n  symbol_not?: InputMaybe<Scalars['String']>;\n  symbol_not_contains?: InputMaybe<Scalars['String']>;\n  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with?: InputMaybe<Scalars['String']>;\n  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;\n  symbol_not_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  symbol_starts_with?: InputMaybe<Scalars['String']>;\n  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  totalDeposited?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_gt?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_gte?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  totalDeposited_lt?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_lte?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_not?: InputMaybe<Scalars['BigDecimal']>;\n  totalDeposited_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum RewardToken_OrderBy {\n  Decimals = 'decimals',\n  Gauge = 'gauge',\n  Id = 'id',\n  PeriodFinish = 'periodFinish',\n  Rate = 'rate',\n  Symbol = 'symbol',\n  TotalDeposited = 'totalDeposited'\n}\n\nexport type RootGauge = {\n  __typename?: 'RootGauge';\n  /**  Chain where emissions by this gauge will be bridged to  */\n  chain: Chain;\n  /**  Factory contract address  */\n  factory: GaugeFactory;\n  /**  Reference to Gauge entity - created when LiquidityGauge is added to GaugeController */\n  gauge?: Maybe<Gauge>;\n  /**  RootGauge contract address */\n  id: Scalars['ID'];\n  /**  Whether Balancer DAO killed the gauge  */\n  isKilled: Scalars['Boolean'];\n  /**  Address where emissions by this gauge will be bridged to  */\n  recipient: Scalars['Bytes'];\n  /**  Relative weight cap of the gauge (0.01 = 1%) - V2 factories only  */\n  relativeWeightCap?: Maybe<Scalars['BigDecimal']>;\n};\n\nexport type RootGauge_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  chain?: InputMaybe<Chain>;\n  chain_in?: InputMaybe<Array<Chain>>;\n  chain_not?: InputMaybe<Chain>;\n  chain_not_in?: InputMaybe<Array<Chain>>;\n  factory?: InputMaybe<Scalars['String']>;\n  factory_?: InputMaybe<GaugeFactory_Filter>;\n  factory_contains?: InputMaybe<Scalars['String']>;\n  factory_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_ends_with?: InputMaybe<Scalars['String']>;\n  factory_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_gt?: InputMaybe<Scalars['String']>;\n  factory_gte?: InputMaybe<Scalars['String']>;\n  factory_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_lt?: InputMaybe<Scalars['String']>;\n  factory_lte?: InputMaybe<Scalars['String']>;\n  factory_not?: InputMaybe<Scalars['String']>;\n  factory_not_contains?: InputMaybe<Scalars['String']>;\n  factory_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with?: InputMaybe<Scalars['String']>;\n  factory_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_not_in?: InputMaybe<Array<Scalars['String']>>;\n  factory_not_starts_with?: InputMaybe<Scalars['String']>;\n  factory_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  factory_starts_with?: InputMaybe<Scalars['String']>;\n  factory_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge?: InputMaybe<Scalars['String']>;\n  gauge_?: InputMaybe<Gauge_Filter>;\n  gauge_contains?: InputMaybe<Scalars['String']>;\n  gauge_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_gt?: InputMaybe<Scalars['String']>;\n  gauge_gte?: InputMaybe<Scalars['String']>;\n  gauge_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_lt?: InputMaybe<Scalars['String']>;\n  gauge_lte?: InputMaybe<Scalars['String']>;\n  gauge_not?: InputMaybe<Scalars['String']>;\n  gauge_not_contains?: InputMaybe<Scalars['String']>;\n  gauge_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with?: InputMaybe<Scalars['String']>;\n  gauge_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_not_in?: InputMaybe<Array<Scalars['String']>>;\n  gauge_not_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  gauge_starts_with?: InputMaybe<Scalars['String']>;\n  gauge_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  isKilled?: InputMaybe<Scalars['Boolean']>;\n  isKilled_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  isKilled_not?: InputMaybe<Scalars['Boolean']>;\n  isKilled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;\n  recipient?: InputMaybe<Scalars['Bytes']>;\n  recipient_contains?: InputMaybe<Scalars['Bytes']>;\n  recipient_gt?: InputMaybe<Scalars['Bytes']>;\n  recipient_gte?: InputMaybe<Scalars['Bytes']>;\n  recipient_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  recipient_lt?: InputMaybe<Scalars['Bytes']>;\n  recipient_lte?: InputMaybe<Scalars['Bytes']>;\n  recipient_not?: InputMaybe<Scalars['Bytes']>;\n  recipient_not_contains?: InputMaybe<Scalars['Bytes']>;\n  recipient_not_in?: InputMaybe<Array<Scalars['Bytes']>>;\n  relativeWeightCap?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_gte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  relativeWeightCap_lt?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_lte?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not?: InputMaybe<Scalars['BigDecimal']>;\n  relativeWeightCap_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum RootGauge_OrderBy {\n  Chain = 'chain',\n  Factory = 'factory',\n  Gauge = 'gauge',\n  Id = 'id',\n  IsKilled = 'isKilled',\n  Recipient = 'recipient',\n  RelativeWeightCap = 'relativeWeightCap'\n}\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  /** Access to subgraph metadata */\n  _meta?: Maybe<_Meta_>;\n  gauge?: Maybe<Gauge>;\n  gaugeFactories: Array<GaugeFactory>;\n  gaugeFactory?: Maybe<GaugeFactory>;\n  gaugeShare?: Maybe<GaugeShare>;\n  gaugeShares: Array<GaugeShare>;\n  gaugeType?: Maybe<GaugeType>;\n  gaugeTypes: Array<GaugeType>;\n  gaugeVote?: Maybe<GaugeVote>;\n  gaugeVotes: Array<GaugeVote>;\n  gauges: Array<Gauge>;\n  liquidityGauge?: Maybe<LiquidityGauge>;\n  liquidityGauges: Array<LiquidityGauge>;\n  pool?: Maybe<Pool>;\n  pools: Array<Pool>;\n  rewardToken?: Maybe<RewardToken>;\n  rewardTokens: Array<RewardToken>;\n  rootGauge?: Maybe<RootGauge>;\n  rootGauges: Array<RootGauge>;\n  user?: Maybe<User>;\n  users: Array<User>;\n  votingEscrow?: Maybe<VotingEscrow>;\n  votingEscrowLock?: Maybe<VotingEscrowLock>;\n  votingEscrowLocks: Array<VotingEscrowLock>;\n  votingEscrows: Array<VotingEscrow>;\n};\n\n\nexport type Subscription_MetaArgs = {\n  block?: InputMaybe<Block_Height>;\n};\n\n\nexport type SubscriptionGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeFactoriesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeFactory_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeFactory_Filter>;\n};\n\n\nexport type SubscriptionGaugeFactoryArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeShareArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeSharesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeShare_Filter>;\n};\n\n\nexport type SubscriptionGaugeTypeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeTypesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeType_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeType_Filter>;\n};\n\n\nexport type SubscriptionGaugeVoteArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionGaugeVotesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeVote_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<GaugeVote_Filter>;\n};\n\n\nexport type SubscriptionGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Gauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Gauge_Filter>;\n};\n\n\nexport type SubscriptionLiquidityGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionLiquidityGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n};\n\n\nexport type SubscriptionPoolArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionPoolsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<Pool_Filter>;\n};\n\n\nexport type SubscriptionRewardTokenArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionRewardTokensArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RewardToken_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<RewardToken_Filter>;\n};\n\n\nexport type SubscriptionRootGaugeArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionRootGaugesArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<RootGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<RootGauge_Filter>;\n};\n\n\nexport type SubscriptionUserArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionUsersArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<User_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<User_Filter>;\n};\n\n\nexport type SubscriptionVotingEscrowArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionVotingEscrowLockArgs = {\n  block?: InputMaybe<Block_Height>;\n  id: Scalars['ID'];\n  subgraphError?: _SubgraphErrorPolicy_;\n};\n\n\nexport type SubscriptionVotingEscrowLocksArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\n\nexport type SubscriptionVotingEscrowsArgs = {\n  block?: InputMaybe<Block_Height>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrow_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  subgraphError?: _SubgraphErrorPolicy_;\n  where?: InputMaybe<VotingEscrow_Filter>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  /**  List of gauge the user has shares  */\n  gaugeShares?: Maybe<Array<GaugeShare>>;\n  /**  List of votes on gauges  */\n  gaugeVotes?: Maybe<Array<GaugeVote>>;\n  /**  User address  */\n  id: Scalars['ID'];\n  /**  List of locks the user created  */\n  votingLocks?: Maybe<Array<VotingEscrowLock>>;\n};\n\n\nexport type UserGaugeSharesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GaugeShare_Filter>;\n};\n\n\nexport type UserGaugeVotesArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeVote_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GaugeVote_Filter>;\n};\n\n\nexport type UserVotingLocksArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\nexport type User_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  gaugeShares_?: InputMaybe<GaugeShare_Filter>;\n  gaugeVotes_?: InputMaybe<GaugeVote_Filter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  votingLocks_?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\nexport enum User_OrderBy {\n  GaugeShares = 'gaugeShares',\n  GaugeVotes = 'gaugeVotes',\n  Id = 'id',\n  VotingLocks = 'votingLocks'\n}\n\nexport type VotingEscrow = {\n  __typename?: 'VotingEscrow';\n  /**  VotingEscrow contract address  */\n  id: Scalars['ID'];\n  /**  List of veBAL locks created  */\n  locks?: Maybe<Array<VotingEscrowLock>>;\n  /**  Amount of B-80BAL-20WETH BPT locked  */\n  stakedSupply: Scalars['BigDecimal'];\n};\n\n\nexport type VotingEscrowLocksArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<VotingEscrowLock_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<VotingEscrowLock_Filter>;\n};\n\nexport type VotingEscrowLock = {\n  __typename?: 'VotingEscrowLock';\n  /**  Equal to: <userAdress>-<votingEscrow>  */\n  id: Scalars['ID'];\n  /**  Amount of B-80BAL-20WETH BPT the user has locked  */\n  lockedBalance: Scalars['BigDecimal'];\n  /**  Timestamp at which B-80BAL-20WETH BPT can be unlocked by user [seconds]  */\n  unlockTime?: Maybe<Scalars['BigInt']>;\n  updatedAt: Scalars['Int'];\n  /**  Reference to User entity  */\n  user: User;\n  /**  Reference to VotingEscrow entity  */\n  votingEscrowID: VotingEscrow;\n};\n\nexport type VotingEscrowLock_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  lockedBalance?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_gt?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_gte?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  lockedBalance_lt?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_lte?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_not?: InputMaybe<Scalars['BigDecimal']>;\n  lockedBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  unlockTime?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_gt?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_gte?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  unlockTime_lt?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_lte?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_not?: InputMaybe<Scalars['BigInt']>;\n  unlockTime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;\n  updatedAt?: InputMaybe<Scalars['Int']>;\n  updatedAt_gt?: InputMaybe<Scalars['Int']>;\n  updatedAt_gte?: InputMaybe<Scalars['Int']>;\n  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;\n  updatedAt_lt?: InputMaybe<Scalars['Int']>;\n  updatedAt_lte?: InputMaybe<Scalars['Int']>;\n  updatedAt_not?: InputMaybe<Scalars['Int']>;\n  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;\n  user?: InputMaybe<Scalars['String']>;\n  user_?: InputMaybe<User_Filter>;\n  user_contains?: InputMaybe<Scalars['String']>;\n  user_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_ends_with?: InputMaybe<Scalars['String']>;\n  user_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_gt?: InputMaybe<Scalars['String']>;\n  user_gte?: InputMaybe<Scalars['String']>;\n  user_in?: InputMaybe<Array<Scalars['String']>>;\n  user_lt?: InputMaybe<Scalars['String']>;\n  user_lte?: InputMaybe<Scalars['String']>;\n  user_not?: InputMaybe<Scalars['String']>;\n  user_not_contains?: InputMaybe<Scalars['String']>;\n  user_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  user_not_ends_with?: InputMaybe<Scalars['String']>;\n  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  user_not_in?: InputMaybe<Array<Scalars['String']>>;\n  user_not_starts_with?: InputMaybe<Scalars['String']>;\n  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  user_starts_with?: InputMaybe<Scalars['String']>;\n  user_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID?: InputMaybe<Scalars['String']>;\n  votingEscrowID_?: InputMaybe<VotingEscrow_Filter>;\n  votingEscrowID_contains?: InputMaybe<Scalars['String']>;\n  votingEscrowID_contains_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_ends_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_gt?: InputMaybe<Scalars['String']>;\n  votingEscrowID_gte?: InputMaybe<Scalars['String']>;\n  votingEscrowID_in?: InputMaybe<Array<Scalars['String']>>;\n  votingEscrowID_lt?: InputMaybe<Scalars['String']>;\n  votingEscrowID_lte?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_contains?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_contains_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_ends_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_ends_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_in?: InputMaybe<Array<Scalars['String']>>;\n  votingEscrowID_not_starts_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_not_starts_with_nocase?: InputMaybe<Scalars['String']>;\n  votingEscrowID_starts_with?: InputMaybe<Scalars['String']>;\n  votingEscrowID_starts_with_nocase?: InputMaybe<Scalars['String']>;\n};\n\nexport enum VotingEscrowLock_OrderBy {\n  Id = 'id',\n  LockedBalance = 'lockedBalance',\n  UnlockTime = 'unlockTime',\n  UpdatedAt = 'updatedAt',\n  User = 'user',\n  VotingEscrowId = 'votingEscrowID'\n}\n\nexport type VotingEscrow_Filter = {\n  /** Filter for the block changed event. */\n  _change_block?: InputMaybe<BlockChangedFilter>;\n  id?: InputMaybe<Scalars['ID']>;\n  id_gt?: InputMaybe<Scalars['ID']>;\n  id_gte?: InputMaybe<Scalars['ID']>;\n  id_in?: InputMaybe<Array<Scalars['ID']>>;\n  id_lt?: InputMaybe<Scalars['ID']>;\n  id_lte?: InputMaybe<Scalars['ID']>;\n  id_not?: InputMaybe<Scalars['ID']>;\n  id_not_in?: InputMaybe<Array<Scalars['ID']>>;\n  locks_?: InputMaybe<VotingEscrowLock_Filter>;\n  stakedSupply?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_gt?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_gte?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n  stakedSupply_lt?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_lte?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_not?: InputMaybe<Scalars['BigDecimal']>;\n  stakedSupply_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;\n};\n\nexport enum VotingEscrow_OrderBy {\n  Id = 'id',\n  Locks = 'locks',\n  StakedSupply = 'stakedSupply'\n}\n\nexport type _Block_ = {\n  __typename?: '_Block_';\n  /** The hash of the block */\n  hash?: Maybe<Scalars['Bytes']>;\n  /** The block number */\n  number: Scalars['Int'];\n  /** Integer representation of the timestamp stored in blocks for the chain */\n  timestamp?: Maybe<Scalars['Int']>;\n};\n\n/** The type for the top-level _meta field */\nexport type _Meta_ = {\n  __typename?: '_Meta_';\n  /**\n   * Information about a specific subgraph block. The hash of the block\n   * will be null if the _meta field has a block constraint that asks for\n   * a block number. It will be filled if the _meta field has no block constraint\n   * and therefore asks for the latest  block\n   *\n   */\n  block: _Block_;\n  /** The deployment ID */\n  deployment: Scalars['String'];\n  /** If `true`, the subgraph encountered indexing errors at some past block */\n  hasIndexingErrors: Scalars['Boolean'];\n};\n\nexport enum _SubgraphErrorPolicy_ {\n  /** Data will be returned even if the subgraph has indexing errors */\n  Allow = 'allow',\n  /** If the subgraph has indexing errors, data will be omitted. The default. */\n  Deny = 'deny'\n}\n\nexport type GaugeShareQueryVariables = Exact<{\n  id: Scalars['ID'];\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type GaugeShareQuery = { __typename?: 'Query', gaugeShare?: { __typename?: 'GaugeShare', id: string, balance: string, user: { __typename?: 'User', id: string }, gauge: { __typename?: 'LiquidityGauge', id: string, isKilled: boolean, poolId?: string | null, poolAddress: string, totalSupply: string } } | null };\n\nexport type GaugeSharesQueryVariables = Exact<{\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<GaugeShare_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  where?: InputMaybe<GaugeShare_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type GaugeSharesQuery = { __typename?: 'Query', gaugeShares: Array<{ __typename?: 'GaugeShare', id: string, balance: string, user: { __typename?: 'User', id: string }, gauge: { __typename?: 'LiquidityGauge', id: string, isKilled: boolean, poolId?: string | null, poolAddress: string, totalSupply: string } }> };\n\nexport type SubgraphGaugeShareFragment = { __typename?: 'GaugeShare', id: string, balance: string, user: { __typename?: 'User', id: string }, gauge: { __typename?: 'LiquidityGauge', id: string, isKilled: boolean, poolId?: string | null, poolAddress: string, totalSupply: string } };\n\nexport type LiquidityGaugesQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<LiquidityGauge_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<LiquidityGauge_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type LiquidityGaugesQuery = { __typename?: 'Query', liquidityGauges: Array<{ __typename?: 'LiquidityGauge', id: string, symbol: string, poolAddress: string, poolId?: string | null, streamer?: string | null, totalSupply: string, factory: { __typename?: 'GaugeFactory', id: string, numGauges: number }, tokens?: Array<{ __typename?: 'RewardToken', id: string, symbol: string, decimals: number, totalDeposited: string, rate?: string | null, periodFinish?: string | null }> | null }> };\n\nexport type SubgraphLiquidityGaugeFragment = { __typename?: 'LiquidityGauge', id: string, symbol: string, poolAddress: string, poolId?: string | null, streamer?: string | null, totalSupply: string, factory: { __typename?: 'GaugeFactory', id: string, numGauges: number }, tokens?: Array<{ __typename?: 'RewardToken', id: string, symbol: string, decimals: number, totalDeposited: string, rate?: string | null, periodFinish?: string | null }> | null };\n\nexport type PoolsQueryVariables = Exact<{\n  skip?: InputMaybe<Scalars['Int']>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  where?: InputMaybe<Pool_Filter>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolsQuery = { __typename?: 'Query', pools: Array<{ __typename?: 'Pool', id: string, poolId?: string | null, preferentialGauge?: { __typename?: 'LiquidityGauge', id: string, symbol: string, poolAddress: string, poolId?: string | null, streamer?: string | null, totalSupply: string, factory: { __typename?: 'GaugeFactory', id: string, numGauges: number }, tokens?: Array<{ __typename?: 'RewardToken', id: string, symbol: string, decimals: number, totalDeposited: string, rate?: string | null, periodFinish?: string | null }> | null } | null }> };\n\nexport type SubgraphPoolWithPreferentialGaugeFragment = { __typename?: 'Pool', id: string, poolId?: string | null, preferentialGauge?: { __typename?: 'LiquidityGauge', id: string, symbol: string, poolAddress: string, poolId?: string | null, streamer?: string | null, totalSupply: string, factory: { __typename?: 'GaugeFactory', id: string, numGauges: number }, tokens?: Array<{ __typename?: 'RewardToken', id: string, symbol: string, decimals: number, totalDeposited: string, rate?: string | null, periodFinish?: string | null }> | null } | null };\n\nexport type PoolGaugesQueryVariables = Exact<{\n  where?: InputMaybe<Pool_Filter>;\n  first?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<Pool_OrderBy>;\n  orderDirection?: InputMaybe<OrderDirection>;\n  skip?: InputMaybe<Scalars['Int']>;\n  block?: InputMaybe<Block_Height>;\n}>;\n\n\nexport type PoolGaugesQuery = { __typename?: 'Query', pools: Array<{ __typename?: 'Pool', gauges?: Array<{ __typename?: 'LiquidityGauge', id: string, relativeWeightCap?: string | null }> | null, preferentialGauge?: { __typename?: 'LiquidityGauge', id: string } | null }> };\n\nexport const SubgraphGaugeShareFragmentDoc = gql`\n    fragment SubgraphGaugeShare on GaugeShare {\n  id\n  balance\n  user {\n    id\n  }\n  gauge {\n    id\n    isKilled\n    poolId\n    poolAddress\n    totalSupply\n  }\n}\n    `;\nexport const SubgraphLiquidityGaugeFragmentDoc = gql`\n    fragment SubgraphLiquidityGauge on LiquidityGauge {\n  id\n  symbol\n  poolAddress\n  poolId\n  streamer\n  factory {\n    id\n    numGauges\n  }\n  totalSupply\n  tokens {\n    id\n    symbol\n    decimals\n    totalDeposited\n    rate\n    periodFinish\n  }\n}\n    `;\nexport const SubgraphPoolWithPreferentialGaugeFragmentDoc = gql`\n    fragment SubgraphPoolWithPreferentialGauge on Pool {\n  id\n  poolId\n  preferentialGauge {\n    ...SubgraphLiquidityGauge\n  }\n}\n    ${SubgraphLiquidityGaugeFragmentDoc}`;\nexport const GaugeShareDocument = gql`\n    query GaugeShare($id: ID!, $block: Block_height) {\n  gaugeShare(id: $id, block: $block) {\n    ...SubgraphGaugeShare\n  }\n}\n    ${SubgraphGaugeShareFragmentDoc}`;\nexport const GaugeSharesDocument = gql`\n    query GaugeShares($first: Int, $orderBy: GaugeShare_orderBy, $orderDirection: OrderDirection, $skip: Int, $where: GaugeShare_filter, $block: Block_height) {\n  gaugeShares(\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    skip: $skip\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphGaugeShare\n  }\n}\n    ${SubgraphGaugeShareFragmentDoc}`;\nexport const LiquidityGaugesDocument = gql`\n    query LiquidityGauges($skip: Int, $first: Int, $orderBy: LiquidityGauge_orderBy, $orderDirection: OrderDirection, $where: LiquidityGauge_filter, $block: Block_height) {\n  liquidityGauges(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphLiquidityGauge\n  }\n}\n    ${SubgraphLiquidityGaugeFragmentDoc}`;\nexport const PoolsDocument = gql`\n    query Pools($skip: Int, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $where: Pool_filter, $block: Block_height) {\n  pools(\n    skip: $skip\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    where: $where\n    block: $block\n  ) {\n    ...SubgraphPoolWithPreferentialGauge\n  }\n}\n    ${SubgraphPoolWithPreferentialGaugeFragmentDoc}`;\nexport const PoolGaugesDocument = gql`\n    query PoolGauges($where: Pool_filter, $first: Int, $orderBy: Pool_orderBy, $orderDirection: OrderDirection, $skip: Int, $block: Block_height) {\n  pools(\n    where: $where\n    first: $first\n    orderBy: $orderBy\n    orderDirection: $orderDirection\n    skip: $skip\n    block: $block\n  ) {\n    gauges {\n      id\n      relativeWeightCap\n    }\n    preferentialGauge {\n      id\n    }\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    GaugeShare(variables: GaugeShareQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GaugeShareQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GaugeShareQuery>(GaugeShareDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GaugeShare', 'query');\n    },\n    GaugeShares(variables?: GaugeSharesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GaugeSharesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GaugeSharesQuery>(GaugeSharesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'GaugeShares', 'query');\n    },\n    LiquidityGauges(variables?: LiquidityGaugesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<LiquidityGaugesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<LiquidityGaugesQuery>(LiquidityGaugesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'LiquidityGauges', 'query');\n    },\n    Pools(variables?: PoolsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolsQuery>(PoolsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'Pools', 'query');\n    },\n    PoolGauges(variables?: PoolGaugesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<PoolGaugesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<PoolGaugesQuery>(PoolGaugesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'PoolGauges', 'query');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { GraphQLClient } from 'graphql-request';\nimport { getSdk, Sdk } from './generated/balancer-subgraph-types';\nimport * as Gauges from './generated/balancer-gauges';\nimport * as V2 from './generated/balancer-subgraph-types';\n\nexport * from './generated/balancer-subgraph-types';\n\nexport type SubgraphClient = Sdk;\nexport type GaugesClient = Gauges.Sdk;\nexport type SubgraphLiquidityGauge = Gauges.LiquidityGauge;\nexport type SubgraphPool = V2.SubgraphPoolFragment;\n\nexport function createSubgraphClient(subgraphUrl: string): SubgraphClient {\n  const client = new GraphQLClient(subgraphUrl);\n\n  return getSdk(client);\n}\n\nexport function createGaugesClient(url: string): GaugesClient {\n  const client = new GraphQLClient(url);\n\n  return Gauges.getSdk(client);\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\n\nconst multicallAbi = [\n  'function aggregate(tuple[](address target, bytes callData) memory calls) public view returns (uint256 blockNumber, bytes[] memory returnData)',\n];\n\nexport const Multicall = (address: string, provider: Provider): Contract =>\n  new Contract(address, multicallAbi, provider);\n","import { set } from 'lodash';\nimport { Fragment, JsonFragment, Interface, Result } from '@ethersproject/abi';\nimport { CallOverrides } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { BytesLike } from '@ethersproject/bytes';\nimport { Multicall } from '@/modules/contracts/implementations/multicall';\n\nexport class Multicaller {\n  private multiAddress: string;\n  private provider: Provider;\n  private interface: Interface;\n  public options: CallOverrides = {};\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private calls: [string, string, any][] = [];\n  private paths: string[] = [];\n\n  constructor(\n    multiAddress: string,\n    provider: Provider,\n    abi: string | Array<Fragment | JsonFragment | string>,\n    options = {}\n  ) {\n    this.multiAddress = multiAddress;\n    this.provider = provider;\n    this.interface = new Interface(abi);\n    this.options = options;\n  }\n\n  call(\n    path: string,\n    address: string,\n    functionName: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params?: any[]\n  ): Multicaller {\n    this.calls.push([address, functionName, params]);\n    this.paths.push(path);\n    return this;\n  }\n\n  async execute(\n    from: Record<string, unknown> = {}\n  ): Promise<Record<string, unknown>> {\n    const obj = from;\n    const results = await this.executeMulticall();\n    results.forEach((result, i) =>\n      set(obj, this.paths[i], result.length > 1 ? result : result[0])\n    );\n    this.calls = [];\n    this.paths = [];\n    return obj;\n  }\n\n  private async executeMulticall(): Promise<Result[]> {\n    const multi = Multicall(this.multiAddress, this.provider);\n\n    const [, res] = await multi.aggregate(\n      this.calls.map(([address, functionName, params]) => [\n        address,\n        this.interface.encodeFunctionData(functionName, params),\n      ]),\n      this.options\n    );\n\n    return res.map((result: BytesLike, i: number) =>\n      this.interface.decodeFunctionResult(this.calls[i][1], result)\n    );\n  }\n}\n","import { formatFixed } from '@ethersproject/bignumber';\nimport { Provider } from '@ethersproject/providers';\nimport {\n  PoolFilter,\n  SubgraphPoolBase,\n  SubgraphToken,\n} from '@balancer-labs/sor';\nimport { Multicaller } from '@/lib/utils/multiCaller';\nimport { isSameAddress } from '@/lib/utils';\nimport { Vault__factory } from '@balancer-labs/typechain';\nimport { Pool, PoolToken } from '@/types';\n\n// TODO: decide whether we want to trim these ABIs down to the relevant functions\nimport aTokenRateProvider from '@/lib/abi/StaticATokenRateProvider.json';\n\nimport weightedPoolAbi from '@/lib/abi/WeightedPool.json';\nimport stablePoolAbi from '@/lib/abi/StablePool.json';\nimport elementPoolAbi from '@/lib/abi/ConvergentCurvePool.json';\nimport linearPoolAbi from '@/lib/abi/LinearPool.json';\nimport composableStableAbi from '@/lib/abi/ComposableStable.json';\n\nexport async function getOnChainBalances<\n  GenericPool extends Omit<SubgraphPoolBase | Pool, 'tokens'> & {\n    tokens: (SubgraphToken | PoolToken)[];\n  }\n>(\n  subgraphPoolsOriginal: GenericPool[],\n  multiAddress: string,\n  vaultAddress: string,\n  provider: Provider\n): Promise<GenericPool[]> {\n  if (subgraphPoolsOriginal.length === 0) return subgraphPoolsOriginal;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const abis: any = Object.values(\n    // Remove duplicate entries using their names\n    Object.fromEntries(\n      [\n        ...Vault__factory.abi,\n        ...aTokenRateProvider,\n        ...weightedPoolAbi,\n        ...stablePoolAbi,\n        ...elementPoolAbi,\n        ...linearPoolAbi,\n        ...composableStableAbi,\n      ].map((row) => [row.name, row])\n    )\n  );\n\n  const multiPool = new Multicaller(multiAddress, provider, abis);\n\n  const supportedPoolTypes: string[] = Object.values(PoolFilter);\n  const subgraphPools: GenericPool[] = [];\n  subgraphPoolsOriginal.forEach((pool) => {\n    if (!supportedPoolTypes.includes(pool.poolType)) {\n      console.error(`Unknown pool type: ${pool.poolType} ${pool.id}`);\n      return;\n    }\n\n    subgraphPools.push(pool);\n\n    multiPool.call(`${pool.id}.poolTokens`, vaultAddress, 'getPoolTokens', [\n      pool.id,\n    ]);\n    multiPool.call(`${pool.id}.totalSupply`, pool.address, 'totalSupply');\n\n    // Pools with pre minted BPT\n    if (pool.poolType.includes('Linear') || pool.poolType === 'StablePhantom') {\n      multiPool.call(\n        `${pool.id}.virtualSupply`,\n        pool.address,\n        'getVirtualSupply'\n      );\n    }\n\n    /**\n     * Returns the effective BPT supply.\n     * In other pools, this would be the same as `totalSupply`, but there are two key differences here:\n     *  - this pool pre-mints BPT and holds it in the Vault as a token, and as such we need to subtract the Vault's\n     *    balance to get the total \"circulating supply\". This is called the 'virtualSupply'.\n     *  - the Pool owes debt to the Protocol in the form of unminted BPT, which will be minted immediately before the\n     *    next join or exit. We need to take these into account since, even if they don't yet exist, they will\n     *    effectively be included in any Pool operation that involves BPT.\n     * In the vast majority of cases, this function should be used instead of `totalSupply()`.\n     */\n    if (pool.poolType === 'ComposableStable')\n      multiPool.call(\n        `${pool.id}.actualSupply`,\n        pool.address,\n        'getActualSupply'\n      );\n\n    // TO DO - Make this part of class to make more flexible?\n    if (\n      pool.poolType === 'Weighted' ||\n      pool.poolType === 'LiquidityBootstrapping' ||\n      pool.poolType === 'Investment'\n    ) {\n      multiPool.call(\n        `${pool.id}.weights`,\n        pool.address,\n        'getNormalizedWeights'\n      );\n      multiPool.call(\n        `${pool.id}.swapFee`,\n        pool.address,\n        'getSwapFeePercentage'\n      );\n    } else if (\n      pool.poolType === 'Stable' ||\n      pool.poolType === 'MetaStable' ||\n      pool.poolType === 'StablePhantom' ||\n      pool.poolType === 'ComposableStable'\n    ) {\n      // MetaStable & StablePhantom is the same as Stable for multicall purposes\n      multiPool.call(\n        `${pool.id}.amp`,\n        pool.address,\n        'getAmplificationParameter'\n      );\n      multiPool.call(\n        `${pool.id}.swapFee`,\n        pool.address,\n        'getSwapFeePercentage'\n      );\n    } else if (pool.poolType === 'Element') {\n      multiPool.call(`${pool.id}.swapFee`, pool.address, 'percentFee');\n    } else if (pool.poolType.toString().includes('Linear')) {\n      multiPool.call(\n        `${pool.id}.swapFee`,\n        pool.address,\n        'getSwapFeePercentage'\n      );\n\n      multiPool.call(`${pool.id}.targets`, pool.address, 'getTargets');\n      multiPool.call(`${pool.id}.rate`, pool.address, 'getWrappedTokenRate');\n    } else if (pool.poolType.toString().includes('Gyro')) {\n      multiPool.call(\n        `${pool.id}.swapFee`,\n        pool.address,\n        'getSwapFeePercentage'\n      );\n    }\n  });\n\n  let pools = {} as Record<\n    string,\n    {\n      amp?: string[];\n      swapFee: string;\n      weights?: string[];\n      targets?: string[];\n      poolTokens: {\n        tokens: string[];\n        balances: string[];\n      };\n      totalSupply: string;\n      virtualSupply?: string;\n      rate?: string;\n      actualSupply?: string;\n    }\n  >;\n\n  try {\n    pools = (await multiPool.execute()) as Record<\n      string,\n      {\n        amp?: string[];\n        swapFee: string;\n        weights?: string[];\n        poolTokens: {\n          tokens: string[];\n          balances: string[];\n        };\n        totalSupply: string;\n        virtualSupply?: string;\n        rate?: string;\n        actualSupply?: string;\n      }\n    >;\n  } catch (err) {\n    throw `Issue with multicall execution.`;\n  }\n\n  const onChainPools: GenericPool[] = [];\n\n  Object.entries(pools).forEach(([poolId, onchainData], index) => {\n    try {\n      const {\n        poolTokens,\n        swapFee,\n        weights,\n        totalSupply,\n        virtualSupply,\n        actualSupply,\n      } = onchainData;\n\n      if (\n        subgraphPools[index].poolType === 'Stable' ||\n        subgraphPools[index].poolType === 'MetaStable' ||\n        subgraphPools[index].poolType === 'StablePhantom' ||\n        subgraphPools[index].poolType === 'ComposableStable'\n      ) {\n        if (!onchainData.amp) {\n          console.error(`Stable Pool Missing Amp: ${poolId}`);\n          return;\n        } else {\n          // Need to scale amp by precision to match expected Subgraph scale\n          // amp is stored with 3 decimals of precision\n          subgraphPools[index].amp = formatFixed(onchainData.amp[0], 3);\n        }\n      }\n\n      if (subgraphPools[index].poolType.includes('Linear')) {\n        if (!onchainData.targets) {\n          console.error(`Linear Pool Missing Targets: ${poolId}`);\n          return;\n        } else {\n          subgraphPools[index].lowerTarget = formatFixed(\n            onchainData.targets[0],\n            18\n          );\n          subgraphPools[index].upperTarget = formatFixed(\n            onchainData.targets[1],\n            18\n          );\n        }\n\n        const wrappedIndex = subgraphPools[index].wrappedIndex;\n        if (wrappedIndex === undefined || onchainData.rate === undefined) {\n          console.error(\n            `Linear Pool Missing WrappedIndex or PriceRate: ${poolId}`\n          );\n          return;\n        }\n        // Update priceRate of wrappedToken\n        subgraphPools[index].tokens[wrappedIndex].priceRate = formatFixed(\n          onchainData.rate,\n          18\n        );\n      }\n\n      subgraphPools[index].swapFee = formatFixed(swapFee, 18);\n\n      poolTokens.tokens.forEach((token, i) => {\n        const tokens = subgraphPools[index].tokens;\n        const T = tokens.find((t) => isSameAddress(t.address, token));\n        if (!T) throw `Pool Missing Expected Token: ${poolId} ${token}`;\n        T.balance = formatFixed(poolTokens.balances[i], T.decimals);\n        if (weights) {\n          // Only expected for WeightedPools\n          T.weight = formatFixed(weights[i], 18);\n        }\n      });\n\n      // Pools with pre minted BPT\n      if (\n        subgraphPools[index].poolType.includes('Linear') ||\n        subgraphPools[index].poolType === 'StablePhantom'\n      ) {\n        if (virtualSupply === undefined) {\n          console.error(\n            `Pool with pre-minted BPT missing Virtual Supply: ${poolId}`\n          );\n          return;\n        }\n        subgraphPools[index].totalShares = formatFixed(virtualSupply, 18);\n      } else if (subgraphPools[index].poolType === 'ComposableStable') {\n        if (actualSupply === undefined) {\n          console.error(`ComposableStable missing Actual Supply: ${poolId}`);\n          return;\n        }\n        subgraphPools[index].totalShares = formatFixed(actualSupply, 18);\n      } else {\n        subgraphPools[index].totalShares = formatFixed(totalSupply, 18);\n      }\n\n      onChainPools.push(subgraphPools[index]);\n    } catch (err) {\n      throw `Issue with pool onchain data: ${err}`;\n    }\n  });\n\n  return onChainPools;\n}\n","import { PoolDataService, SubgraphPoolBase } from '@balancer-labs/sor';\nimport {\n  OrderDirection,\n  Pool_OrderBy,\n  SubgraphClient,\n} from '@/modules/subgraph/subgraph';\nimport { parseInt } from 'lodash';\nimport { getOnChainBalances } from './onChainData';\nimport { Provider } from '@ethersproject/providers';\nimport { BalancerNetworkConfig, BalancerSdkSorConfig } from '@/types';\nimport { isSameAddress } from '@/lib/utils';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function mapPools(pools: any[]): SubgraphPoolBase[] {\n  return pools.map((pool) => ({\n    ...pool,\n    poolType: pool.poolType || '',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    tokens: (pool.tokens || []).map((token: any) => ({\n      ...token,\n      weight: token.weight || null,\n    })),\n    totalWeight: pool.totalWeight || undefined,\n    amp: pool.amp || undefined,\n    expiryTime: pool.expiryTime ? parseInt(pool.expiryTime) : undefined,\n    unitSeconds: pool.unitSeconds ? parseInt(pool.unitSeconds) : undefined,\n    principalToken: pool.principalToken || undefined,\n    baseToken: pool.baseToken || undefined,\n  }));\n}\n\nexport class SubgraphPoolDataService implements PoolDataService {\n  constructor(\n    private readonly client: SubgraphClient,\n    private readonly provider: Provider,\n    private readonly network: BalancerNetworkConfig,\n    private readonly sorConfig: BalancerSdkSorConfig\n  ) {}\n\n  public async getPools(): Promise<SubgraphPoolBase[]> {\n    const pools = await this.getSubgraphPools();\n   \n    const filteredPools = pools.filter((p) => {\n      if (!this.network.poolsToIgnore) return true;\n      const index = this.network.poolsToIgnore.findIndex((addr) =>\n        isSameAddress(addr, p.address)\n      );\n      return index === -1;\n    });\n   \n    const mapped = mapPools(filteredPools);\n   \n    if (this.sorConfig.fetchOnChainBalances === false) {\n      return mapped;\n    }\n  \n    return getOnChainBalances(\n      mapped,\n      this.network.addresses.contracts.multicall,\n      this.network.addresses.contracts.vault,\n      this.provider\n    );\n  }\n\n  private async getSubgraphPools() {\n    const { pool0, pool1000, pool2000 } = await this.client.AllPools({\n      where: { swapEnabled: true, totalShares_gt: '0.000000000001' },\n      orderBy: Pool_OrderBy.TotalLiquidity,\n      orderDirection: OrderDirection.Desc,\n    });\n\n    const pools = [...pool0, ...pool1000, ...pool2000];\n  \n    return pools;\n  }\n}\n","import { TokenPriceService } from '@balancer-labs/sor';\nimport axios from 'axios';\n\nexport class CoingeckoTokenPriceService implements TokenPriceService {\n  constructor(private readonly chainId: number) {}\n\n  public async getNativeAssetPriceInToken(\n    tokenAddress: string\n  ): Promise<string> {\n    const ethPerToken = await this.getTokenPriceInNativeAsset(tokenAddress);\n\n    // We get the price of token in terms of ETH\n    // We want the price of 1 ETH in terms of the token base units\n    return `${1 / parseFloat(ethPerToken)}`;\n  }\n\n  /**\n   * @dev Assumes that the native asset has 18 decimals\n   * @param tokenAddress - the address of the token contract\n   * @returns the price of 1 ETH in terms of the token base units\n   */\n  async getTokenPriceInNativeAsset(tokenAddress: string): Promise<string> {\n    const endpoint = `https://api.coingecko.com/api/v3/simple/token_price/${this.platformId}?contract_addresses=${tokenAddress}&vs_currencies=${this.nativeAssetId}`;\n\n    const { data } = await axios.get(endpoint, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (data[tokenAddress.toLowerCase()][this.nativeAssetId] === undefined) {\n      throw Error('No price returned from Coingecko');\n    }\n\n    return data[tokenAddress.toLowerCase()][this.nativeAssetId];\n  }\n\n  private get platformId(): string {\n    switch (this.chainId) {\n      case 1:\n        return 'ethereum';\n      case 42:\n        return 'ethereum';\n      case 137:\n        return 'polygon-pos';\n      case 42161:\n        return 'arbitrum-one';\n      case 100:\n        return 'xdai';\n      case 16116:\n        return 'ethereum';\n    }\n\n    return '3';\n  }\n\n  private get nativeAssetId(): string {\n    switch (this.chainId) {\n      case 1:\n        return 'eth';\n      case 42:\n        return 'eth';\n      case 137:\n        return '';\n      case 42161:\n        return 'eth';\n      case 100:\n        return 'xdai';\n      case 16116:\n        return 'eth';\n    }\n\n    return '';\n  }\n}\n","import { TokenPriceService } from '@balancer-labs/sor';\nimport { SubgraphClient } from '@/modules/subgraph/subgraph';\nimport { keyBy } from 'lodash';\n\nexport class SubgraphTokenPriceService implements TokenPriceService {\n  private readonly weth: string;\n\n  constructor(private readonly client: SubgraphClient, weth: string) {\n    //the subgraph addresses are all toLowerCase\n    this.weth = weth.toLowerCase();\n  }\n\n  public async getNativeAssetPriceInToken(\n    tokenAddress: string\n  ): Promise<string> {\n    const ethPerToken = await this.getLatestPriceInEthFromSubgraph(\n      tokenAddress\n    );\n\n    if (!ethPerToken) {\n      throw Error('No price found in the subgraph');\n    }\n\n    // We want the price of 1 ETH in terms of the token base units\n    return `${1 / ethPerToken}`;\n  }\n\n  public async getLatestPriceInEthFromSubgraph(\n    tokenAddress: string\n  ): Promise<number | null> {\n    tokenAddress = tokenAddress.toLowerCase();\n\n    const { latestPrices } = await this.client.TokenLatestPrices({\n      where: { asset_in: [tokenAddress, this.weth] },\n    });\n    const pricesKeyedOnId = keyBy(latestPrices, 'id');\n\n    //the ids are set as ${asset}-${pricingAsset}\n    //first try to find an exact match\n    if (pricesKeyedOnId[`${tokenAddress}-${this.weth}`]) {\n      return parseFloat(pricesKeyedOnId[`${tokenAddress}-${this.weth}`].price);\n    }\n\n    //no exact match, try to traverse the path\n    const matchingLatestPrices = latestPrices.filter(\n      (price) => price.asset === tokenAddress\n    );\n\n    //pick the first one we match on.\n    //There is no timestamp on latestPrice, should get introduced to allow for sorting by latest\n    for (const tokenPrice of matchingLatestPrices) {\n      const pricingAssetPricedInEth =\n        pricesKeyedOnId[`${tokenPrice.pricingAsset}-${this.weth}`];\n\n      //1 BAL = 20 USDC, 1 USDC = 0.00025 ETH, 1 BAL = 20 * 0.00025\n      if (pricingAssetPricedInEth) {\n        return (\n          parseFloat(tokenPrice.price) *\n          parseFloat(pricingAssetPricedInEth.price)\n        );\n      }\n    }\n\n    return null;\n  }\n}\n","import { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport { BalancerNetworkConfig, BalancerSdkConfig } from '@/types';\nexport function getNetworkConfig(\n  config: BalancerSdkConfig\n): BalancerNetworkConfig {\n  if (typeof config.network === 'number') {\n    const networkConfig = BALANCER_NETWORK_CONFIG[config.network];\n\n    return {\n      ...networkConfig,\n      urls: {\n        ...networkConfig.urls,\n        subgraph: config.customSubgraphUrl ?? networkConfig.urls.subgraph,\n      },\n      tenderly: config.tenderly,\n    };\n  }\n\n  return {\n    ...config.network,\n    urls: {\n      ...config.network.urls,\n      subgraph: config.customSubgraphUrl ?? config.network.urls.subgraph,\n    },\n    tenderly: config.network.tenderly,\n  };\n}\n","import { SOR, SorConfig, TokenPriceService } from '@balancer-labs/sor';\nimport { Provider, JsonRpcProvider } from '@ethersproject/providers';\nimport { SubgraphPoolDataService } from './pool-data/subgraphPoolDataService';\nimport { CoingeckoTokenPriceService } from './token-price/coingeckoTokenPriceService';\nimport {\n  SubgraphClient,\n  createSubgraphClient,\n} from '@/modules/subgraph/subgraph';\nimport {\n  BalancerNetworkConfig,\n  BalancerSdkConfig,\n  BalancerSdkSorConfig,\n} from '@/types';\nimport { SubgraphTokenPriceService } from './token-price/subgraphTokenPriceService';\nimport { getNetworkConfig } from '@/modules/sdk.helpers';\n\nexport class Sor extends SOR {\n  constructor(sdkConfig: BalancerSdkConfig) {\n    const network = getNetworkConfig(sdkConfig);\n    const sorConfig = Sor.getSorConfig(sdkConfig);\n    const sorNetworkConfig = Sor.getSorNetworkConfig(network);\n    const provider = new JsonRpcProvider(\n      sdkConfig.rpcUrl,\n      sdkConfig.network as number\n    );\n    const subgraphClient = createSubgraphClient(network.urls.subgraph);\n\n    const poolDataService = Sor.getPoolDataService(\n      network,\n      sorConfig,\n      provider,\n      subgraphClient\n    );\n\n    const tokenPriceService = Sor.getTokenPriceService(\n      network,\n      sorConfig,\n      subgraphClient\n    );\n\n    super(provider, sorNetworkConfig, poolDataService, tokenPriceService);\n  }\n\n  private static getSorConfig(config: BalancerSdkConfig): BalancerSdkSorConfig {\n    return {\n      tokenPriceService: 'coingecko',\n      poolDataService: 'subgraph',\n      fetchOnChainBalances: true,\n      ...config.sor,\n    };\n  }\n\n  private static getSorNetworkConfig(\n    network: BalancerNetworkConfig\n  ): SorConfig {\n    return {\n      ...network,\n      vault: network.addresses.contracts.vault,\n      weth: network.addresses.tokens.wrappedNativeAsset,\n      lbpRaisingTokens: network.addresses.tokens?.lbpRaisingTokens,\n      wETHwstETH: network.pools.wETHwstETH,\n      connectingTokens: network.sorConnectingTokens,\n    };\n  }\n\n  private static getPoolDataService(\n    network: BalancerNetworkConfig,\n    sorConfig: BalancerSdkSorConfig,\n    provider: Provider,\n    subgraphClient: SubgraphClient\n  ) {\n    return typeof sorConfig.poolDataService === 'object'\n      ? sorConfig.poolDataService\n      : new SubgraphPoolDataService(\n          subgraphClient,\n          provider,\n          network,\n          sorConfig\n        );\n  }\n\n  private static getTokenPriceService(\n    network: BalancerNetworkConfig,\n    sorConfig: BalancerSdkSorConfig,\n    subgraphClient: SubgraphClient\n  ): TokenPriceService {\n    if (typeof sorConfig.tokenPriceService === 'object') {\n      return sorConfig.tokenPriceService;\n    } else if (sorConfig.tokenPriceService === 'subgraph') {\n      new SubgraphTokenPriceService(\n        subgraphClient,\n        network.addresses.tokens.wrappedNativeAsset\n      );\n    }\n\n    return new CoingeckoTokenPriceService(network.chainId);\n  }\n}\n","import {\n  QuerySimpleFlashSwapParameters,\n  QuerySimpleFlashSwapResponse,\n  SimpleFlashSwapParameters,\n  SwapType,\n} from '../types';\nimport { queryBatchSwap } from '../queryBatchSwap';\nimport { BatchSwap } from '../types';\nimport { sum } from 'lodash';\n\nfunction checkSimpleFlashSwapParams(params: {\n  poolIds: string[];\n  assets: string[];\n}) {\n  if (params.poolIds.length > 2) {\n    throw new Error('Simple flash swap only supports a maximum of two pools');\n  }\n\n  if (params.assets.length > 2) {\n    throw new Error(\n      'Simple flash swap only supports a maximum of to two assets (tokens)'\n    );\n  }\n}\n\nfunction createSwaps(\n  poolIds: SimpleFlashSwapParameters['poolIds'],\n  amount: string\n): BatchSwap['swaps'] {\n  return [\n    {\n      poolId: poolIds[0],\n      assetInIndex: 0,\n      assetOutIndex: 1,\n      amount,\n      userData: '0x',\n    },\n    {\n      poolId: poolIds[1],\n      assetInIndex: 1,\n      assetOutIndex: 0,\n      amount: '0',\n      userData: '0x',\n    },\n  ];\n}\n\nexport function convertSimpleFlashSwapToBatchSwapParameters({\n  poolIds,\n  assets,\n  flashLoanAmount,\n  walletAddress,\n}: SimpleFlashSwapParameters & {\n  walletAddress: string;\n}): BatchSwap {\n  checkSimpleFlashSwapParams({ poolIds, assets });\n\n  const swaps = createSwaps(poolIds, flashLoanAmount);\n\n  const funds = {\n    sender: walletAddress,\n    fromInternalBalance: false,\n    recipient: walletAddress,\n    toInternalBalance: false,\n  };\n\n  const limits = ['0', '0'];\n\n  const deadline = '999999999999999999';\n\n  return {\n    kind: SwapType.SwapExactIn,\n    swaps,\n    assets,\n    funds,\n    limits,\n    deadline,\n  };\n}\n\nfunction deltaToExpectedProfit(delta: string) {\n  return Number(delta) * -1;\n}\n\nfunction calcProfit(profits: string[]) {\n  return sum(profits);\n}\n\n/**\n * Simple interface to test if a simple flash swap is valid and see potential profits.\n *\n * A \"simple\" flash swap is an arbitrage executed with only two tokens and two pools,\n * swapping in the first pool and then back in the second pool for a profit. For more\n * complex flash swaps, you will have to use the batch swap method.\n *\n * Learn more: A [Flash Swap](https://dev.balancer.fi/resources/swaps/flash-swaps).\n *\n * _NB: This method doesn't execute a flashSwap\n *\n * @param {SimpleFlashSwapParameters}   params - BatchSwap information used for query.\n * @param {Contract}                    params.vaultContract - the ethersjs contract for the Balancer Vault.\n * @param {string}                      params.flashLoanAmount - initial input amount for the flash loan (first asset)\n * @param {string[]}                    params.poolIds - array of Balancer pool ids\n * @param {string[]}                    params.assets - array of token addresses\n * @returns {Promise<QuerySimpleFlashSwapResponse}>}       Returns an ethersjs transaction response\n */\nexport async function querySimpleFlashSwap(\n  params: QuerySimpleFlashSwapParameters\n): Promise<QuerySimpleFlashSwapResponse> {\n  checkSimpleFlashSwapParams(params);\n\n  const [tokenAddress0, tokenAddress1] = params.assets;\n\n  try {\n    const deltas = await queryBatchSwap(\n      params.vaultContract,\n      SwapType.SwapExactIn,\n      createSwaps(params.poolIds, params.flashLoanAmount),\n      params.assets\n    );\n\n    const profits = {\n      [tokenAddress0]: deltaToExpectedProfit(deltas[0]).toString(),\n      [tokenAddress1]: deltaToExpectedProfit(deltas[1]).toString(),\n    };\n\n    return {\n      profits,\n      isProfitable:\n        calcProfit([profits[tokenAddress0], profits[tokenAddress1]]) > 0,\n    };\n  } catch (err) {\n    throw `Failed to querySimpleFlashSwap: ${err}`;\n  }\n}\n","import { Vault__factory } from '@balancer-labs/typechain';\nimport BatchRelayerLibraryAbi from '@/lib/abi/BatchRelayerLibrary.json';\nimport { JsonFragment } from '@ethersproject/abi';\nimport { networkAddresses } from '@/lib/constants/config';\n\n/**\n * Maps SOR data to get the tokenIn used in swaps.\n * Logic related to a relayer wrapping and unwrapping tokens.\n * SOR returns list of already wrapped tokenAddresses used in the swap.\n * However tokenIn defined as an input is the unwrapped token.\n * Note: tokenAddresses are transformed in SOR lib wrapInfo.setWrappedInfo\n * TODO: Once PR is merged, this table can be removed.\n */\ntype WrappedList = {\n  [key: string]: string;\n};\n\nconst underlyingToWrappedMap: WrappedList = {\n  // stETH => wstETH\n  '0xae7ab96520de3a18e5e111b5eaab095312d7fe84':\n    '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n\n  // AMPL => WAMPL\n  '0xd46ba6d942050d489dbd938a2c909a5d5039a161':\n    '0xedb171c18ce90b633db442f2a6f72874093b49ef',\n\n  // aAMPL -> ubAAMPL\n  '0x1e6bb68acec8fefbd87d192be09bb274170a0548':\n    '0xF03387d8d0FF326ab586A58E0ab4121d106147DF',\n};\n\n/**\n * Vault swaps are operating on wrapped tokens. When user is sending an unwrapped token, it's wrapped in a relayer.\n * SOR is returning an array of tokens already wrapped.\n * Converts tokenIn to match tokenIn used in a swap.\n *\n * TODO: add tokenIn and tokenOut addressed used for swap in the SOR results as tokenInForSwap, tokenOutForSwap\n *\n * @param token token address\n * @returns wrapped token address\n */\nfunction tokenForSwaps(token: string): string {\n  let wrapped = token;\n  // eslint-disable-next-line no-prototype-builtins\n  if (underlyingToWrappedMap.hasOwnProperty(token)) {\n    wrapped = underlyingToWrappedMap[token as keyof WrappedList];\n  }\n  return wrapped;\n}\n\nexport enum Relayers {\n  vault = 1,\n  lido = 2,\n}\n\nexport interface SwapRelayer {\n  id: Relayers;\n  address: string;\n}\n\n/**\n * Resolves a contract address for sending swap transaction to.\n * Balancer is using relayers to automatically wrap / unwrap tokens not compatibile with ERC20.\n */\nfunction relayerResolver(\n  assetIn: string,\n  assetOut: string,\n  chainId: number\n): SwapRelayer {\n  const { tokens, contracts } = networkAddresses(chainId);\n\n  let to = {\n    id: Relayers.vault,\n    address: contracts.vault,\n  };\n\n  if (tokens.stETH && contracts.lidoRelayer)\n    if ([assetIn, assetOut].includes(tokens.stETH))\n      to = {\n        id: Relayers.lido,\n        address: contracts.lidoRelayer,\n      };\n\n  return to;\n}\n\nfunction swapFragment(relayer: SwapRelayer): JsonFragment[] {\n  let source = Vault__factory.abi;\n  if (relayer.id === Relayers.lido) source = BatchRelayerLibraryAbi;\n\n  const signatures = source.filter(\n    (fn) => fn.name && ['swap', 'batchSwap'].includes(fn.name)\n  );\n\n  return signatures;\n}\n\nfunction batchSwapFragment(\n  assetIn: string,\n  assetOut: string,\n  chainId: number\n): JsonFragment[] {\n  const vaultSignaturesForSwaps = Vault__factory.abi.filter(\n    (fn) => fn.name && ['batchSwap'].includes(fn.name)\n  );\n  const relayerSignaturesForSwaps = BatchRelayerLibraryAbi.filter(\n    (fn) => fn.name && ['batchSwap'].includes(fn.name)\n  );\n  let returnSignatures = vaultSignaturesForSwaps;\n  const { tokens, contracts } = networkAddresses(chainId);\n  if (tokens.stETH && contracts.lidoRelayer) {\n    if ([assetIn, assetOut].includes(tokens.stETH))\n      returnSignatures = relayerSignaturesForSwaps;\n  }\n\n  return returnSignatures;\n}\n\nexport { tokenForSwaps, relayerResolver, swapFragment, batchSwapFragment };\n","import { SwapInfo } from '@balancer-labs/sor';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { tokenForSwaps } from './swap_utils';\nimport { SwapType } from '../types';\n\ninterface AmountForLimit {\n  amount: BigNumber;\n  max: (slippage: number) => BigNumber;\n  min: (slippage: number) => BigNumber;\n}\n\ninterface SDKSwapInfo extends SwapInfo {\n  /** Name mapping to improve readability. */\n  amountIn: BigNumber;\n  amountOut: BigNumber;\n  /** Name mapping for amounts used specifically for limits calculations. */\n  amountInForLimits: AmountForLimit;\n  amountOutForLimits: AmountForLimit;\n  /** Wrapped token addresses used in the swap. */\n  tokenInForSwaps: string;\n  tokenOutFromSwaps: string;\n}\n\n/** Applies slippage to a number */\nfunction amountForLimit(amount: BigNumber): AmountForLimit {\n  return {\n    amount,\n    max: (maxSlippage: number): BigNumber => {\n      return amount.mul(1e3 + maxSlippage).div(1e3);\n    },\n    min: (maxSlippage: number): BigNumber => {\n      return amount.mul(1e3 - maxSlippage).div(1e3);\n    },\n  };\n}\n\nfunction decorateSorSwapInfo(\n  swapInfo: SwapInfo,\n  swapType: SwapType\n): SDKSwapInfo {\n  const amountIn =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.swapAmount\n      : swapInfo.returnAmount;\n  const amountOut =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.returnAmount\n      : swapInfo.swapAmount;\n  const amountInForLimits =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.swapAmountForSwaps || swapInfo.swapAmount\n      : swapInfo.returnAmountFromSwaps || swapInfo.returnAmount;\n  const amountOutForLimits =\n    swapType === SwapType.SwapExactIn\n      ? swapInfo.returnAmountFromSwaps || swapInfo.returnAmount\n      : swapInfo.swapAmountForSwaps || swapInfo.swapAmount;\n  const tokenInForSwaps = tokenForSwaps(swapInfo.tokenIn);\n  const tokenOutFromSwaps = tokenForSwaps(swapInfo.tokenOut);\n\n  return {\n    ...swapInfo,\n    amountIn,\n    amountOut,\n    amountInForLimits: amountForLimit(amountInForLimits),\n    amountOutForLimits: amountForLimit(amountOutForLimits),\n    tokenInForSwaps,\n    tokenOutFromSwaps,\n  };\n}\n\nexport { SDKSwapInfo, tokenForSwaps, decorateSorSwapInfo };\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { FundManagement, SingleSwap, Swap, SwapType } from '../types';\nimport { Interface, JsonFragment } from '@ethersproject/abi';\nimport { SwapInfo } from '@balancer-labs/sor';\nimport { SDKSwapInfo, decorateSorSwapInfo } from './swap_info_decorator';\nimport { AddressZero } from '@ethersproject/constants';\nimport { swapFragment, relayerResolver, SwapRelayer } from './swap_utils';\n\nclass SingleSwapBuilder {\n  private swapInfo: SDKSwapInfo;\n  funds?: FundManagement;\n  limit?: BigNumberish;\n  deadline?: BigNumberish;\n  relayer: SwapRelayer;\n  readonly functionName = 'swap';\n\n  /**\n   * Building swap transaction data\n   *\n   * @param swapInfo SOR result\n   * @param kind\n   * @param chainId used to resolve relayer addresses\n   */\n  constructor(\n    swapInfo: SwapInfo,\n    private readonly kind: SwapType,\n    private readonly chainId: number\n  ) {\n    this.swapInfo = decorateSorSwapInfo(swapInfo, kind);\n    this.relayer = relayerResolver(\n      this.swapInfo.tokenIn,\n      this.swapInfo.tokenOut,\n      this.chainId\n    );\n  }\n\n  setFunds(sender: string, recipient?: string): void {\n    this.funds = {\n      sender,\n      recipient: recipient || sender,\n      fromInternalBalance: false,\n      toInternalBalance: false,\n    };\n  }\n\n  /**\n   * @param deadline block timestamp\n   */\n  setDeadline(deadline: BigNumber): void {\n    this.deadline = deadline.toString();\n  }\n\n  get amount(): BigNumber {\n    return this.kind === SwapType.SwapExactOut\n      ? this.swapInfo.amountOutForLimits.amount\n      : this.swapInfo.amountInForLimits.amount;\n  }\n\n  /**\n   * Calculates the limit for token amount.\n   * https://dev.balancer.fi/guides/swaps/single-swaps\n   * https://dev.balancer.fi/resources/swaps/single-swap\n   *\n   * For swap:\n   * The meaning of limit depends on the value of kind\n   *    GIVEN_IN: The minimum amount of tokens we would accept to receive from the swap.\n   *    GIVEN_OUT: The maximum amount of tokens we would be sending to swap.\n   *\n   * @param maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   */\n  setLimits(maxSlippage: number): void {\n    this.limit =\n      this.kind === SwapType.SwapExactIn\n        ? this.swapInfo.amountOutForLimits.min(maxSlippage).toString()\n        : this.swapInfo.amountInForLimits.max(maxSlippage).toString();\n  }\n\n  get singleSwap(): SingleSwap {\n    const poolId = this.swapInfo.swaps[0].poolId;\n    const kind = this.kind;\n    const assetIn = this.swapInfo.tokenInForSwaps;\n    const assetOut = this.swapInfo.tokenOutFromSwaps;\n    const amount = this.amount.toString();\n    const userData = '0x';\n\n    return {\n      poolId,\n      kind,\n      assetIn,\n      assetOut,\n      amount,\n      userData,\n    };\n  }\n\n  attributes(): Swap {\n    if (!this.funds || !this.limit || !this.deadline) {\n      throw new Error('Uninitialized arguments');\n    }\n\n    // TODO: Raise errors when some parameters are missing\n    let attrs: Swap = {\n      request: this.singleSwap,\n      funds: this.funds,\n      limit: this.limit,\n      deadline: this.deadline,\n    };\n\n    // TODO: Call this logic from a relayer module maybe? Do we actually need to do that?\n    // additional parameters on a contract:\n    // https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/standalone-utils/contracts/relayer/VaultActions.sol#L44\n    const fragment = this.fragment();\n    if (fragment[0].inputs && fragment[0].inputs?.length > 4) {\n      attrs = {\n        ...attrs,\n        value: '0',\n        outputReference: '0',\n      };\n    }\n\n    return attrs;\n  }\n\n  data(): string {\n    const contractInterface = new Interface(this.fragment());\n\n    return contractInterface.encodeFunctionData(\n      'swap',\n      Object.values(this.attributes())\n    );\n  }\n\n  value(maxSlippage: number): BigNumber {\n    let amount = BigNumber.from(0);\n    if (this.swapInfo.tokenIn === AddressZero)\n      amount =\n        this.kind === SwapType.SwapExactIn\n          ? this.swapInfo.amountIn\n          : this.swapInfo.amountInForLimits.max(maxSlippage);\n    return amount;\n  }\n\n  to(): string {\n    return this.relayer.address;\n  }\n\n  private fragment(): JsonFragment[] {\n    return swapFragment(this.relayer).filter(\n      (f) => f.name === this.functionName\n    );\n  }\n}\n\nexport { SingleSwapBuilder };\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { BatchSwap, FundManagement, SwapType } from '../types';\nimport { Interface, JsonFragment } from '@ethersproject/abi';\nimport { SwapInfo } from '@balancer-labs/sor';\nimport { SDKSwapInfo, decorateSorSwapInfo } from './swap_info_decorator';\nimport { AddressZero } from '@ethersproject/constants';\nimport { swapFragment, relayerResolver, SwapRelayer } from './swap_utils';\n\nclass BatchSwapBuilder {\n  private swapInfo: SDKSwapInfo;\n  funds?: FundManagement;\n  limits?: BigNumberish[];\n  deadline?: BigNumberish;\n  relayer: SwapRelayer;\n  readonly functionName = 'batchSwap';\n\n  /**\n   * Building swap transaction data\n   *\n   * @param swapInfo SOR result\n   * @param kind\n   */\n  constructor(\n    swapInfo: SwapInfo,\n    private readonly kind: SwapType,\n    private readonly chainId: number\n  ) {\n    this.swapInfo = decorateSorSwapInfo(swapInfo, kind);\n    this.relayer = relayerResolver(\n      this.swapInfo.tokenIn,\n      this.swapInfo.tokenOut,\n      this.chainId\n    );\n  }\n\n  setFunds(sender: string, recipient?: string): void {\n    this.funds = {\n      sender,\n      recipient: recipient || sender,\n      fromInternalBalance: false,\n      toInternalBalance: false,\n    };\n  }\n\n  /**\n   * @param deadline block timestamp\n   */\n  setDeadline(deadline: BigNumber): void {\n    this.deadline = deadline;\n  }\n\n  /**\n   * Given IN it's the minimum amount we are willing to accept.\n   * Given OUT it's the fixed amount defined as output.\n   */\n  minAmountOut(maxSlippage: number): BigNumber {\n    return this.kind === SwapType.SwapExactIn\n      ? this.swapInfo.amountOutForLimits.min(maxSlippage)\n      : this.swapInfo.amountOutForLimits.amount;\n  }\n\n  /**\n   * Given IN it's the fixed amount we define as input.\n   * Given OUT it's the maximum amount we are willing to pay for the request.\n   */\n  maxAmountIn(maxSlippage: number): BigNumber {\n    return this.kind === SwapType.SwapExactOut\n      ? this.swapInfo.amountInForLimits.max(maxSlippage)\n      : this.swapInfo.amountInForLimits.amount;\n  }\n\n  /**\n   * Calculates limits for token amount.\n   * Maximum number of tokens to send is a positive number\n   * Minimum amount of tokens to receive is a negative number\n   * https://dev.balancer.fi/guides/swaps/batch-swaps\n   * https://dev.balancer.fi/resources/swaps/batch-swaps#multi-hop-examples\n   *\n   * For batchSwap:\n   * An array of of the maximum net amounts of each asset which can be taken to perform the swap.\n   * Should the total trade require more than limits[i] tokens to be taken from sender for any i\n   * then the transaction shall fail.\n   *\n   * @param maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   */\n  setLimits(maxSlippage: number): void {\n    // TODO: This implementation handles only a single input. We might want to extend it for multiple token inputs\n    this.limits = this.swapInfo.tokenAddresses\n      .map((token) => {\n        let amount = BigNumber.from(0);\n        if (token === this.swapInfo.tokenInForSwaps) {\n          amount = this.maxAmountIn(maxSlippage);\n        }\n        if (token === this.swapInfo.tokenOutFromSwaps) {\n          amount = this.minAmountOut(maxSlippage).mul(-1);\n        }\n        return amount;\n      })\n      .map((limit) => limit.toString().split('.')[0]);\n  }\n\n  attributes(): BatchSwap {\n    // TODO: Raise errors when some parameters are missing\n    if (!this.funds || !this.limits || !this.deadline) {\n      throw new Error('Uninitialized arguments');\n    }\n\n    let attrs: BatchSwap = {\n      kind: this.kind,\n      swaps: this.swapInfo.swaps,\n      assets: this.swapInfo.tokenAddresses,\n      funds: this.funds,\n      limits: this.limits,\n      deadline: this.deadline,\n    };\n\n    const fragment = this.fragment();\n\n    // TODO: Call this logic from a relayer module maybe? Do we actually need to do that?\n    // additional parameters on a contract:\n    // https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/standalone-utils/contracts/relayer/VaultActions.sol#L67\n    if (fragment[0].inputs && fragment[0].inputs?.length > 6) {\n      attrs = {\n        ...attrs,\n        value: '0',\n        outputReferences: [],\n      };\n    }\n\n    return attrs;\n  }\n\n  data(): string {\n    const contractInterface = new Interface(this.fragment());\n\n    return contractInterface.encodeFunctionData(\n      'batchSwap',\n      Object.values(this.attributes())\n    );\n  }\n\n  value(maxSlippage: number): BigNumber {\n    let amount = BigNumber.from(0);\n    if (this.swapInfo.tokenIn === AddressZero)\n      amount = this.maxAmountIn(maxSlippage);\n    return amount;\n  }\n\n  to(): string {\n    return this.relayer.address;\n  }\n\n  private fragment(): JsonFragment[] {\n    return swapFragment(this.relayer).filter(\n      (f) => f.name === this.functionName\n    );\n  }\n}\n\nexport { BatchSwapBuilder };\n","import { SOR, SubgraphPoolBase, SwapInfo, SwapTypes } from '@balancer-labs/sor';\nimport { Vault__factory, Vault } from '@balancer-labs/typechain';\nimport {\n  BatchSwap,\n  QuerySimpleFlashSwapParameters,\n  QuerySimpleFlashSwapResponse,\n  QueryWithSorInput,\n  QueryWithSorOutput,\n  SimpleFlashSwapParameters,\n  FindRouteParameters,\n  BuildTransactionParameters,\n  SwapAttributes,\n  SwapType,\n} from './types';\nimport {\n  queryBatchSwap,\n  queryBatchSwapWithSor,\n  getSorSwapInfo,\n} from './queryBatchSwap';\nimport { balancerVault } from '@/lib/constants/config';\nimport { getLimitsForSlippage } from './helpers';\nimport { BalancerSdkConfig } from '@/types';\nimport { SwapInput } from './types';\nimport { Sor } from '@/modules/sor/sor.module';\nimport {\n  convertSimpleFlashSwapToBatchSwapParameters,\n  querySimpleFlashSwap,\n} from './flashSwap';\nimport {\n  SingleSwapBuilder,\n  BatchSwapBuilder,\n} from '@/modules/swaps/swap_builder';\n\nexport class Swaps {\n  readonly sor: SOR;\n  chainId: number;\n  vaultContract: Vault;\n\n  // TODO: sorOrConfig - let's make it more predictable and always pass configuration explicitly\n  constructor(sorOrConfig: SOR | BalancerSdkConfig) {\n    if (sorOrConfig instanceof SOR) {\n      this.sor = sorOrConfig;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.chainId = (<any>this.sor.provider)['_network']['chainId'];\n    } else {\n      this.sor = new Sor(sorOrConfig);\n      this.chainId = sorOrConfig.network as number;\n    }\n\n    this.vaultContract = Vault__factory.connect(\n      balancerVault,\n      this.sor.provider\n    );\n  }\n\n  static getLimitsForSlippage(\n    tokensIn: string[],\n    tokensOut: string[],\n    swapType: SwapType,\n    deltas: string[],\n    assets: string[],\n    slippage: string\n  ): string[] {\n    // TO DO - Check best way to do this?\n    const limits = getLimitsForSlippage(\n      tokensIn,\n      tokensOut,\n      swapType,\n      deltas,\n      assets,\n      slippage\n    );\n\n    return limits.map((l) => l.toString());\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   *\n   * @param FindRouteParameters\n   * @param FindRouteParameters.tokenIn Address\n   * @param FindRouteParameters.tokenOut Address\n   * @param FindRouteParameters.amount BigNumber with a trade amount\n   * @param FindRouteParameters.gasPrice BigNumber current gas price\n   * @param FindRouteParameters.maxPools number of pool included in path\n   * @returns Best trade route information\n   */\n  async findRouteGivenIn({\n    tokenIn,\n    tokenOut,\n    amount,\n    gasPrice,\n    maxPools = 4,\n  }: FindRouteParameters): Promise<SwapInfo> {\n    return this.sor.getSwaps(tokenIn, tokenOut, SwapTypes.SwapExactIn, amount, {\n      gasPrice,\n      maxPools,\n    });\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   *\n   * @param FindRouteParameters\n   * @param FindRouteParameters.tokenIn Address\n   * @param FindRouteParameters.tokenOut Address\n   * @param FindRouteParameters.amount BigNumber with a trade amount\n   * @param FindRouteParameters.gasPrice BigNumber current gas price\n   * @param FindRouteParameters.maxPools number of pool included in path\n   * @returns Best trade route information\n   */\n  async findRouteGivenOut({\n    tokenIn,\n    tokenOut,\n    amount,\n    gasPrice,\n    maxPools,\n  }: FindRouteParameters): Promise<SwapInfo> {\n    return this.sor.getSwaps(\n      tokenIn,\n      tokenOut,\n      SwapTypes.SwapExactOut,\n      amount,\n      {\n        gasPrice,\n        maxPools,\n      }\n    );\n  }\n\n  /**\n   * Uses SOR to find optimal route for a trading pair and amount\n   *\n   * @param BuildTransactionParameters\n   * @param BuildTransactionParameters.userAddress Address\n   * @param BuildTransactionParameters.swapInfo result of route finding\n   * @param BuildTransactionParameters.kind 0 - givenIn, 1 - givenOut\n   * @param BuildTransactionParameters.deadline BigNumber block timestamp\n   * @param BuildTransactionParameters.maxSlippage [bps], eg: 1 === 0.01%, 100 === 1%\n   * @returns transaction request ready to send with signer.sendTransaction\n   */\n  buildSwap({\n    userAddress,\n    recipient,\n    swapInfo,\n    kind,\n    deadline,\n    maxSlippage,\n  }: BuildTransactionParameters): SwapAttributes {\n    if (!this.chainId) throw 'Missing network configuration';\n\n    // one vs batch (gas cost optimisation when using single swap)\n    const builder =\n      swapInfo.swaps.length > 1\n        ? new BatchSwapBuilder(swapInfo, kind, this.chainId)\n        : new SingleSwapBuilder(swapInfo, kind, this.chainId);\n    builder.setFunds(userAddress, recipient);\n    builder.setDeadline(deadline);\n    builder.setLimits(maxSlippage);\n\n    const to = builder.to();\n    const { functionName } = builder;\n    const attributes = builder.attributes();\n    const data = builder.data();\n    const value = builder.value(maxSlippage);\n\n    return { to, functionName, attributes, data, value };\n  }\n\n  /**\n   * Encode batchSwap in an ABI byte string\n   *\n   * [See method for a batchSwap](https://dev.balancer.fi/references/contracts/apis/the-vault#batch-swaps).\n   *\n   * _NB: This method doesn't execute a batchSwap -- it returns an [ABI byte string](https://docs.soliditylang.org/en/latest/abi-spec.html)\n   * containing the data of the function call on a contract, which can then be sent to the network to be executed.\n   * (ex. [sendTransaction](https://web3js.readthedocs.io/en/v1.2.11/web3-eth.html#sendtransaction)).\n   *\n   * @param {BatchSwap}           batchSwap - BatchSwap information used for query.\n   * @param {SwapType}            batchSwap.kind - either exactIn or exactOut\n   * @param {BatchSwapSteps[]}    batchSwap.swaps - sequence of swaps\n   * @param {string[]}            batchSwap.assets - array contains the addresses of all assets involved in the swaps\n   * @param {FundManagement}      batchSwap.funds - object containing information about where funds should be taken/sent\n   * @param {number[]}            batchSwap.limits - limits for each token involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the minimum amount of tokens to receive (by passing a negative value) is specified\n   * @param {string}              batchSwap.deadline -  time (in Unix timestamp) after which it will no longer attempt to make a trade\n   * @returns {string}            encodedBatchSwapData - Returns an ABI byte string containing the data of the function call on a contract\n   */\n  static encodeBatchSwap(batchSwap: BatchSwap): string {\n    const vaultInterface = Vault__factory.createInterface();\n\n    return vaultInterface.encodeFunctionData('batchSwap', [\n      batchSwap.kind,\n      batchSwap.swaps,\n      batchSwap.assets,\n      batchSwap.funds,\n      batchSwap.limits,\n      batchSwap.deadline,\n    ]);\n  }\n\n  /**\n   * Encode simple flash swap into a ABI byte string\n   *\n   * A \"simple\" flash swap is an arbitrage executed with only two tokens and two pools,\n   * swapping in the first pool and then back in the second pool for a profit. For more\n   * complex flash swaps, you will have to use the batch swap method.\n   *\n   * Learn more: A [Flash Swap](https://dev.balancer.fi/resources/swaps/flash-swaps).\n   *\n   * @param {SimpleFlashSwapParameters}   params - BatchSwap information used for query.\n   * @param {string}                      params.flashLoanAmount - initial input amount for the flash loan (first asset)\n   * @param {string[]}                    params.poolIds - array of Balancer pool ids\n   * @param {string[]}                    params.assets - array of token addresses\n   * @param {string}                      params.walletAddress - array of token addresses\n   * @returns {string}                    encodedBatchSwapData - Returns an ABI byte string containing the data of the function call on a contract\n   */\n  static encodeSimpleFlashSwap(params: SimpleFlashSwapParameters): string {\n    return this.encodeBatchSwap(\n      convertSimpleFlashSwapToBatchSwapParameters(params)\n    );\n  }\n\n  /**\n   * fetchPools saves updated pools data to SOR internal onChainBalanceCache.\n   * @param {SubgraphPoolBase[]} [poolsData=[]] If poolsData passed uses this as pools source otherwise fetches from config.subgraphUrl.\n   * @param {boolean} [isOnChain=true] If isOnChain is true will retrieve all required onChain data via multicall otherwise uses subgraph values.\n   * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n   */\n  async fetchPools(): Promise<boolean> {\n    return this.sor.fetchPools();\n  }\n\n  public getPools(): SubgraphPoolBase[] {\n    return this.sor.getPools();\n  }\n\n  /**\n   * queryBatchSwap simulates a call to `batchSwap`, returning an array of Vault asset deltas.\n   * @param batchSwap - BatchSwap information used for query.\n   * @param {SwapType} batchSwap.kind - either exactIn or exactOut.\n   * @param {BatchSwapStep[]} batchSwap.swaps - sequence of swaps.\n   * @param {string[]} batchSwap.assets - array contains the addresses of all assets involved in the swaps.\n   * @returns {Promise<string[]>} Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n   * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n   * the same index in the `assets` array.\n   */\n  async queryBatchSwap(\n    batchSwap: Pick<BatchSwap, 'kind' | 'swaps' | 'assets'>\n  ): Promise<string[]> {\n    return await queryBatchSwap(\n      this.vaultContract,\n      batchSwap.kind,\n      batchSwap.swaps,\n      batchSwap.assets\n    );\n  }\n\n  /**\n   * Uses SOR to create and query a batchSwap.\n   * @param {QueryWithSorInput} queryWithSor - Swap information used for querying using SOR.\n   * @param {string[]} queryWithSor.tokensIn - Array of addresses of assets in.\n   * @param {string[]} queryWithSor.tokensOut - Array of addresses of assets out.\n   * @param {SwapType} queryWithSor.swapType - Type of Swap, ExactIn/Out.\n   * @param {string[]} queryWithSor.amounts - Array of amounts used in swap.\n   * @param {FetchPoolsInput} queryWithSor.fetchPools - Set whether SOR will fetch updated pool info.\n   * @returns {Promise<QueryWithSorOutput>} Returns amount of tokens swaps along with swap and asset info that can be submitted to a batchSwap call.\n   */\n  async queryBatchSwapWithSor(\n    queryWithSor: QueryWithSorInput\n  ): Promise<QueryWithSorOutput> {\n    return await queryBatchSwapWithSor(\n      this.sor,\n      this.vaultContract,\n      queryWithSor\n    );\n  }\n\n  /**\n   * Simple interface to test if a simple flash swap is valid and see potential profits.\n   *\n   * A \"simple\" flash swap is an arbitrage executed with only two tokens and two pools,\n   * swapping in the first pool and then back in the second pool for a profit. For more\n   * complex flash swaps, you will have to use the batch swap method.\n   *\n   * Learn more: A [Flash Swap](https://dev.balancer.fi/resources/swaps/flash-swaps).\n   *\n   * _NB: This method doesn't execute a flashSwap\n   *\n   * @param {SimpleFlashSwapParameters}   params - BatchSwap information used for query.\n   * @param {string}                      params.flashLoanAmount - initial input amount for the flash loan (first asset)\n   * @param {string[]}                    params.poolIds - array of Balancer pool ids\n   * @param {string[]}                    params.assets - array of token addresses\n   * @returns {Promise<{profits: Record<string, string>, isProfitable: boolean}>}       Returns an ethersjs transaction response\n   */\n  async querySimpleFlashSwap(\n    params: Omit<QuerySimpleFlashSwapParameters, 'vaultContract'>\n  ): Promise<QuerySimpleFlashSwapResponse> {\n    return await querySimpleFlashSwap({\n      ...params,\n      vaultContract: this.vaultContract,\n    });\n  }\n\n  /**\n   * Use SOR to get swapInfo for tokenIn<>tokenOut.\n   * @param {SwapInput} swapInput - Swap information used for querying using SOR.\n   * @param {string} swapInput.tokenIn - Addresse of asset in.\n   * @param {string} swapInput.tokenOut - Addresse of asset out.\n   * @param {SwapType} swapInput.swapType - Type of Swap, ExactIn/Out.\n   * @param {string} swapInput.amount - Amount used in swap.\n   * @returns {Promise<SwapInfo>} SOR swap info.\n   */\n  async getSorSwap(swapInput: SwapInput): Promise<SwapInfo> {\n    return await getSorSwapInfo(\n      swapInput.tokenIn,\n      swapInput.tokenOut,\n      swapInput.swapType,\n      swapInput.amount,\n      this.sor\n    );\n  }\n}\n","import { JsonRpcSigner } from '@ethersproject/providers';\nimport { BigNumberish, BigNumber } from '@ethersproject/bignumber';\nimport { Interface } from '@ethersproject/abi';\nimport { MaxUint256, WeiPerEther, Zero } from '@ethersproject/constants';\nimport { Vault } from '@balancer-labs/typechain';\n\nimport { Swaps } from '@/modules/swaps/swaps.module';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport {\n  EncodeBatchSwapInput,\n  EncodeWrapAaveDynamicTokenInput,\n  EncodeUnwrapAaveStaticTokenInput,\n  OutputReference,\n  EncodeExitPoolInput,\n  EncodeJoinPoolInput,\n  ExitAndBatchSwapInput,\n  ExitPoolData,\n  JoinPoolData,\n} from './types';\nimport {\n  TransactionData,\n  ExitPoolRequest,\n  JoinPoolRequest,\n  BalancerSdkConfig,\n} from '@/types';\nimport {\n  SwapType,\n  FundManagement,\n  BatchSwapStep,\n  FetchPoolsInput,\n} from '../swaps/types';\nimport { SubgraphPoolBase } from '@balancer-labs/sor';\nimport { RelayerAuthorization } from '@/lib/utils';\n\nimport relayerLibraryAbi from '@/lib/abi/BatchRelayerLibrary.json';\n\nexport * from './types';\n\nconst relayerLibrary = new Interface(relayerLibraryAbi);\n\nexport class Relayer {\n  private readonly swaps: Swaps;\n\n  static CHAINED_REFERENCE_TEMP_PREFIX = 'ba10'; // Temporary reference: it is deleted after a read.\n  static CHAINED_REFERENCE_READONLY_PREFIX = 'ba11'; // Read-only reference: it is not deleted after a read.\n\n  constructor(swapsOrConfig: Swaps | BalancerSdkConfig) {\n    if (swapsOrConfig instanceof Swaps) {\n      this.swaps = swapsOrConfig;\n    } else {\n      this.swaps = new Swaps(swapsOrConfig);\n    }\n  }\n\n  /**\n   * Returns true if `amount` is not actually an amount, but rather a chained reference.\n   */\n  static isChainedReference(amount: string): boolean {\n    const amountBn = BigNumber.from(amount);\n    const mask = BigNumber.from(\n      '0xfff0000000000000000000000000000000000000000000000000000000000000'\n    );\n    const readonly =\n      '0xba10000000000000000000000000000000000000000000000000000000000000';\n    const check = amountBn.toBigInt() & mask.toBigInt();\n    return readonly === BigNumber.from(check)._hex.toString();\n  }\n\n  static encodeApproveVault(tokenAddress: string, maxAmount: string): string {\n    return relayerLibrary.encodeFunctionData('approveVault', [\n      tokenAddress,\n      maxAmount,\n    ]);\n  }\n\n  static encodeSetRelayerApproval(\n    relayerAdress: string,\n    approved: boolean,\n    authorisation: string\n  ): string {\n    return relayerLibrary.encodeFunctionData('setRelayerApproval', [\n      relayerAdress,\n      approved,\n      authorisation,\n    ]);\n  }\n\n  static encodeGaugeWithdraw(\n    gaugeAddress: string,\n    sender: string,\n    recipient: string,\n    amount: string\n  ): string {\n    return relayerLibrary.encodeFunctionData('gaugeWithdraw', [\n      gaugeAddress,\n      sender,\n      recipient,\n      amount,\n    ]);\n  }\n\n  static encodeGaugeDeposit(\n    gaugeAddress: string,\n    sender: string,\n    recipient: string,\n    amount: string\n  ): string {\n    return relayerLibrary.encodeFunctionData('gaugeDeposit', [\n      gaugeAddress,\n      sender,\n      recipient,\n      amount,\n    ]);\n  }\n\n  static encodeBatchSwap(params: EncodeBatchSwapInput): string {\n    return relayerLibrary.encodeFunctionData('batchSwap', [\n      params.swapType,\n      params.swaps,\n      params.assets,\n      params.funds,\n      params.limits,\n      params.deadline,\n      params.value,\n      params.outputReferences,\n    ]);\n  }\n\n  static encodeExitPool(params: EncodeExitPoolInput): string {\n    return relayerLibrary.encodeFunctionData('exitPool', [\n      params.poolId,\n      params.poolKind,\n      params.sender,\n      params.recipient,\n      params.exitPoolRequest,\n      params.outputReferences,\n    ]);\n  }\n\n  static encodeJoinPool(params: EncodeJoinPoolInput): string {\n    return relayerLibrary.encodeFunctionData('joinPool', [\n      params.poolId,\n      params.kind,\n      params.sender,\n      params.recipient,\n      params.joinPoolRequest,\n      params.value,\n      params.outputReference,\n    ]);\n  }\n\n  static encodeWrapAaveDynamicToken(\n    params: EncodeWrapAaveDynamicTokenInput\n  ): string {\n    return relayerLibrary.encodeFunctionData('wrapAaveDynamicToken', [\n      params.staticToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.fromUnderlying,\n      params.outputReference,\n    ]);\n  }\n\n  static encodeUnwrapAaveStaticToken(\n    params: EncodeUnwrapAaveStaticTokenInput\n  ): string {\n    return relayerLibrary.encodeFunctionData('unwrapAaveStaticToken', [\n      params.staticToken,\n      params.sender,\n      params.recipient,\n      params.amount,\n      params.toUnderlying,\n      params.outputReferences,\n    ]);\n  }\n\n  static encodePeekChainedReferenceValue(reference: BigNumberish): string {\n    return relayerLibrary.encodeFunctionData('peekChainedReferenceValue', [\n      reference,\n    ]);\n  }\n\n  static toChainedReference(key: BigNumberish, isTemporary = true): BigNumber {\n    const prefix = isTemporary\n      ? Relayer.CHAINED_REFERENCE_TEMP_PREFIX\n      : Relayer.CHAINED_REFERENCE_READONLY_PREFIX;\n    // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n    const paddedPrefix = `0x${prefix}${'0'.repeat(64 - prefix.length)}`;\n    return BigNumber.from(paddedPrefix).add(key);\n  }\n\n  static fromChainedReference(ref: string, isTemporary = true): BigNumber {\n    const prefix = isTemporary\n      ? Relayer.CHAINED_REFERENCE_TEMP_PREFIX\n      : Relayer.CHAINED_REFERENCE_READONLY_PREFIX;\n    // The full padded prefix is 66 characters long, with 64 hex characters and the 0x prefix.\n    const paddedPrefix = `0x${prefix}${'0'.repeat(64 - prefix.length)}`;\n    return BigNumber.from(ref).sub(BigNumber.from(paddedPrefix));\n  }\n\n  static constructExitCall(params: ExitPoolData): string {\n    const {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n    } = params;\n\n    const exitPoolRequest: ExitPoolRequest = {\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance,\n    };\n\n    const exitPoolInput: EncodeExitPoolInput = {\n      poolId,\n      poolKind,\n      sender,\n      recipient,\n      outputReferences,\n      exitPoolRequest,\n    };\n\n    const exitEncoded = Relayer.encodeExitPool(exitPoolInput);\n    return exitEncoded;\n  }\n\n  static constructJoinCall(params: JoinPoolData): string {\n    const {\n      assets,\n      maxAmountsIn,\n      userData,\n      fromInternalBalance,\n      poolId,\n      kind,\n      sender,\n      recipient,\n      value,\n      outputReference,\n    } = params;\n\n    const joinPoolRequest: JoinPoolRequest = {\n      assets,\n      maxAmountsIn,\n      userData,\n      fromInternalBalance,\n    };\n\n    const joinPoolInput: EncodeJoinPoolInput = {\n      poolId,\n      kind,\n      sender,\n      recipient,\n      value,\n      outputReference,\n      joinPoolRequest,\n    };\n\n    const joinEncoded = Relayer.encodeJoinPool(joinPoolInput);\n    return joinEncoded;\n  }\n\n  /**\n   * fetchPools saves updated pools data to SOR internal onChainBalanceCache.\n   * @param {SubgraphPoolBase[]} [poolsData=[]] If poolsData passed uses this as pools source otherwise fetches from config.subgraphUrl.\n   * @param {boolean} [isOnChain=true] If isOnChain is true will retrieve all required onChain data via multicall otherwise uses subgraph values.\n   * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n   */\n  async fetchPools(): Promise<boolean> {\n    return this.swaps.fetchPools();\n  }\n\n  public getPools(): SubgraphPoolBase[] {\n    return this.swaps.getPools();\n  }\n\n  /**\n   * exitPoolAndBatchSwap Chains poolExit with batchSwap to final tokens.\n   * @param {ExitAndBatchSwapInput} params\n   * @param {string} exiter - Address used to exit pool.\n   * @param {string} swapRecipient - Address that receives final tokens.\n   * @param {string} poolId - Id of pool being exited.\n   * @param {string[]} exitTokens - Array containing addresses of tokens to receive after exiting pool. (must have the same length and order as the array returned by `getPoolTokens`.)\n   * @param {string} userData - Encoded exitPool data.\n   * @param {string[]} expectedAmountsOut - Expected amounts of exitTokens to receive when exiting pool.\n   * @param {string[]} finalTokensOut - Array containing the addresses of the final tokens out.\n   * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n   * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n   * @returns Transaction data with calldata. Outputs.amountsOut has amounts of finalTokensOut returned.\n   */\n  async exitPoolAndBatchSwap(\n    params: ExitAndBatchSwapInput\n  ): Promise<TransactionData> {\n    const slippageAmountNegative = WeiPerEther.sub(\n      BigNumber.from(params.slippage)\n    );\n    // Set min amounts out of exit pool based on slippage\n    const minAmountsOut = params.expectedAmountsOut.map((amt) =>\n      BigNumber.from(amt)\n        .mul(slippageAmountNegative)\n        .div(WeiPerEther)\n        .toString()\n    );\n\n    // Output of exit is used as input to swaps\n    const outputReferences: OutputReference[] = [];\n    params.exitTokens.forEach((asset, i) => {\n      const key = Relayer.toChainedReference(i);\n      outputReferences.push({\n        index: i,\n        key: key,\n      });\n    });\n\n    const exitCall = Relayer.constructExitCall({\n      assets: params.exitTokens,\n      minAmountsOut,\n      userData: params.userData,\n      toInternalBalance: true, // Creates exitPool request with exit to internal balance to save gas for following swaps\n      poolId: params.poolId,\n      poolKind: 0, // This will always be 0 to match supported Relayer types\n      sender: params.exiter,\n      recipient: params.exiter,\n      outputReferences: outputReferences,\n      exitPoolRequest: {} as ExitPoolRequest,\n    });\n\n    // Use swapsService to get swap info for exitTokens>finalTokens\n    // This will give batchSwap swap paths\n    // Amounts out will be worst case amounts\n    const queryResult = await this.swaps.queryBatchSwapWithSor({\n      tokensIn: params.exitTokens,\n      tokensOut: params.finalTokensOut,\n      swapType: SwapType.SwapExactIn,\n      amounts: minAmountsOut, // Use minAmountsOut as input to swap to account for slippage\n      fetchPools: params.fetchPools,\n    });\n\n    // This is a safety check to avoid issues when a swap path exists with 0 value\n    if (queryResult.returnAmounts.includes('0'))\n      throw new BalancerError(BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT);\n\n    // Update swap amounts with ref outputs from exitPool\n    queryResult.swaps.forEach((swap) => {\n      const token = queryResult.assets[swap.assetInIndex];\n      const index = params.exitTokens.indexOf(token);\n      if (index !== -1) swap.amount = outputReferences[index].key.toString();\n    });\n\n    // const tempDeltas = ['10096980', '0', '0', '10199896999999482390', '0']; // Useful for debug\n\n    // Replace tokenIn delta for swaps with amount + slippage.\n    // This gives tolerance for limit incase amount out of exitPool is larger min,\n    const slippageAmountPositive = WeiPerEther.add(params.slippage);\n    params.exitTokens.forEach((exitToken, i) => {\n      const index = queryResult.assets\n        .map((elem) => elem.toLowerCase())\n        .indexOf(exitToken.toLowerCase());\n      if (index !== -1) {\n        queryResult.deltas[index] = BigNumber.from(params.expectedAmountsOut[i])\n          .mul(slippageAmountPositive)\n          .div(WeiPerEther)\n          .toString();\n      }\n    });\n\n    // Creates limit array.\n    // Slippage set to 0. Already accounted for as swap used amounts out of pool with worst case slippage.\n    const limits = Swaps.getLimitsForSlippage(\n      params.exitTokens, // tokensIn\n      params.finalTokensOut, // tokensOut\n      SwapType.SwapExactIn,\n      queryResult.deltas, // tempDeltas // Useful for debug\n      queryResult.assets,\n      '0'\n    );\n\n    // Creates fund management using internal balance as source of tokens\n    const funds: FundManagement = {\n      sender: params.exiter,\n      recipient: params.swapRecipient,\n      fromInternalBalance: true,\n      toInternalBalance: false,\n    };\n\n    const encodedBatchSwap = Relayer.encodeBatchSwap({\n      swapType: SwapType.SwapExactIn,\n      swaps: queryResult.swaps,\n      assets: queryResult.assets,\n      funds: funds,\n      limits: limits.map((l) => l.toString()),\n      deadline: MaxUint256,\n      value: '0',\n      outputReferences: [],\n    });\n\n    // Return amounts from swap\n    const calls = [exitCall, encodedBatchSwap];\n    return {\n      function: 'multicall',\n      params: calls,\n      outputs: {\n        amountsOut: queryResult.returnAmounts,\n      },\n    };\n  }\n\n  /**\n   * swapUnwrapAaveStaticExactIn Finds swaps for tokenIn>wrapped Aave static tokens and chains with unwrap to underlying stable.\n   * @param {string[]} tokensIn - array to token addresses for swapping as tokens in.\n   * @param {string[]} aaveStaticTokens - array contains the addresses of the Aave static tokens that tokenIn will be swapped to. These will be unwrapped.\n   * @param {string[]} amountsIn - amounts to be swapped for each token in.\n   * @param {string[]} rates - The rate used to convert wrappedToken to underlying.\n   * @param {FundManagement} funds - Funding info for swap. Note - recipient should be relayer and sender should be caller.\n   * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n   * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n   * @returns Transaction data with calldata. Outputs.amountsOut has final amounts out of unwrapped tokens.\n   */\n  async swapUnwrapAaveStaticExactIn(\n    tokensIn: string[],\n    aaveStaticTokens: string[],\n    amountsIn: string[],\n    rates: string[],\n    funds: FundManagement,\n    slippage: string,\n    fetchPools: FetchPoolsInput = {\n      fetchPools: true,\n      fetchOnChain: false,\n    }\n  ): Promise<TransactionData> {\n    // Use swapsService to get swap info for tokensIn>wrappedTokens\n    const queryResult = await this.swaps.queryBatchSwapWithSor({\n      tokensIn,\n      tokensOut: aaveStaticTokens,\n      swapType: SwapType.SwapExactIn,\n      amounts: amountsIn,\n      fetchPools,\n    });\n\n    // This is a safety check to avoid issues when a swap path exists with 0 value\n    if (queryResult.returnAmounts.includes('0'))\n      throw new BalancerError(BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT);\n\n    // Gets limits array for tokensIn>wrappedTokens based on input slippage\n    const limits = Swaps.getLimitsForSlippage(\n      tokensIn, // tokensIn\n      aaveStaticTokens, // tokensOut\n      SwapType.SwapExactIn,\n      queryResult.deltas,\n      queryResult.assets,\n      slippage\n    );\n\n    const calls = this.encodeSwapUnwrap(\n      aaveStaticTokens,\n      SwapType.SwapExactIn,\n      queryResult.swaps,\n      queryResult.assets,\n      funds,\n      limits\n    );\n\n    const amountsUnwrapped = queryResult.returnAmounts.map(\n      (amountWrapped, i) => {\n        const amountUnwrapped = BigNumber.from(amountWrapped)\n          .abs()\n          .mul(rates[i])\n          .div(WeiPerEther);\n\n        // This is a safety check to avoid issues when a swap path exists with 0 value\n        if (!amountUnwrapped.gt(Zero))\n          throw new BalancerError(BalancerErrorCode.UNWRAP_ZERO_AMOUNT);\n\n        return amountUnwrapped.toString();\n      }\n    );\n\n    return {\n      function: 'multicall',\n      params: calls,\n      outputs: {\n        amountsOut: amountsUnwrapped,\n      },\n    };\n  }\n\n  /**\n   * swapUnwrapAaveStaticExactOut Finds swaps for tokenIn>wrapped Aave static tokens and chains with unwrap to underlying stable.\n   * @param {string[]} tokensIn - array to token addresses for swapping as tokens in.\n   * @param {string[]} aaveStaticTokens - array contains the addresses of the Aave static tokens that tokenIn will be swapped to. These will be unwrapped.\n   * @param {string[]} amountsUnwrapped - amounts of unwrapped tokens out.\n   * @param {string[]} rates - The rate used to convert wrappedToken to underlying.\n   * @param {FundManagement} funds - Funding info for swap. Note - recipient should be relayer and sender should be caller.\n   * @param {string} slippage - Slippage to be applied to swap section. i.e. 5%=50000000000000000.\n   * @param {FetchPoolsInput} fetchPools - Set whether SOR will fetch updated pool info.\n   * @returns Transaction data with calldata. Outputs.amountsIn has the amounts of tokensIn.\n   */\n  async swapUnwrapAaveStaticExactOut(\n    tokensIn: string[],\n    aaveStaticTokens: string[],\n    amountsUnwrapped: string[],\n    rates: string[],\n    funds: FundManagement,\n    slippage: string,\n    fetchPools: FetchPoolsInput = {\n      fetchPools: true,\n      fetchOnChain: false,\n    }\n  ): Promise<TransactionData> {\n    const amountsWrapped = amountsUnwrapped.map((amountInwrapped, i) => {\n      const amountWrapped = BigNumber.from(amountInwrapped)\n        .mul(WeiPerEther)\n        .div(rates[i]);\n\n      // This is a safety check to avoid issues when a swap path exists with 0 value\n      if (!amountWrapped.gt(Zero))\n        throw new BalancerError(BalancerErrorCode.WRAP_ZERO_AMOUNT);\n\n      return amountWrapped.toString();\n    });\n\n    // Use swapsService to get swap info for tokensIn>wrappedTokens\n    const queryResult = await this.swaps.queryBatchSwapWithSor({\n      tokensIn,\n      tokensOut: aaveStaticTokens,\n      swapType: SwapType.SwapExactOut,\n      amounts: amountsWrapped,\n      fetchPools,\n    });\n\n    // This is a safety check to avoid issues when a swap path exists with 0 value\n    if (queryResult.returnAmounts.includes('0'))\n      throw new BalancerError(BalancerErrorCode.SWAP_ZERO_RETURN_AMOUNT);\n\n    // Gets limits array for tokensIn>wrappedTokens based on input slippage\n    const limits = Swaps.getLimitsForSlippage(\n      tokensIn, // tokensIn\n      aaveStaticTokens, // tokensOut\n      SwapType.SwapExactOut,\n      queryResult.deltas,\n      queryResult.assets,\n      slippage\n    );\n\n    const calls = this.encodeSwapUnwrap(\n      aaveStaticTokens,\n      SwapType.SwapExactOut,\n      queryResult.swaps,\n      queryResult.assets,\n      funds,\n      limits\n    );\n\n    return {\n      function: 'multicall',\n      params: calls,\n      outputs: {\n        amountsIn: queryResult.returnAmounts.map((amount) => amount.toString()),\n      },\n    };\n  }\n\n  /**\n   * Creates encoded multicalls using swap outputs as input amounts for token unwrap.\n   * @param wrappedTokens\n   * @param swapType\n   * @param swaps\n   * @param assets\n   * @param funds\n   * @param limits\n   * @returns\n   */\n  encodeSwapUnwrap(\n    wrappedTokens: string[],\n    swapType: SwapType,\n    swaps: BatchSwapStep[],\n    assets: string[],\n    funds: FundManagement,\n    limits: BigNumberish[]\n  ): string[] {\n    // Output of swaps (wrappedTokens) is used as input to unwrap\n    // Need indices of output tokens and outputReferences need to be made with those as key\n    const outputReferences: OutputReference[] = [];\n    const unwrapCalls: string[] = [];\n    wrappedTokens.forEach((wrappedToken, i) => {\n      // Find index of wrappedToken in asset array. This is used as ref in Relayer.\n      const index = assets.findIndex(\n        (token) => token.toLowerCase() === wrappedToken.toLowerCase()\n      );\n      // There may be cases where swap isn't possible for wrappedToken\n      if (index === -1) return;\n\n      const key = Relayer.toChainedReference(i);\n\n      outputReferences.push({\n        index: index,\n        key: key,\n      });\n\n      // console.log(`Unwrapping ${wrappedToken} with amt: ${key.toHexString()}`);\n\n      const encodedUnwrap = Relayer.encodeUnwrapAaveStaticToken({\n        staticToken: wrappedToken,\n        sender: funds.recipient, // This should be relayer\n        recipient: funds.sender, // This will be caller\n        amount: key, // Use output of swap as input for unwrap\n        toUnderlying: true,\n        outputReferences: 0,\n      });\n\n      unwrapCalls.push(encodedUnwrap);\n    });\n\n    const encodedBatchSwap = Relayer.encodeBatchSwap({\n      swapType: swapType,\n      swaps: swaps,\n      assets: assets,\n      funds: funds, // Note - this should have Relayer as recipient\n      limits: limits.map((l) => l.toString()),\n      deadline: MaxUint256,\n      value: '0',\n      outputReferences: outputReferences,\n    });\n    return [encodedBatchSwap, ...unwrapCalls];\n  }\n\n  static signRelayerApproval = async (\n    relayerAddress: string,\n    signerAddress: string,\n    signer: JsonRpcSigner,\n    vault: Vault\n  ): Promise<string> => {\n    const approval = vault.interface.encodeFunctionData('setRelayerApproval', [\n      signerAddress,\n      relayerAddress,\n      true,\n    ]);\n\n    const signature =\n      await RelayerAuthorization.signSetRelayerApprovalAuthorization(\n        vault,\n        signer,\n        relayerAddress,\n        approval\n      );\n\n    const calldata = RelayerAuthorization.encodeCalldataAuthorization(\n      '0x',\n      MaxUint256,\n      signature\n    );\n\n    return calldata;\n  };\n}\n","import { BalancerSdkConfig } from '@/types';\nimport { GraphQLClient } from 'graphql-request';\nimport { getNetworkConfig } from '../sdk.helpers';\nimport { getSdk } from './generated/balancer-subgraph-types';\nimport { SubgraphClient } from './subgraph';\n\nexport class Subgraph {\n  public readonly url: string;\n  public readonly client: SubgraphClient;\n\n  constructor(config: BalancerSdkConfig) {\n    this.url = getNetworkConfig(config).urls.subgraph;\n    this.client = this.initClient();\n  }\n\n  private initClient(): SubgraphClient {\n    const client = new GraphQLClient(this.url);\n    return getSdk(client);\n  }\n}\n","import { Swaps } from '@/modules/swaps/swaps.module';\nimport { BalancerSdkConfig } from '@/types';\nimport {\n  SubgraphPoolBase,\n  ZERO,\n  parseToPoolsDict,\n  getSpotPriceAfterSwapForPath,\n} from '@balancer-labs/sor';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n\nexport class Pricing {\n  private readonly swaps: Swaps;\n\n  constructor(config: BalancerSdkConfig, swaps?: Swaps) {\n    if (swaps) {\n      this.swaps = swaps;\n    } else {\n      this.swaps = new Swaps(config);\n    }\n  }\n\n  /**\n   * Retrieves pools using poolDataService.\n   * @returns {boolean} Boolean indicating whether pools data was fetched correctly (true) or not (false).\n   */\n  async fetchPools(): Promise<boolean> {\n    return this.swaps.fetchPools();\n  }\n\n  /**\n   * Get currently saved pools list (fetched using fetchPools()).\n   * @returns {SubgraphPoolBase[]} pools list.\n   */\n  public getPools(): SubgraphPoolBase[] {\n    return this.swaps.getPools();\n  }\n\n  /**\n   * Calculates Spot Price for a token pair - finds most liquid path and uses this as reference SP.\n   * @param { string } tokenIn Token in address.\n   * @param { string } tokenOut Token out address.\n   * @param { SubgraphPoolBase[] } pools Optional - Pool data. Will be fetched via dataProvider if not supplied.\n   * @returns  { string } Spot price.\n   */\n  async getSpotPrice(\n    tokenIn: string,\n    tokenOut: string,\n    pools: SubgraphPoolBase[] = []\n  ): Promise<string> {\n    // If pools list isn't supplied fetch it from swaps data provider\n    if (pools.length === 0) {\n      await this.fetchPools();\n      pools = this.getPools();\n    }\n\n    // We find the path for the pair with the highest liquidity and use this as the ref SP\n    const poolsDict = parseToPoolsDict(pools, 0);\n    // This creates all paths for tokenIn>Out ordered by liquidity\n    const paths = this.swaps.sor.routeProposer.getCandidatePathsFromDict(\n      tokenIn,\n      tokenOut,\n      0,\n      poolsDict,\n      4\n    );\n\n    if (paths.length === 0)\n      throw new BalancerError(BalancerErrorCode.UNSUPPORTED_PAIR);\n    return getSpotPriceAfterSwapForPath(paths[0], 0, ZERO).toString();\n  }\n}\n","export const oneSecondInMs = 1000;\nexport const twentyFourHoursInSecs = 24 * 60 * 60;\n\nexport function toJsTimestamp(unixTimestamp: number): number {\n  return unixTimestamp * oneSecondInMs;\n}\n\nexport function toUnixTimestamp(jsTimestamp: number): number {\n  return Math.round(jsTimestamp / oneSecondInMs);\n}\n\nexport function isLessThan24Hours(incomingDateInSec: number): boolean {\n  const now = Math.round(Date.now() / 1000);\n  const difference = now - incomingDateInSec;\n\n  return difference < twentyFourHoursInSecs;\n}\n","import { Provider } from '@ethersproject/providers';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { formatUnits } from '@ethersproject/units';\nimport { Multicaller } from '@/lib/utils/multiCaller';\nimport { toJsTimestamp } from '@/lib/utils/time';\nimport { ContractAddresses } from '@/types';\nimport veBalAbi from '@/lib/abi/veBal.json';\n\nexport type VeBalLockInfo = {\n  lockedEndDate: number;\n  lockedAmount: string;\n  totalSupply: string;\n  epoch: string;\n  hasExistingLock: boolean;\n  isExpired: boolean;\n};\n\ntype VeBalLockInfoResult = {\n  locked: BigNumber[];\n  epoch: BigNumber;\n  totalSupply: BigNumber;\n};\n\nexport class VeBal {\n  addresses: ContractAddresses;\n  provider: Provider;\n\n  constructor(addresses: ContractAddresses, provider: Provider) {\n    this.addresses = addresses;\n    this.provider = provider;\n  }\n\n  public async getLockInfo(\n    account: string\n  ): Promise<VeBalLockInfo | undefined> {\n    if (!this.addresses.veBal) throw new Error('veBal address must be defined');\n\n    const multicaller = new Multicaller(\n      this.addresses.multicall,\n      this.provider,\n      veBalAbi\n    );\n\n    multicaller.call('locked', this.addresses.veBal, 'locked', [account]);\n    multicaller.call('epoch', this.addresses.veBal, 'epoch');\n    multicaller.call('totalSupply', this.addresses.veBal, 'totalSupply()');\n\n    const result = <VeBalLockInfoResult>await multicaller.execute();\n\n    return this.formatLockInfo(result);\n  }\n\n  public formatLockInfo(lockInfo: VeBalLockInfoResult): VeBalLockInfo {\n    const [lockedAmount, lockedEndDate] = lockInfo.locked;\n\n    const hasExistingLock = lockedAmount.gt(0);\n    const lockedEndDateNormalised = toJsTimestamp(lockedEndDate.toNumber());\n    const isExpired = hasExistingLock && Date.now() > lockedEndDateNormalised;\n\n    return {\n      lockedEndDate: lockedEndDateNormalised,\n      lockedAmount: formatUnits(lockedAmount),\n      totalSupply: formatUnits(lockInfo.totalSupply),\n      epoch: formatUnits(lockInfo.epoch, 0),\n      hasExistingLock,\n      isExpired,\n    };\n  }\n}\n","import { ContractAddresses } from '@/types';\nimport { Provider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\nimport { formatUnits } from '@ethersproject/units';\nimport veBalProxyAbi from '@/lib/abi/veDelegationProxy.json';\n\nexport class VeBalProxy {\n  instance: Contract;\n\n  constructor(addresses: ContractAddresses, provider: Provider) {\n    if (!addresses.veBalProxy)\n      throw new Error('veBalProxy address must be defined');\n    this.instance = new Contract(addresses.veBalProxy, veBalProxyAbi, provider);\n  }\n\n  async getAdjustedBalance(account: string): Promise<string> {\n    const balance = await this.instance.adjustedBalanceOf(account);\n    return formatUnits(balance);\n  }\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport RelayerV4ABI from '@/lib/abi/RelayerV4.json';\nimport RelayerV3ABI from '@/lib/abi/BalancerRelayer.json';\n\nexport const Relayer = (\n  address: string,\n  provider: Provider,\n  version: number\n): Contract => {\n  switch (version) {\n    case 3:\n      return new Contract(address, RelayerV3ABI, provider);\n    case 4:\n      return new Contract(address, RelayerV4ABI, provider);\n    default:\n      throw new Error('relayer not supported');\n  }\n};\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { ContractAddresses } from '@/types';\nimport { Network } from '@/lib/constants/network';\nimport { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\nimport {\n  Vault__factory,\n  Vault,\n  LidoRelayer__factory,\n  LidoRelayer,\n  BalancerHelpers,\n  BalancerHelpers__factory,\n} from '@balancer-labs/typechain';\nimport { Multicall } from './implementations/multicall';\nimport { ERC20 } from './implementations/ERC20';\nimport { VeBal } from './implementations/veBAL';\nimport { VeBalProxy } from './implementations/veBAL-proxy';\nimport { Relayer } from './implementations/relayer';\nimport { LiquidityGauge } from './implementations/liquidity-gauge';\n\ntype ContractFactory = (\n  address: string,\n  signerOrProvider: Signer | Provider\n) => Contract;\n\nexport interface ContractInstances {\n  vault: Vault;\n  balancerHelpers: BalancerHelpers;\n  lidoRelayer?: LidoRelayer;\n  multicall: Contract;\n  relayerV3?: Contract;\n  relayerV4?: Contract;\n  veBal?: VeBal;\n  veBalProxy?: VeBalProxy;\n  ERC20: ContractFactory;\n  liquidityGauge: ContractFactory;\n}\n\nexport class Contracts {\n  contractAddresses: ContractAddresses;\n  vault: Vault;\n  balancerHelpers: BalancerHelpers;\n  lidoRelayer?: LidoRelayer;\n  multicall: Contract;\n  relayerV3?: Contract;\n  relayerV4?: Contract;\n  veBal?: VeBal;\n  veBalProxy?: VeBalProxy;\n\n  /**\n   * Create instances of Balancer contracts connected to passed provider.\n   * @param { Network | ContractAddresses } networkOrAddresses\n   * @param { Provider } provider\n   */\n  constructor(\n    networkOrAddresses: Network | ContractAddresses,\n    provider: Provider\n  ) {\n    // Access addresses using passed network if available\n    if (typeof networkOrAddresses === 'number') {\n      this.contractAddresses =\n        BALANCER_NETWORK_CONFIG[networkOrAddresses].addresses.contracts;\n    } else {\n      this.contractAddresses = networkOrAddresses;\n    }\n\n    this.vault = Vault__factory.connect(this.contractAddresses.vault, provider);\n    this.balancerHelpers = BalancerHelpers__factory.connect(\n      this.contractAddresses.balancerHelpers,\n      provider\n    );\n\n    if (this.contractAddresses.lidoRelayer)\n      this.lidoRelayer = LidoRelayer__factory.connect(\n        this.contractAddresses.lidoRelayer,\n        provider\n      );\n\n    // These contracts aren't included in Balancer Typechain but are still useful.\n    // TO DO - Possibly create via Typechain but seems unnecessary?\n    this.multicall = Multicall(this.contractAddresses.multicall, provider);\n    if (this.contractAddresses.relayerV3)\n      this.relayerV3 = Relayer(this.contractAddresses.relayerV3, provider, 3);\n    if (this.contractAddresses.relayerV4)\n      this.relayerV4 = Relayer(this.contractAddresses.relayerV4, provider, 4);\n\n    if (this.contractAddresses.veBal) {\n      this.veBal = new VeBal(this.contractAddresses, provider);\n    }\n\n    if (this.contractAddresses.veBalProxy) {\n      this.veBalProxy = new VeBalProxy(this.contractAddresses, provider);\n    }\n  }\n\n  /**\n   * Expose contract instances.\n   */\n  get contracts(): ContractInstances {\n    return {\n      vault: this.vault,\n      balancerHelpers: this.balancerHelpers,\n      lidoRelayer: this.lidoRelayer,\n      multicall: this.multicall,\n      relayerV3: this.relayerV3,\n      relayerV4: this.relayerV4,\n      veBal: this.veBal,\n      veBalProxy: this.veBalProxy,\n      ERC20: this.getErc20,\n      liquidityGauge: this.getLiquidityGauge,\n    };\n  }\n\n  /**\n   * Helper to create ERC20 contract.\n   * @param { string } address ERC20 address.\n   * @param { Signer | Provider } signerOrProvider Signer or Provider.\n   * @returns Contract.\n   */\n  getErc20(address: string, signerOrProvider: Signer | Provider): Contract {\n    return ERC20(address, signerOrProvider);\n  }\n\n  /**\n   * Helper to create LiquidityGauge contract.\n   * @param { string } address Gauge address.\n   * @param { Signer | Provider} signerOrProvider Signer or Provider.\n   * @returns Contract.\n   */\n  getLiquidityGauge(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Contract {\n    return LiquidityGauge(address, signerOrProvider);\n  }\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport abi from '../../../lib/abi/ERC20.json';\n\nexport const ERC20 = (\n  address: string,\n  signerOrProvider: Signer | Provider\n): Contract => new Contract(address, abi, signerOrProvider);\n","import { Provider } from '@ethersproject/providers';\nimport { Signer } from '@ethersproject/abstract-signer';\nimport { Contract } from '@ethersproject/contracts';\nimport abi from '@/lib/abi/LiquidityGaugeV5.json';\n\nexport const LiquidityGauge = (\n  address: string,\n  signerOrProvider: Signer | Provider\n): Contract => new Contract(address, abi, signerOrProvider);\n","export const ADDRESSES = {\n  1: {\n    relayer: '0x886A3Ec7bcC508B8795990B60Fa21f85F9dB7948',\n    staBal3: {\n      id: '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',\n      address: '0x06df3b2bbb68adc8b0e302443692037ed9f91b42',\n      gauge: '0x34f33cdaed8ba0e1ceece80e5f4a73bcf234cfac',\n      assetOrder: ['DAI', 'USDC', 'USDT'],\n    },\n    bbausd1: {\n      id: '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb20000000000000000000000fe',\n      address: '0x7b50775383d3d6f0215a8f290f2c9e2eebbeceb2',\n      gauge: '0x68d019f64a7aa97e2d4e7363aee42251d08124fb',\n      assetOrder: ['bb-a-USDT', 'bb-a-DAI', 'bb-a-USDC'],\n    },\n    bbausd2: {\n      id: '0xa13a9247ea42d743238089903570127dda72fe4400000000000000000000035d',\n      address: '0xa13a9247ea42d743238089903570127dda72fe44',\n      gauge: '0xa6325e799d266632d347e41265a69af111b05403',\n    },\n    linearUsdc1: {\n      id: '0x9210f1204b5a24742eba12f710636d76240df3d00000000000000000000000fc',\n      address: '0x9210F1204b5a24742Eba12f710636D76240dF3d0',\n    },\n    linearDai1: {\n      id: '0x804cdb9116a10bb78768d3252355a1b18067bf8f0000000000000000000000fb',\n      address: '0x804CdB9116a10bB78768D3252355a1b18067bF8f',\n    },\n    linearUsdt1: {\n      id: '0x2bbf681cc4eb09218bee85ea2a5d3d13fa40fc0c0000000000000000000000fd',\n      address: '0x2BBf681cC4eb09218BEe85EA2a5d3D13Fa40fC0C',\n    },\n    linearUsdc2: {\n      id: '0x82698AECC9E28E9BB27608BD52CF57F704BD1B83000000000000000000000336',\n      address: '0x82698aeCc9E28e9Bb27608Bd52cF57f704BD1B83',\n    },\n    linearDai2: {\n      id: '0xAE37D54AE477268B9997D4161B96B8200755935C000000000000000000000337',\n      address: '0xae37D54Ae477268B9997d4161B96b8200755935c',\n    },\n    linearUsdt2: {\n      id: '0x2F4EB100552EF93840D5ADC30560E5513DFFFACB000000000000000000000334',\n      address: '0x2F4eb100552ef93840d5aDC30560E5513DFfFACb',\n    },\n    maiusd: {\n      id: '',\n      address: '',\n      gauge: '',\n      assetOrder: ['USDT', 'miMATIC', 'DAI', 'USDC'],\n    },\n    maibbausd: {\n      id: '',\n      address: '',\n      gauge: '',\n      assetOrder: ['bb-a-USD', 'miMATIC'],\n    },\n    DAI: '0x6b175474e89094c44da98b954eedeac495271d0f',\n    USDC: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n    USDT: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n    waDAI: '0x02d60b84491589974263d922d9cc7a3152618ef6',\n    waUSDC: '0xd093fa4fb80d09bb30817fdcd442d4d02ed3e5de',\n    waUSDT: '0xf8fd466f12e236f4c96f7cce6c79eadb819abf58',\n    miMATIC: '',\n  },\n  5: {\n    relayer: '0x7b9B6f094DC2Bd1c12024b0D9CC63d6993Be1888',\n    staBal3: {\n      id: '0xdcdd4a3d36dec8d57594e89763d069a7e9b223e2000000000000000000000062',\n      address: '0xdcdd4a3d36dec8d57594e89763d069a7e9b223e2',\n      gauge: '0xfd364cda96bb7db06b65706182c448a73f0a5f9a',\n      assetOrder: ['USDT', 'DAI', 'USDC'],\n    },\n    staBal3_2: {\n      id: '0xff9d677474d4344379924e10b68c8fea67e03294000000000000000000000072',\n      address: '0xff9d677474d4344379924e10b68c8fea67e03294',\n      gauge: '0x4e4ebf2aa90e41174d716a5168895357762d68af',\n      assetOrder: ['USDT', 'DAI', 'USDC'],\n    },\n    staBal3_3: {\n      id: '0x3bfc8a0509f1a68aefd446f6c19bf37b3c75a8fc0000000000000000000000a5',\n      address: '0x3bfc8a0509f1a68aefd446f6c19bf37b3c75a8fc',\n      gauge: '0x7776e1008d7c20ab54aa57a7c44fc7de602de29a',\n      assetOrder: ['USDT', 'DAI', 'USDC'],\n    },\n    bbausd1: {\n      id: '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f',\n      address: '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd',\n      gauge: '0xa2d0ea81a47d68598922cd54c59249ff58c2a3ff',\n      assetOrder: ['bb-a-USDC', 'bb-a-DAI', 'bb-a-USDT'],\n    },\n    bbausd2: {\n      id: '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd00000000000000000000005f',\n      address: '0x13acd41c585d7ebb4a9460f7c8f50be60dc080cd',\n      gauge: '0xa2d0ea81a47d68598922cd54c59249ff58c2a3ff',\n    },\n    linearUsdc1: {\n      id: '0x0595d1df64279ddb51f1bdc405fe2d0b4cc8668100000000000000000000005c',\n      address: '0x0595d1df64279ddb51f1bdc405fe2d0b4cc86681',\n    },\n    linearDai1: {\n      id: '0x5cea6a84ed13590ed14903925fa1a73c36297d9900000000000000000000005d',\n      address: '0x5cea6a84ed13590ed14903925fa1a73c36297d99',\n    },\n    linearUsdt1: {\n      id: '0xefd681a82970ac5d980b9b2d40499735e7bf3f1f00000000000000000000005e',\n      address: '0xefd681a82970ac5d980b9b2d40499735e7bf3f1f',\n    },\n    linearUsdc2: {\n      id: '0x0595d1df64279ddb51f1bdc405fe2d0b4cc8668100000000000000000000005c',\n      address: '0x0595d1df64279ddb51f1bdc405fe2d0b4cc86681',\n    },\n    linearDai2: {\n      id: '0x5cea6a84ed13590ed14903925fa1a73c36297d9900000000000000000000005d',\n      address: '0x5cea6a84ed13590ed14903925fa1a73c36297d99',\n    },\n    linearUsdt2: {\n      id: '0xefd681a82970ac5d980b9b2d40499735e7bf3f1f00000000000000000000005e',\n      address: '0xefd681a82970ac5d980b9b2d40499735e7bf3f1f',\n    },\n    maiusd: {\n      id: '0x6a8f9ab364b85725973d2a33cb9aae2dac43b5e30000000000000000000000a6',\n      address: '0x6a8f9ab364b85725973d2a33cb9aae2dac43b5e3',\n      gauge: '0x58141bdcecb7fbae006964f4131cf6f65c948357',\n      assetOrder: ['USDT', 'miMATIC', 'DAI', 'USDC'],\n    },\n    maibbausd: {\n      id: '0xb04b03b78cf79788a1931545bd2744161029648f0000000000000000000000a8',\n      address: '0xb04b03b78cf79788a1931545bd2744161029648f',\n      gauge: '0xdc3f6fc8898830e53c777543fe252b14f22680d4',\n      assetOrder: ['bb-a-USD', 'miMATIC', 'MAI BSP'],\n    },\n    USDT: '0x1f1f156e0317167c11aa412e3d1435ea29dc3cce',\n    DAI: '0x8c9e6c40d3402480ace624730524facc5482798c',\n    USDC: '0xe0c9275e44ea80ef17579d33c55136b7da269aeb',\n    waDAI: '0x89534a24450081aa267c79b07411e9617d984052',\n    waUSDC: '0x811151066392fd641fe74a9b55a712670572d161',\n    waUSDT: '0x4cb1892fddf14f772b2e39e299f44b2e5da90d04',\n    miMATIC: '0x398106564948feeb1fedea0709ae7d969d62a391',\n  },\n  137: {\n    relayer: '0xcf6a66E32dCa0e26AcC3426b851FD8aCbF12Dac7',\n    staBal3: {\n      id: '',\n      address: '',\n      gauge: '',\n      assetOrder: ['USDT', 'DAI', 'USDC'],\n    },\n    bbausd1: {\n      id: '',\n      address: '',\n      gauge: '',\n      assetOrder: ['bb-a-USDC', 'bb-a-DAI', 'bb-a-USDT'],\n    },\n    bbausd2: {\n      id: '0x48e6b98ef6329f8f0a30ebb8c7c960330d64808500000000000000000000075b',\n      address: '0x48e6b98ef6329f8f0a30ebb8c7c960330d648085',\n      gauge: '',\n    },\n    linearUsdc1: {\n      id: '',\n      address: '',\n    },\n    linearDai1: {\n      id: '',\n      address: '',\n    },\n    linearUsdt1: {\n      id: '',\n      address: '',\n    },\n    linearUsdc2: {\n      id: '0xf93579002dbe8046c43fefe86ec78b1112247bb8000000000000000000000759',\n      address: '0xf93579002dbe8046c43fefe86ec78b1112247bb8',\n    },\n    linearDai2: {\n      id: '0x178e029173417b1f9c8bc16dcec6f697bc323746000000000000000000000758',\n      address: '0x178e029173417b1f9c8bc16dcec6f697bc323746',\n    },\n    linearUsdt2: {\n      id: '0xff4ce5aaab5a627bf82f4a571ab1ce94aa365ea600000000000000000000075a',\n      address: '0xff4ce5aaab5a627bf82f4a571ab1ce94aa365ea6',\n    },\n    maiusd: {\n      id: '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000012',\n      address: '0x06df3b2bbb68adc8b0e302443692037ed9f91b42',\n      gauge: '0x72843281394e68de5d55bcf7072bb9b2ebc24150',\n      assetOrder: ['USDC', 'DAI', 'miMATIC', 'USDT'],\n    },\n    maibbausd: {\n      id: '0xb54b2125b711cd183edd3dd09433439d5396165200000000000000000000075e',\n      address: '0xb54b2125b711cd183edd3dd09433439d53961652',\n      gauge: '0x9a105ef22a59484aa2731c357049f6a13d0891f5',\n      assetOrder: ['bb-a-USD', 'miMATIC'],\n    },\n    USDT: '0xc2132d05d31c914a87c6611c10748aeb04b58e8f',\n    DAI: '0x8f3cf7ad23cd3cadbd9735aff958023239c6a063',\n    USDC: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174',\n    waDAI: '0xEE029120c72b0607344f35B17cdD90025e647B00',\n    waUSDC: '0x221836a597948Dce8F3568E044fF123108aCc42A',\n    waUSDT: '0x19C60a251e525fa88Cd6f3768416a8024e98fC19',\n    miMATIC: '0xa3fa99a148fa48d14ed51d610c367c61876997f1',\n  },\n};\n","import { StablePoolEncoder } from '@/pool-stable/encoder';\nimport { ADDRESSES } from './addresses';\nimport { Relayer } from '@/modules/relayer/relayer.module';\nimport { ExitPoolRequest } from '@/types';\nimport { BatchSwapStep, FundManagement, SwapType } from '@/modules/swaps/types';\nimport { Interface } from '@ethersproject/abi';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { MaxInt256 } from '@ethersproject/constants';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n// TODO - Ask Nico to update Typechain?\nimport balancerRelayerAbi from '@/lib/abi/BalancerRelayer.json';\nconst balancerRelayerInterface = new Interface(balancerRelayerAbi);\n\nconst EXIT_DAI = Relayer.toChainedReference('21');\nconst EXIT_USDC = Relayer.toChainedReference('22');\nconst EXIT_USDT = Relayer.toChainedReference('23');\nconst SWAP_RESULT_BBAUSD = Relayer.toChainedReference('24');\n\nexport class StaBal3Builder {\n  private addresses;\n\n  constructor(networkId: 1 | 5 | 137) {\n    this.addresses = ADDRESSES[networkId];\n  }\n\n  /**\n   * Builds migration call data.\n   * Migrates tokens from staBal3 to bbausd2 pool.\n   * Tokens that are initially staked are re-staked at the end of migration. Non-staked are not.\n   *\n   * @param userAddress User address.\n   * @param staBal3Amount Amount of BPT tokens to migrate.\n   * @param minBbausd2Out Minimum of expected BPT out ot the migration flow.\n   * @param staked Indicates whether tokens are initially staked or not.\n   * @param authorisation Encoded authorisation call.\n   * @returns Migration transaction request ready to send with signer.sendTransaction\n   */\n  calldata(\n    userAddress: string,\n    staBal3Amount: string,\n    minBbausd2Out: string,\n    staked: boolean,\n    authorisation?: string\n  ): {\n    to: string;\n    data: string;\n  } {\n    if (BigNumber.from(staBal3Amount).lte(0))\n      throw new BalancerError(BalancerErrorCode.INPUT_ZERO_NOT_ALLOWED);\n    const relayer = this.addresses.relayer;\n    let calls: string[] = [];\n\n    if (authorisation) {\n      calls = [this.buildSetRelayerApproval(authorisation)];\n    }\n\n    if (staked) {\n      calls = [\n        ...calls,\n        this.buildWithdraw(userAddress, staBal3Amount),\n        this.buildExit(relayer, staBal3Amount),\n        this.buildSwap(minBbausd2Out, relayer),\n        this.buildDeposit(userAddress),\n      ];\n    } else {\n      calls = [\n        ...calls,\n        this.buildExit(userAddress, staBal3Amount),\n        this.buildSwap(minBbausd2Out, userAddress),\n      ];\n    }\n\n    const callData = balancerRelayerInterface.encodeFunctionData('multicall', [\n      calls,\n    ]);\n\n    return {\n      to: relayer,\n      data: callData,\n    };\n  }\n\n  /**\n   * Encodes exitPool callData.\n   * Exit staBal3 pool proportionally to underlying stables. Exits to relayer.\n   * Outputreferences are used to store exit amounts for next transaction.\n   *\n   * @param sender Sender address.\n   * @param amount Amount of staBal3 BPT to exit with.\n   * @returns Encoded exitPool call. Output references.\n   */\n  buildExit(sender: string, amount: string): string {\n    // Goerli and Mainnet has different assets ordering\n    const { assetOrder } = this.addresses.staBal3;\n    const assets = assetOrder.map(\n      (key) => this.addresses[key as keyof typeof this.addresses] as string\n    );\n\n    // Assume gaugeWithdraw returns same amount value\n    const userData = StablePoolEncoder.exitExactBPTInForTokensOut(amount);\n    // const userData = StablePoolEncoder.exitExactBPTInForOneTokenOut(\n    //   amount,\n    //   assetOrder.indexOf('DAI')\n    // );\n\n    // Ask to store exit outputs for batchSwap of exit is used as input to swaps\n    const outputReferences = [\n      { index: assetOrder.indexOf('DAI'), key: EXIT_DAI },\n      { index: assetOrder.indexOf('USDC'), key: EXIT_USDC },\n      { index: assetOrder.indexOf('USDT'), key: EXIT_USDT },\n    ];\n\n    const callData = Relayer.constructExitCall({\n      assets,\n      minAmountsOut: ['0', '0', '0'],\n      userData,\n      toInternalBalance: true,\n      poolId: this.addresses.staBal3.id,\n      poolKind: 0, // This will always be 0 to match supported Relayer types\n      sender,\n      recipient: this.addresses.relayer,\n      outputReferences,\n      exitPoolRequest: {} as ExitPoolRequest,\n    });\n\n    return callData;\n  }\n\n  /**\n   * Creates encoded batchSwap function with following swaps: stables -> linear pools -> boosted pool\n   * outputreferences should contain the amount of resulting BPT.\n   *\n   * @param expectedBptReturn BPT amount expected out of the swap.\n   * @param recipient Recipient address.\n   * @returns Encoded batchSwap call. Output references.\n   */\n  buildSwap(expectedBptReturn: string, recipient: string): string {\n    const assets = [\n      this.addresses.bbausd2.address,\n      this.addresses.DAI,\n      this.addresses.linearDai2.address,\n      this.addresses.USDC,\n      this.addresses.linearUsdc2.address,\n      this.addresses.USDT,\n      this.addresses.linearUsdt2.address,\n    ];\n\n    const outputReferences = [{ index: 0, key: SWAP_RESULT_BBAUSD }];\n\n    // for each linear pool swap -\n    // linear1Bpt[linear1]stable[linear2]linear2bpt[bbausd2]bbausd2 Uses chainedReference from previous action for amount.\n    // TO DO - Will swap order matter here? John to ask Fernando.\n    const swaps: BatchSwapStep[] = [\n      {\n        poolId: this.addresses.linearDai2.id,\n        assetInIndex: 1,\n        assetOutIndex: 2,\n        amount: EXIT_DAI.toString(),\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd2.id,\n        assetInIndex: 2,\n        assetOutIndex: 0,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearUsdc2.id,\n        assetInIndex: 3,\n        assetOutIndex: 4,\n        amount: EXIT_USDC.toString(),\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd2.id,\n        assetInIndex: 4,\n        assetOutIndex: 0,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearUsdt2.id,\n        assetInIndex: 5,\n        assetOutIndex: 6,\n        amount: EXIT_USDT.toString(),\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd2.id,\n        assetInIndex: 6,\n        assetOutIndex: 0,\n        amount: '0',\n        userData: '0x',\n      },\n    ];\n\n    // For tokens going in to the Vault, the limit shall be a positive number. For tokens going out of the Vault, the limit shall be a negative number.\n    const limits = [\n      BigNumber.from(expectedBptReturn).mul(-1).toString(),\n      MaxInt256.toString(),\n      '0',\n      MaxInt256.toString(),\n      '0',\n      MaxInt256.toString(),\n      '0',\n    ];\n\n    // Swap to/from Relayer\n    const funds: FundManagement = {\n      sender: this.addresses.relayer,\n      recipient,\n      fromInternalBalance: true,\n      toInternalBalance: false,\n    };\n\n    const encodedBatchSwap = Relayer.encodeBatchSwap({\n      swapType: SwapType.SwapExactIn,\n      swaps,\n      assets,\n      funds,\n      limits,\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value: '0',\n      outputReferences,\n    });\n\n    return encodedBatchSwap;\n  }\n\n  /**\n   * Uses relayer to withdraw staked BPT from gauge and send to relayer\n   *\n   * @param sender Sender address.\n   * @param amount Amount of BPT to exit with.\n   * @returns withdraw call\n   */\n  buildWithdraw(sender: string, amount: string): string {\n    return Relayer.encodeGaugeWithdraw(\n      this.addresses.staBal3.gauge,\n      sender,\n      this.addresses.relayer,\n      amount\n    );\n  }\n\n  /**\n   * Uses relayer to deposit user's BPT to gauge and sends to recipient\n   *\n   * @param recipient Recipient address.\n   * @returns deposit call\n   */\n  buildDeposit(recipient: string): string {\n    return Relayer.encodeGaugeDeposit(\n      this.addresses.bbausd2.gauge,\n      this.addresses.relayer,\n      recipient,\n      SWAP_RESULT_BBAUSD.toString()\n    );\n  }\n\n  /**\n   * Uses relayer to approve itself to act in behalf of the user\n   *\n   * @param authorisation Encoded authorisation call.\n   * @returns relayer approval call\n   */\n  buildSetRelayerApproval(authorisation: string): string {\n    return Relayer.encodeSetRelayerApproval(\n      this.addresses.relayer,\n      true,\n      authorisation\n    );\n  }\n}\n","import { ADDRESSES } from './addresses';\nimport { Relayer } from '@/modules/relayer/relayer.module';\nimport { BatchSwapStep, FundManagement, SwapType } from '@/modules/swaps/types';\nimport { Interface } from '@ethersproject/abi';\n// TODO - Ask Nico to update Typechain?\nimport balancerRelayerAbi from '@/lib/abi/BalancerRelayer.json';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Zero } from '@ethersproject/constants';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nconst balancerRelayerInterface = new Interface(balancerRelayerAbi);\n\nconst SWAP_RESULT_BBAUSD = Relayer.toChainedReference('24');\nexport class BbaUsd1Builder {\n  private addresses;\n\n  constructor(networkId: 1 | 5 | 137) {\n    this.addresses = ADDRESSES[networkId];\n  }\n\n  /**\n   * Builds migration call data.\n   * Migrates tokens from bbausd1 to bbausd2 pool.\n   * Tokens that are initially staked are re-staked at the end of migration. Non-staked are not.\n   *\n   * @param userAddress User address.\n   * @param bbausd1Amount Amount of BPT tokens to migrate.\n   * @param minBbausd2Out Minimum of expected BPT out ot the migration flow.\n   * @param staked Indicates whether tokens are initially staked or not.\n   * @param tokenBalances Token balances in EVM scale. Array must have the same length and order as tokens in pool being migrated from. Refer to [getPoolTokens](https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/interfaces/contracts/vault/IVault.sol#L334).\n   * @param authorisation Encoded authorisation call.\n   * @returns Migration transaction request ready to send with signer.sendTransaction\n   */\n  calldata(\n    userAddress: string,\n    bbausd1Amount: string,\n    minBbausd2Out: string,\n    staked: boolean,\n    tokenBalances: string[],\n    authorisation?: string\n  ): {\n    to: string;\n    data: string;\n  } {\n    if (BigNumber.from(bbausd1Amount).lte(0))\n      throw new BalancerError(BalancerErrorCode.INPUT_ZERO_NOT_ALLOWED);\n    const relayer = this.addresses.relayer;\n    let calls: string[] = [];\n\n    if (authorisation) {\n      calls = [this.buildSetRelayerApproval(authorisation)];\n    }\n\n    if (staked) {\n      calls = [\n        ...calls,\n        this.buildWithdraw(userAddress, bbausd1Amount),\n        this.buildSwap(\n          bbausd1Amount,\n          minBbausd2Out,\n          relayer,\n          relayer,\n          tokenBalances\n        ),\n        this.buildDeposit(userAddress),\n      ];\n    } else {\n      calls = [\n        ...calls,\n        this.buildSwap(\n          bbausd1Amount,\n          minBbausd2Out,\n          userAddress,\n          userAddress,\n          tokenBalances\n        ),\n      ];\n    }\n\n    const callData = balancerRelayerInterface.encodeFunctionData('multicall', [\n      calls,\n    ]);\n\n    return {\n      to: this.addresses.relayer,\n      data: callData,\n    };\n  }\n\n  /**\n   * Creates encoded batchSwap function with following swaps: boosted -> linears -> stables -> linears -> boosted\n   * outputreferences should contain the amount of resulting BPT.\n   *\n   * @param bbausd1Amount Amount of BPT tokens to migrate.\n   * @param minBbausd2Out Minimum of expected BPT out ot the migration flow.\n   * @param sender Sender address.\n   * @param recipient Recipient address.\n   * @param tokenBalances Token balances in EVM scale.\n   * @returns Encoded batchSwap call. Output references.\n   */\n  buildSwap(\n    bbausd1Amount: string,\n    minBbausd2Out: string,\n    sender: string,\n    recipient: string,\n    tokenBalances: string[]\n  ): string {\n    const assets = [\n      this.addresses.bbausd2.address,\n      this.addresses.waDAI,\n      this.addresses.linearDai1.address,\n      this.addresses.linearDai2.address,\n      this.addresses.waUSDC,\n      this.addresses.linearUsdc1.address,\n      this.addresses.linearUsdc2.address,\n      this.addresses.waUSDT,\n      this.addresses.linearUsdt1.address,\n      this.addresses.linearUsdt2.address,\n      this.addresses.bbausd1.address,\n    ];\n\n    const outputReferences = [{ index: 0, key: SWAP_RESULT_BBAUSD }];\n\n    // Calculate proportional token amounts\n\n    // Assuming 1:1 exchange rates between tokens\n    // TODO: Fetch current prices, or use price or priceRate from subgraph?\n    const totalLiquidity = tokenBalances.reduce(\n      (sum, tokenBalance) => sum.add(BigNumber.from(tokenBalance)),\n      Zero\n    );\n\n    // bbausd1[bbausd1]blinear1[linear1]stable[linear2]blinear2[bbausd2]bbausd2 and then do that proportionally for each underlying stable.\n    // Split BPT amount proportionally:\n    const { assetOrder } = this.addresses.bbausd1;\n    const usdcBptAmt = BigNumber.from(bbausd1Amount)\n      .mul(tokenBalances[assetOrder.indexOf('bb-a-USDC')])\n      .div(totalLiquidity)\n      .toString();\n    const daiBptAmt = BigNumber.from(bbausd1Amount)\n      .mul(tokenBalances[assetOrder.indexOf('bb-a-DAI')])\n      .div(totalLiquidity)\n      .toString();\n    const usdtBptAmt = BigNumber.from(bbausd1Amount)\n      .sub(usdcBptAmt)\n      .sub(daiBptAmt)\n      .toString();\n\n    const swaps: BatchSwapStep[] = [\n      {\n        poolId: this.addresses.bbausd1.id,\n        assetInIndex: 10,\n        assetOutIndex: 2,\n        amount: daiBptAmt,\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearDai1.id,\n        assetInIndex: 2,\n        assetOutIndex: 1,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearDai2.id,\n        assetInIndex: 1,\n        assetOutIndex: 3,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd2.id,\n        assetInIndex: 3,\n        assetOutIndex: 0,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd1.id,\n        assetInIndex: 10,\n        assetOutIndex: 5,\n        amount: usdcBptAmt,\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearUsdc1.id,\n        assetInIndex: 5,\n        assetOutIndex: 4,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearUsdc2.id,\n        assetInIndex: 4,\n        assetOutIndex: 6,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd2.id,\n        assetInIndex: 6,\n        assetOutIndex: 0,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd1.id,\n        assetInIndex: 10,\n        assetOutIndex: 8,\n        amount: usdtBptAmt,\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearUsdt1.id,\n        assetInIndex: 8,\n        assetOutIndex: 7,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearUsdt2.id,\n        assetInIndex: 7,\n        assetOutIndex: 9,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd2.id,\n        assetInIndex: 9,\n        assetOutIndex: 0,\n        amount: '0',\n        userData: '0x',\n      },\n    ];\n\n    // For tokens going in to the Vault, the limit shall be a positive number. For tokens going out of the Vault, the limit shall be a negative number.\n    const limits = [\n      BigNumber.from(minBbausd2Out).mul(-1).toString(), // bbausd2\n      '0',\n      '0',\n      '0',\n      '0',\n      '0',\n      '0',\n      '0',\n      '0',\n      '0',\n      bbausd1Amount, // Max in should be bbausd1 amount\n    ];\n\n    // Swap to/from Relayer\n    const funds: FundManagement = {\n      sender,\n      recipient,\n      fromInternalBalance: false,\n      toInternalBalance: false,\n    };\n\n    const encodedBatchSwap = Relayer.encodeBatchSwap({\n      swapType: SwapType.SwapExactIn,\n      swaps,\n      assets,\n      funds,\n      limits,\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value: '0',\n      outputReferences,\n    });\n\n    return encodedBatchSwap;\n  }\n\n  /**\n   * Uses relayer to withdraw staked BPT from gauge and send to relayer\n   *\n   * @param sender Sender address.\n   * @param amount Amount of BPT to exit with.\n   * @returns withdraw call\n   */\n  buildWithdraw(sender: string, amount: string): string {\n    return Relayer.encodeGaugeWithdraw(\n      this.addresses.bbausd1.gauge,\n      sender,\n      this.addresses.relayer,\n      amount\n    );\n  }\n\n  /**\n   * Uses relayer to deposit user's BPT to gauge and sends to recipient\n   *\n   * @param recipient Recipient address.\n   * @returns deposit call\n   */\n  buildDeposit(recipient: string): string {\n    return Relayer.encodeGaugeDeposit(\n      this.addresses.bbausd2.gauge,\n      this.addresses.relayer,\n      recipient,\n      SWAP_RESULT_BBAUSD.toString()\n    );\n  }\n\n  /**\n   * Uses relayer to approve itself to act in behalf of the user\n   *\n   * @param authorisation Encoded authorisation call.\n   * @returns relayer approval call\n   */\n  buildSetRelayerApproval(authorisation: string): string {\n    return Relayer.encodeSetRelayerApproval(\n      this.addresses.relayer,\n      true,\n      authorisation\n    );\n  }\n}\n","import { StablePoolEncoder } from '@/pool-stable/encoder';\nimport { ADDRESSES } from './addresses';\nimport { Relayer } from '@/modules/relayer/relayer.module';\nimport { ExitPoolRequest } from '@/types';\nimport { BatchSwapStep, FundManagement, SwapType } from '@/modules/swaps/types';\nimport { Interface } from '@ethersproject/abi';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { MaxInt256 } from '@ethersproject/constants';\n// TODO - Ask Nico to update Typechain?\nimport balancerRelayerAbi from '@/lib/abi/BalancerRelayer.json';\nconst balancerRelayerInterface = new Interface(balancerRelayerAbi);\n\nconst SWAP_RESULT = Relayer.toChainedReference('0');\nconst EXIT_RESULTS: BigNumber[] = [];\n\nexport class StablesBuilder {\n  private addresses;\n\n  constructor(networkId: 1 | 5 | 137) {\n    this.addresses = ADDRESSES[networkId];\n  }\n\n  /**\n   * Builds migration call data.\n   * Migrates tokens from old stable to new stable phantom pools with the same underlying tokens.\n   * Tokens that are initially staked are re-staked at the end of migration. Non-staked are not.\n   *\n   * @param userAddress User address.\n   * @param from Pool info being migrated from\n   * @param to Pool info being migrated to\n   * @param bptIn Amount of BPT tokens to migrate.\n   * @param minBptOut Minimum of expected BPT out ot the migration flow.\n   * @param staked Indicates whether tokens are initially staked or not.\n   * @param underlyingTokens Underlying token addresses. Array must have the same length and order as underlying tokens in pool being migrated from. Refer to [getPoolTokens](https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/interfaces/contracts/vault/IVault.sol#L334).\n   * @param authorisation Encoded authorisation call.\n   * @returns Migration transaction request ready to send with signer.sendTransaction\n   */\n  calldata(\n    userAddress: string,\n    from: { id: string; address: string; gauge?: string },\n    to: { id: string; address: string; gauge?: string },\n    bptIn: string,\n    minBptOut: string,\n    staked: boolean,\n    underlyingTokens: string[],\n    authorisation?: string\n  ): {\n    to: string;\n    data: string;\n  } {\n    if (staked && (from.gauge == undefined || to.gauge == undefined))\n      throw new Error(\n        'Staked flow migration requires gauge addresses to be provided'\n      );\n\n    const relayer = this.addresses.relayer;\n    let calls: string[] = [];\n\n    if (authorisation) {\n      calls = [this.buildSetRelayerApproval(authorisation)];\n    }\n\n    if (staked) {\n      calls = [\n        ...calls,\n        this.buildWithdraw(userAddress, bptIn, from.gauge as string),\n        this.buildExit(from.id, relayer, bptIn, underlyingTokens),\n        this.buildSwap(minBptOut, relayer, to.id, to.address, underlyingTokens),\n        this.buildDeposit(userAddress, to.gauge as string),\n      ];\n    } else {\n      calls = [\n        ...calls,\n        this.buildExit(from.id, userAddress, bptIn, underlyingTokens),\n        this.buildSwap(\n          minBptOut,\n          userAddress,\n          to.id,\n          to.address,\n          underlyingTokens\n        ),\n      ];\n    }\n\n    const callData = balancerRelayerInterface.encodeFunctionData('multicall', [\n      calls,\n    ]);\n\n    return {\n      to: this.addresses.relayer,\n      data: callData,\n    };\n  }\n\n  /**\n   * Encodes exitPool call data.\n   * Exit stable pool proportionally to underlying stables. Exits to relayer.\n   * Outputreferences are used to store exit amounts for next transaction.\n   *\n   * @param poolId Pool id.\n   * @param sender Sender address.\n   * @param amount Amount of BPT to exit with.\n   * @param underlyingTokens Token addresses to exit to.\n   * @returns Encoded exitPool call. Output references.\n   */\n  buildExit(\n    poolId: string,\n    sender: string,\n    amount: string,\n    underlyingTokens: string[]\n  ): string {\n    // Assume gaugeWithdraw returns same amount value\n    const userData = StablePoolEncoder.exitExactBPTInForTokensOut(amount);\n\n    // Store exit outputs to be used as swaps inputs\n    const outputReferences = [];\n    for (let i = 0; i < underlyingTokens.length; i++) {\n      outputReferences[i] = {\n        index: i,\n        key: Relayer.toChainedReference(`${i + 1}`), // index 0 will be used by swap result\n      };\n      EXIT_RESULTS.push(outputReferences[i].key);\n    }\n\n    const minAmountsOut = Array<string>(underlyingTokens.length).fill('0');\n\n    const callData = Relayer.constructExitCall({\n      assets: underlyingTokens,\n      minAmountsOut,\n      userData,\n      toInternalBalance: true,\n      poolId,\n      poolKind: 0, // This will always be 0 to match supported Relayer types\n      sender,\n      recipient: this.addresses.relayer,\n      outputReferences,\n      exitPoolRequest: {} as ExitPoolRequest,\n    });\n\n    return callData;\n  }\n\n  /**\n   * Creates encoded batchSwap function to swap stables to new phantom stable pool BPT.\n   * outputreferences should contain the amount of resulting BPT.\n   *\n   * @param expectedBptReturn BPT amount expected out of the swap.\n   * @param recipient Recipient address.\n   * @param poolId Pool id\n   * @param poolAddress Pool address\n   * @param tokens Token addresses to swap from.\n   * @returns BatchSwap call.\n   */\n  buildSwap(\n    expectedBptReturn: string,\n    recipient: string,\n    poolId: string,\n    poolAddress: string,\n    tokens: string[]\n  ): string {\n    const assets = [poolAddress, ...tokens];\n\n    const outputReferences = [{ index: 0, key: SWAP_RESULT }];\n\n    const swaps: BatchSwapStep[] = [];\n    // Add a swap flow for each token provided\n    for (let i = 0; i < tokens.length; i++) {\n      swaps.push({\n        poolId,\n        assetInIndex: i + 1,\n        assetOutIndex: 0,\n        amount: EXIT_RESULTS[i].toString(),\n        userData: '0x',\n      });\n    }\n\n    // For tokens going in to the Vault, the limit shall be a positive number. For tokens going out of the Vault, the limit shall be a negative number.\n    const limits = [BigNumber.from(expectedBptReturn).mul(-1).toString()];\n    for (let i = 0; i < tokens.length; i++) {\n      limits.push(MaxInt256.toString());\n    }\n\n    // Swap to/from Relayer\n    const funds: FundManagement = {\n      sender: this.addresses.relayer,\n      recipient,\n      fromInternalBalance: true,\n      toInternalBalance: false,\n    };\n\n    const encodedBatchSwap = Relayer.encodeBatchSwap({\n      swapType: SwapType.SwapExactIn,\n      swaps,\n      assets,\n      funds,\n      limits,\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value: '0',\n      outputReferences,\n    });\n\n    return encodedBatchSwap;\n  }\n\n  /**\n   * Uses relayer to withdraw staked BPT from gauge and send to relayer\n   *\n   * @param sender Sender address.\n   * @param amount Amount of BPT to exit with.\n   * @param gaugeAddress Gauge address.\n   * @returns withdraw call\n   */\n  buildWithdraw(sender: string, amount: string, gaugeAddress: string): string {\n    return Relayer.encodeGaugeWithdraw(\n      gaugeAddress,\n      sender,\n      this.addresses.relayer,\n      amount\n    );\n  }\n\n  /**\n   * Uses relayer to deposit user's BPT to gauge and sends to recipient\n   *\n   * @param recipient Recipient address.\n   * @param gaugeAddress Gauge address.\n   * @returns deposit call\n   */\n  buildDeposit(recipient: string, gaugeAddress: string): string {\n    return Relayer.encodeGaugeDeposit(\n      gaugeAddress,\n      this.addresses.relayer,\n      recipient,\n      SWAP_RESULT.toString()\n    );\n  }\n\n  /**\n   * Uses relayer to approve itself to act in behalf of the user\n   *\n   * @param authorisation Encoded authorisation call.\n   * @returns relayer approval call\n   */\n  buildSetRelayerApproval(authorisation: string): string {\n    return Relayer.encodeSetRelayerApproval(\n      this.addresses.relayer,\n      true,\n      authorisation\n    );\n  }\n}\n","import { StablePoolEncoder } from '@/pool-stable/encoder';\nimport { ADDRESSES } from './addresses';\nimport { Relayer } from '@/modules/relayer/relayer.module';\nimport { ExitPoolRequest } from '@/types';\nimport { BatchSwapStep, FundManagement, SwapType } from '@/modules/swaps/types';\nimport { Interface } from '@ethersproject/abi';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { MaxInt256 } from '@ethersproject/constants';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n// TODO - Ask Nico to update Typechain?\nimport balancerRelayerAbi from '@/lib/abi/BalancerRelayer.json';\nconst balancerRelayerInterface = new Interface(balancerRelayerAbi);\n\nconst EXIT_MIMATIC = Relayer.toChainedReference('20');\nconst EXIT_DAI = Relayer.toChainedReference('21');\nconst EXIT_USDC = Relayer.toChainedReference('22');\nconst EXIT_USDT = Relayer.toChainedReference('23');\nconst SWAP_RESULT = Relayer.toChainedReference('24');\n\nexport class MaiusdBuilder {\n  private addresses;\n\n  constructor(networkId: 1 | 5 | 137) {\n    this.addresses = ADDRESSES[networkId];\n  }\n\n  /**\n   * Builds migration call data.\n   * Migrates tokens from maiusd to maibbausd pool.\n   * Tokens that are initially staked are re-staked at the end of migration. Non-staked are not.\n   *\n   * @param userAddress User address.\n   * @param bptIn Amount of BPT tokens to migrate.\n   * @param minBptOut Minimum of expected BPT out ot the migration flow.\n   * @param staked Indicates whether tokens are initially staked or not.\n   * @param authorisation Encoded authorisation call.\n   * @returns Migration transaction request ready to send with signer.sendTransaction\n   */\n  calldata(\n    userAddress: string,\n    bptIn: string,\n    minBptOut: string,\n    staked: boolean,\n    authorisation?: string\n  ): {\n    to: string;\n    data: string;\n  } {\n    if (BigNumber.from(bptIn).lte(0))\n      throw new BalancerError(BalancerErrorCode.INPUT_ZERO_NOT_ALLOWED);\n\n    const relayer = this.addresses.relayer;\n    let calls: string[] = [];\n\n    if (authorisation) {\n      calls = [this.buildSetRelayerApproval(authorisation)];\n    }\n\n    if (staked) {\n      calls = [\n        ...calls,\n        this.buildWithdraw(userAddress, bptIn),\n        this.buildExit(relayer, bptIn),\n        this.buildSwap(relayer, minBptOut),\n        this.buildDeposit(userAddress),\n      ];\n    } else {\n      calls = [\n        ...calls,\n        this.buildExit(userAddress, bptIn),\n        this.buildSwap(userAddress, minBptOut),\n      ];\n    }\n\n    const callData = balancerRelayerInterface.encodeFunctionData('multicall', [\n      calls,\n    ]);\n\n    return {\n      to: relayer,\n      data: callData,\n    };\n  }\n\n  /**\n   * Encodes exitPool callData.\n   * Exit maiusd pool proportionally to underlying stables. Exits to relayer.\n   * Outputreferences are used to store exit amounts for next transaction.\n   *\n   * @param sender Sender address.\n   * @param amount Amount of BPT to exit with.\n   * @returns Encoded exitPool call. Output references.\n   */\n  buildExit(sender: string, amount: string): string {\n    const { assetOrder } = this.addresses.maiusd;\n    const assets = assetOrder.map(\n      (key) => this.addresses[key as keyof typeof this.addresses] as string\n    );\n\n    // Assume gaugeWithdraw returns same amount value\n    const userData = StablePoolEncoder.exitExactBPTInForTokensOut(amount);\n\n    // Store exit outputs to be used as swaps inputs\n    const outputReferences = [\n      { index: assetOrder.indexOf('miMATIC'), key: EXIT_MIMATIC },\n      { index: assetOrder.indexOf('DAI'), key: EXIT_DAI },\n      { index: assetOrder.indexOf('USDC'), key: EXIT_USDC },\n      { index: assetOrder.indexOf('USDT'), key: EXIT_USDT },\n    ];\n\n    const minAmountsOut = Array<string>(assets.length).fill('0');\n\n    const callData = Relayer.constructExitCall({\n      assets,\n      minAmountsOut,\n      userData,\n      toInternalBalance: true,\n      poolId: this.addresses.maiusd.id,\n      poolKind: 0, // This will always be 0 to match supported Relayer types\n      sender,\n      recipient: this.addresses.relayer,\n      outputReferences,\n      exitPoolRequest: {} as ExitPoolRequest,\n    });\n\n    return callData;\n  }\n\n  /**\n   * Creates encoded batchSwap function with following swaps: stables -> linear pools -> boosted pool\n   * outputreferences should contain the amount of resulting BPT.\n   *\n   * @param recipient Sender address.\n   * @param minBptOut Minimum BPT out expected from the join transaction.\n   * @returns Encoded batchSwap call. Output references.\n   */\n  buildSwap(recipient: string, minBptOut: string): string {\n    const assets = [\n      this.addresses.bbausd2.address,\n      this.addresses.DAI,\n      this.addresses.linearDai2.address,\n      this.addresses.USDC,\n      this.addresses.linearUsdc2.address,\n      this.addresses.USDT,\n      this.addresses.linearUsdt2.address,\n      this.addresses.miMATIC,\n      this.addresses.maibbausd.address,\n    ];\n\n    const outputReferences = [{ index: 8, key: SWAP_RESULT }];\n\n    const swaps: BatchSwapStep[] = [\n      {\n        poolId: this.addresses.linearDai2.id,\n        assetInIndex: 1,\n        assetOutIndex: 2,\n        amount: EXIT_DAI.toString(),\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd2.id,\n        assetInIndex: 2,\n        assetOutIndex: 0,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.maibbausd.id,\n        assetInIndex: 0,\n        assetOutIndex: 8,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearUsdc2.id,\n        assetInIndex: 3,\n        assetOutIndex: 4,\n        amount: EXIT_USDC.toString(),\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd2.id,\n        assetInIndex: 4,\n        assetOutIndex: 0,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.maibbausd.id,\n        assetInIndex: 0,\n        assetOutIndex: 8,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.linearUsdt2.id,\n        assetInIndex: 5,\n        assetOutIndex: 6,\n        amount: EXIT_USDT.toString(),\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.bbausd2.id,\n        assetInIndex: 6,\n        assetOutIndex: 0,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.maibbausd.id,\n        assetInIndex: 0,\n        assetOutIndex: 8,\n        amount: '0',\n        userData: '0x',\n      },\n      {\n        poolId: this.addresses.maibbausd.id,\n        assetInIndex: 7,\n        assetOutIndex: 8,\n        amount: EXIT_MIMATIC.toString(),\n        userData: '0x',\n      },\n    ];\n\n    // For tokens going in to the Vault, the limit shall be a positive number. For tokens going out of the Vault, the limit shall be a negative number.\n    const limits = [\n      '0',\n      MaxInt256.toString(),\n      '0',\n      MaxInt256.toString(),\n      '0',\n      MaxInt256.toString(),\n      '0',\n      MaxInt256.toString(),\n      BigNumber.from(minBptOut).mul(-1).toString(),\n    ];\n\n    // Swap to/from Relayer\n    const funds: FundManagement = {\n      sender: this.addresses.relayer,\n      recipient,\n      fromInternalBalance: true,\n      toInternalBalance: false,\n    };\n\n    const encodedBatchSwap = Relayer.encodeBatchSwap({\n      swapType: SwapType.SwapExactIn,\n      swaps,\n      assets,\n      funds,\n      limits,\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value: '0',\n      outputReferences,\n    });\n\n    return encodedBatchSwap;\n  }\n\n  /**\n   * Uses relayer to withdraw staked BPT from gauge and send to relayer\n   *\n   * @param sender Sender address.\n   * @param amount Amount of BPT to exit with.\n   * @returns withdraw call\n   */\n  buildWithdraw(sender: string, amount: string): string {\n    return Relayer.encodeGaugeWithdraw(\n      this.addresses.maiusd.gauge,\n      sender,\n      this.addresses.relayer,\n      amount\n    );\n  }\n\n  /**\n   * Uses relayer to deposit user's BPT to gauge and sends to recipient\n   *\n   * @param recipient Recipient address.\n   * @returns deposit call\n   */\n  buildDeposit(recipient: string): string {\n    return Relayer.encodeGaugeDeposit(\n      this.addresses.maibbausd.gauge,\n      this.addresses.relayer,\n      recipient,\n      SWAP_RESULT.toString()\n    );\n  }\n\n  /**\n   * Uses relayer to approve itself to act in behalf of the user\n   *\n   * @param authorisation Encoded authorisation call.\n   * @returns relayer approval call\n   */\n  buildSetRelayerApproval(authorisation: string): string {\n    return Relayer.encodeSetRelayerApproval(\n      this.addresses.relayer,\n      true,\n      authorisation\n    );\n  }\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { StaBal3Builder } from './bbausd2-migrations/stabal3';\nimport { BbaUsd1Builder } from './bbausd2-migrations/bbausd1';\nimport { StablesBuilder } from './bbausd2-migrations/stables';\nimport { MaiusdBuilder } from './bbausd2-migrations/maiusd';\n\nexport class Migrations {\n  constructor(private network: 1 | 5 | 137) {}\n\n  /**\n   * Builds migration call data.\n   * Migrates tokens from staBal3 to bbausd2 pool.\n   * Tokens that are initially staked are re-staked at the end of migration. Non-staked are not.\n   *\n   * @param userAddress User address.\n   * @param staBal3Amount Amount of BPT tokens to migrate.\n   * @param minBbausd2Out Minimum of expected BPT out ot the migration flow.\n   * @param staked Indicates whether tokens are initially staked or not.\n   * @param authorisation Encoded authorisation call.\n   * @returns Migration transaction request ready to send with signer.sendTransaction\n   */\n  stabal3(\n    userAddress: string,\n    staBal3Amount: string,\n    minBbausd2Out: string,\n    staked: boolean,\n    authorisation?: string\n  ): {\n    to: string;\n    data: string;\n    decode: (output: string, staked: boolean) => string;\n  } {\n    const builder = new StaBal3Builder(this.network);\n    const request = builder.calldata(\n      userAddress,\n      staBal3Amount,\n      minBbausd2Out,\n      staked,\n      authorisation\n    );\n\n    return {\n      to: request.to,\n      data: request.data,\n      decode: (output, staked) => {\n        let swapIndex = staked ? 2 : 1;\n        if (authorisation) swapIndex += 1;\n        const multicallResult = defaultAbiCoder.decode(['bytes[]'], output);\n        const swapDeltas = defaultAbiCoder.decode(\n          ['int256[]'],\n          multicallResult[0][swapIndex]\n        );\n        // bbausd2AmountOut\n        return swapDeltas[0][0].abs().toString();\n      },\n    };\n  }\n\n  /**\n   * Builds migration call data.\n   * Migrates tokens from bbausd1 to bbausd2 pool.\n   * Tokens that are initially staked are re-staked at the end of migration. Non-staked are not.\n   *\n   * @param userAddress User address.\n   * @param bbausd1Amount Amount of BPT tokens to migrate.\n   * @param minBbausd2Out Minimum of expected BPT out ot the migration flow.\n   * @param staked Indicates whether tokens are initially staked or not.\n   * @param tokenBalances Token balances in EVM scale. Array must have the same length and order as tokens in pool being migrated from. Refer to [getPoolTokens](https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/interfaces/contracts/vault/IVault.sol#L334).\n   * @param authorisation Encoded authorisation call.\n   * @returns Migration transaction request ready to send with signer.sendTransaction\n   */\n  bbaUsd(\n    userAddress: string,\n    bbausd1Amount: string,\n    minBbausd2Out: string,\n    staked: boolean,\n    tokenBalances: string[],\n    authorisation?: string\n  ): {\n    to: string;\n    data: string;\n    decode: (output: string, staked: boolean) => string;\n  } {\n    const builder = new BbaUsd1Builder(this.network);\n    const request = builder.calldata(\n      userAddress,\n      bbausd1Amount,\n      minBbausd2Out,\n      staked,\n      tokenBalances,\n      authorisation\n    );\n\n    return {\n      to: request.to,\n      data: request.data,\n      decode: (output, staked) => {\n        let swapIndex = staked ? 1 : 0;\n        if (authorisation) swapIndex += 1;\n        const multicallResult = defaultAbiCoder.decode(['bytes[]'], output);\n        const swapDeltas = defaultAbiCoder.decode(\n          ['int256[]'],\n          multicallResult[0][swapIndex]\n        );\n        return swapDeltas[0][0].abs().toString(); // bptOut\n      },\n    };\n  }\n\n  /**\n   * Builds migration call data.\n   * Migrates tokens from old stable to new stable phantom pools with the same underlying tokens.\n   * Tokens that are initially staked are re-staked at the end of migration. Non-staked are not.\n   *\n   * @param userAddress User address.\n   * @param from Pool info being migrated from\n   * @param to Pool info being migrated to\n   * @param bptIn Amount of BPT tokens to migrate.\n   * @param minBptOut Minimum of expected BPT out ot the migration flow.\n   * @param staked Indicates whether tokens are initially staked or not.\n   * @param underlyingTokens Underlying token addresses. Array must have the same length and order as tokens in pool being migrated from. Refer to [getPoolTokens](https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/interfaces/contracts/vault/IVault.sol#L334).\n   * @param authorisation Encoded authorisation call.\n   * @returns Migration transaction request ready to send with signer.sendTransaction\n   */\n  stables(\n    userAddress: string,\n    from: { id: string; address: string; gauge?: string },\n    to: { id: string; address: string; gauge?: string },\n    bptIn: string,\n    minBptOut: string,\n    staked: boolean,\n    underlyingTokens: string[],\n    authorisation?: string\n  ): {\n    to: string;\n    data: string;\n    decode: (output: string, staked: boolean) => string;\n  } {\n    const builder = new StablesBuilder(this.network);\n    const request = builder.calldata(\n      userAddress,\n      from,\n      to,\n      bptIn,\n      minBptOut,\n      staked,\n      underlyingTokens,\n      authorisation\n    );\n\n    return {\n      to: request.to,\n      data: request.data,\n      decode: (output, staked) => {\n        let swapIndex = staked ? 2 : 1;\n        if (authorisation) swapIndex += 1;\n        const multicallResult = defaultAbiCoder.decode(['bytes[]'], output);\n        const swapDeltas = defaultAbiCoder.decode(\n          ['int256[]'],\n          multicallResult[0][swapIndex]\n        );\n        // bbausd2AmountOut\n        return swapDeltas[0][0].abs().toString();\n      },\n    };\n  }\n\n  /**\n   * Builds migration call data.\n   * Migrates tokens from staBal3 to bbausd2 pool.\n   * Tokens that are initially staked are re-staked at the end of migration. Non-staked are not.\n   *\n   * @param userAddress User address.\n   * @param bptIn Amount of BPT tokens to migrate.\n   * @param minBptOut Minimum of expected BPT out ot the migration flow.\n   * @param staked Indicates whether tokens are initially staked or not.\n   * @param authorisation Encoded authorisation call.\n   * @returns Migration transaction request ready to send with signer.sendTransaction\n   */\n  maiusd(\n    userAddress: string,\n    bptIn: string,\n    minBptOut: string,\n    staked: boolean,\n    authorisation?: string\n  ): {\n    to: string;\n    data: string;\n    decode: (output: string, staked: boolean) => string;\n  } {\n    const builder = new MaiusdBuilder(this.network);\n    const request = builder.calldata(\n      userAddress,\n      bptIn,\n      minBptOut,\n      staked,\n      authorisation\n    );\n\n    return {\n      to: request.to,\n      data: request.data,\n      decode: (output, staked) => {\n        let swapIndex = staked ? 2 : 1;\n        if (authorisation) swapIndex += 1;\n        const multicallResult = defaultAbiCoder.decode(['bytes[]'], output);\n        const swapDeltas = defaultAbiCoder.decode(\n          ['int256[]'],\n          multicallResult[0][swapIndex]\n        );\n        const bptOut = swapDeltas[0][8].abs().toString();\n        return bptOut;\n      },\n    };\n  }\n}\n","import { Network } from '@/lib/constants/network';\nimport { Migrations } from './migrations';\n\nexport class Zaps {\n  public migrations: Migrations;\n\n  constructor(public network: Network) {\n    this.migrations = new Migrations(network as 1 | 5);\n  }\n}\n","/**\n * Calculate the Impermanent Loss for a given pool and user.\n *\n * 1. Prepare the data:\n *  a. get exit price for pools' tokens\n *  b. get entry price for pools' tokens\n * 2. calculate delta values for tokens in pools\n * 3. calculate and return the impermanent loss as percentage rounded to 2 decimal places.\n *\n */\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Findable, Pool, PoolToken, Price } from '@/types';\n\ntype Asset = {\n  priceDelta: number;\n  weight: number;\n};\n\ntype TokenPrices = {\n  [key: string]: number;\n};\n\nexport class ImpermanentLossService {\n  constructor(\n    private tokenPrices: Findable<Price>,\n    private tokenHistoricalPrices: Findable<Price>\n  ) {}\n\n  /**\n   * entry point to calculate impermanent loss.\n   *\n   * The function will\n   *  - retrieve the tokens' historical value at the desired time in the future\n   *  - calculate the relative variation between current and historical value\n   *  - return the IL in percentage rounded to 2 decimal places\n   *\n   * @param timestamp UNIX timestamp from which the IL is desired\n   * @param pool the pool\n   * @returns the impermanent loss as percentage rounded to 2 decimal places\n   */\n  async calcImpLoss(timestamp: number, pool: Pool): Promise<number> {\n    if (timestamp * 1000 >= Date.now()) {\n      console.error(\n        `[ImpermanentLossService][calcImpLoss]Error: ${BalancerError.getMessage(\n          BalancerErrorCode.TIMESTAMP_IN_THE_FUTURE\n        )}`\n      );\n      throw new BalancerError(BalancerErrorCode.TIMESTAMP_IN_THE_FUTURE);\n    }\n    const assets = await this.prepareData(timestamp, pool);\n\n    const poolValueDelta = this.getPoolValueDelta(assets);\n    const holdValueDelta = this.getHoldValueDelta(assets);\n\n    const impLoss = this.calculateImpermanentLoss(\n      poolValueDelta,\n      holdValueDelta\n    );\n    return impLoss;\n  }\n\n  calculateImpermanentLoss(\n    poolValueDelta: number,\n    holdValueDelta: number\n  ): number {\n    return (\n      Math.floor(Math.abs(poolValueDelta / holdValueDelta - 1) * 100 * 100) /\n      100\n    );\n  }\n\n  getPoolValueDelta(assets: Asset[]): number {\n    return assets.reduce(\n      (result, asset) =>\n        result * Math.pow(Math.abs(asset.priceDelta + 1), asset.weight),\n      1\n    );\n  }\n\n  getHoldValueDelta(assets: Asset[]): number {\n    return assets.reduce(\n      (result, asset) => result + Math.abs(asset.priceDelta + 1) * asset.weight,\n      0\n    );\n  }\n\n  /**\n   * prepare the data for calculating the impermanent loss\n   *\n   * @param entryTimestamp UNIX timestamp from which the IL is desired\n   * @param pool the pool\n   * @returns a list of pair weight/price delta for each token in the pool\n   * @throws BalancerError if\n   *  1. a token's price is unknown\n   *  2. a token's weight is unknown\n   *  3. the user has no liquidity invested in the pool\n   */\n  async prepareData(entryTimestamp: number, pool: Pool): Promise<Asset[]> {\n    const poolTokens = pool.tokens.filter(\n      (token) => token.address !== pool.address\n    );\n\n    const weights = this.getWeights(poolTokens);\n\n    const tokenAddresses = poolTokens.map((t) => t.address);\n\n    const entryPrices = await this.getEntryPrices(\n      entryTimestamp,\n      tokenAddresses\n    );\n    const exitPrices: TokenPrices = await this.getExitPrices(poolTokens);\n\n    return this.getAssets(poolTokens, exitPrices, entryPrices, weights);\n  }\n\n  getAssets(\n    poolTokens: PoolToken[],\n    exitPrices: TokenPrices,\n    entryPrices: TokenPrices,\n    weights: number[]\n  ): Asset[] {\n    return poolTokens.map((token, i) => ({\n      priceDelta: this.getDelta(\n        entryPrices[token.address],\n        exitPrices[token.address]\n      ),\n      weight: weights[i],\n    }));\n  }\n\n  getDelta(entryPrice: number, exitPrice: number): number {\n    if (entryPrice === 0) {\n      console.error(\n        `[ImpermanentLossService][getDelta]Error: ${BalancerError.getMessage(\n          BalancerErrorCode.ILLEGAL_PARAMETER\n        )}: entry price is 0`\n      );\n      throw new BalancerError(BalancerErrorCode.ILLEGAL_PARAMETER);\n    }\n    return (exitPrice - entryPrice) / entryPrice;\n  }\n\n  /**\n   * returns the list of token's weights.\n   *\n   * @param poolTokens the pools' tokens\n   * @returns the list of token's weights\n   * @throws BalancerError if a token's weight is missing\n   *\n   */\n  getWeights(poolTokens: PoolToken[]): number[] {\n    const noWeights = poolTokens.every((token) => !token.weight);\n    const uniformWeight = Math.round((1 / poolTokens.length) * 100) / 100;\n    const weights: number[] = noWeights\n      ? poolTokens.map(() => uniformWeight) // if no weight is returned we assume the tokens are balanced uniformly in the pool\n      : poolTokens.map((token) => Number(token.weight ?? 0));\n\n    if (weights.some((w) => w === 0)) {\n      console.error(\n        `[ImpermanentLossService][getWeights]Error: ${BalancerError.getMessage(\n          BalancerErrorCode.MISSING_WEIGHT\n        )}`\n      );\n      throw new BalancerError(BalancerErrorCode.MISSING_WEIGHT);\n    }\n    return weights;\n  }\n\n  /**\n   * get the current's tokens' prices\n   * @param tokens the pools' tokens\n   * @returns a list of tokens with prices\n   */\n  async getExitPrices(tokens: PoolToken[]): Promise<TokenPrices> {\n    const prices = await Promise.all(\n      tokens.map((token) => this.tokenPrices.find(token.address))\n    ).catch(() => []);\n\n    if (!prices.length || prices.some((price) => price?.usd === undefined)) {\n      console.error(\n        `[ImpermanentLossService][getExitPrices]Error: ${BalancerError.getMessage(\n          BalancerErrorCode.MISSING_PRICE_RATE\n        )}`\n      );\n      throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n    }\n\n    const tokensWithPrice = tokens.map((token, i) => ({\n      ...token,\n      price: prices[i],\n    }));\n\n    const tokenPrices: TokenPrices = {};\n    for (const token of tokensWithPrice) {\n      if (token.price?.usd) tokenPrices[token.address] = +token.price.usd; // price.usd is never undefined but JS complains\n    }\n    return tokenPrices;\n  }\n\n  /**\n   * get the tokens' price at a given time\n   *\n   * @param timestamp the Unix timestamp\n   * @param tokenAddresses the tokens' addresses\n   * @returns a map of tokens' price\n   */\n  async getEntryPrices(\n    timestamp: number,\n    tokenAddresses: string[]\n  ): Promise<TokenPrices> {\n    const prices: TokenPrices = {};\n    for (const address of tokenAddresses) {\n      const price = await this.tokenHistoricalPrices\n        .findBy(address, timestamp)\n        .catch((reason) => {\n          console.error(\n            `[ImpermanentLossService][getEntryPrices]Error: ${reason.message}`\n          );\n          return undefined;\n        });\n      if (!price?.usd) {\n        console.error(\n          `[ImpermanentLossService][getEntryPrices]Error: ${BalancerError.getMessage(\n            BalancerErrorCode.MISSING_PRICE_RATE\n          )}`\n        );\n        throw new BalancerError(BalancerErrorCode.MISSING_PRICE_RATE);\n      }\n      prices[address] = +price.usd;\n    }\n    return prices;\n  }\n}\n","/**\n * Weekly Bal emissions are fixed / year according to:\n * https://docs.google.com/spreadsheets/d/1FY0gi596YWBOTeu_mrxhWcdF74SwKMNhmu0qJVgs0KI/edit#gid=0\n *\n * Using regular numbers for simplicity assuming frontend use only.\n *\n * Calculation source\n * https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/liquidity-mining/contracts/BalancerTokenAdmin.sol\n */\n\nexport const INITIAL_RATE = 145000;\nexport const START_EPOCH_TIME = 1648465251;\nconst RATE_REDUCTION_TIME = 365 * 86400;\nconst RATE_REDUCTION_COEFFICIENT = 2 ** (1 / 4);\n\n/**\n * Weekly BAL emissions\n *\n * @param currentTimestamp used to get the epoch\n * @returns BAL emitted in a week\n */\nexport const weekly = (\n  currentTimestamp: number = Math.round(new Date().getTime() / 1000)\n): number => {\n  const miningEpoch = Math.floor(\n    (currentTimestamp - START_EPOCH_TIME) / RATE_REDUCTION_TIME\n  );\n\n  const rate = INITIAL_RATE * RATE_REDUCTION_COEFFICIENT ** -miningEpoch;\n\n  return rate;\n};\n\n/**\n * Total BAL emitted in epoch (1 year)\n *\n * @param epoch starting from 0 for the first year of emissions\n * @returns BAL emitted in epoch\n */\nexport const total = (epoch: number): number => {\n  const weeklyRate = INITIAL_RATE * RATE_REDUCTION_COEFFICIENT ** -epoch;\n  const dailyRate = weeklyRate / 7;\n\n  return dailyRate * 365;\n};\n\n/**\n * Total BAL emitted between two timestamps\n *\n * @param start starting timestamp\n * @param end ending timestamp\n * @returns BAL emitted in period\n */\nexport const between = (start: number, end: number): number => {\n  if (start < START_EPOCH_TIME) {\n    throw 'start timestamp before emission schedule deployment';\n  }\n  if (end < start) {\n    throw 'cannot finish before starting';\n  }\n\n  let totalEmissions = 0;\n\n  const startingEpoch = Math.floor(\n    (start - START_EPOCH_TIME) / RATE_REDUCTION_TIME\n  );\n  const endingEpoch = Math.floor(\n    (end - START_EPOCH_TIME) / RATE_REDUCTION_TIME\n  );\n\n  for (\n    let currentEpoch = startingEpoch;\n    currentEpoch <= endingEpoch;\n    currentEpoch++\n  ) {\n    totalEmissions += total(currentEpoch);\n  }\n\n  // Subtract what isn't emmited within the time range\n  const startingEpochEnd =\n    START_EPOCH_TIME + RATE_REDUCTION_TIME * (startingEpoch + 1);\n  const endingEpochStart = START_EPOCH_TIME + RATE_REDUCTION_TIME * endingEpoch;\n\n  const secondsInStartingEpoch = startingEpochEnd - start;\n  const secondsInEndingEpoch = end - endingEpochStart;\n\n  totalEmissions -=\n    (total(startingEpoch) * (RATE_REDUCTION_TIME - secondsInStartingEpoch)) /\n    RATE_REDUCTION_TIME;\n  totalEmissions -=\n    (total(endingEpoch) * (RATE_REDUCTION_TIME - secondsInEndingEpoch)) /\n    RATE_REDUCTION_TIME;\n\n  return totalEmissions;\n};\n","import { Findable, Price } from '@/types';\nimport { BaseFeeDistributor } from '@/modules/data';\n\nexport interface ProtocolRevenueData {\n  lastWeekBalRevenue: number;\n  lastWeekBBAUsdRevenue: number;\n  veBalSupply: number;\n}\n\nexport class ProtocolRevenue {\n  constructor(\n    private repository: BaseFeeDistributor,\n    private tokenPrices: Findable<Price>\n  ) {}\n\n  async data(now = Date.now()): Promise<ProtocolRevenueData> {\n    const data = await this.repository.multicallData(now);\n    const balPrice = await this.tokenPrices.find(data.balAddress);\n\n    if (!balPrice || !balPrice.usd) {\n      throw `No BAL USD price found`;\n    }\n\n    return {\n      lastWeekBalRevenue: data.balAmount * parseFloat(balPrice.usd),\n      lastWeekBBAUsdRevenue: data.bbAUsdAmount * data.bbAUsdPrice,\n      veBalSupply: data.veBalSupply,\n    };\n  }\n}\n","/**\n * Calculates pool fees\n *\n * 1. Pool fees in last 24hrs\n */\nimport { isLessThan24Hours } from '@/lib/utils/time';\nimport { Pool, Findable, PoolAttribute } from '@/types';\n\nexport class PoolFees {\n  constructor(\n    private yesterdaysPools: Findable<Pool, PoolAttribute> | undefined\n  ) {}\n\n  // 🚨 this is adding 1 call to get yesterday's block height and 2nd call to fetch yesterday's pools data from subgraph\n  // TODO: find a better data source for that eg. add blocks to graph, replace with a database, or dune\n  async last24h(pool: Pool): Promise<number> {\n    let yesterdaysPool;\n    if (this.yesterdaysPools) {\n      yesterdaysPool = await this.yesterdaysPools.find(pool.id);\n    }\n    if (!pool.totalSwapFee) {\n      return 0;\n    }\n\n    if (!yesterdaysPool?.totalSwapFee) {\n      // Process edge case when pool creation time is less that 24h\n      if (pool.createTime && isLessThan24Hours(pool.createTime)) {\n        return parseFloat(pool.totalSwapFee);\n      }\n      return 0;\n    }\n\n    return (\n      parseFloat(pool.totalSwapFee) - parseFloat(yesterdaysPool.totalSwapFee)\n    );\n  }\n}\n","import { formatUnits } from '@ethersproject/units';\nimport * as emissions from '@/modules/data/bal/emissions';\nimport type {\n  Findable,\n  Pool,\n  PoolAttribute,\n  Price,\n  Token,\n  TokenAttribute,\n  LiquidityGauge,\n  Network,\n  PoolToken,\n} from '@/types';\nimport { BaseFeeDistributor, RewardData } from '@/modules/data';\nimport { ProtocolRevenue } from './protocol-revenue';\nimport { Liquidity } from '@/modules/liquidity/liquidity.module';\nimport { identity, zipObject, pickBy } from 'lodash';\nimport { PoolFees } from '../fees/fees';\nimport { BALANCER_NETWORK_CONFIG } from '@/lib/constants/config';\n\nexport interface AprBreakdown {\n  swapFees: number;\n  tokenAprs: {\n    total: number;\n    breakdown: { [address: string]: number };\n  };\n  stakingApr: {\n    min: number;\n    max: number;\n  };\n  rewardAprs: {\n    total: number;\n    breakdown: { [address: string]: number };\n  };\n  protocolApr: number;\n  min: number;\n  max: number;\n}\n\n/**\n * Calculates pool APR via summing up sources of APR:\n *\n * 1. Swap fees (pool level) data coming from subgraph\n * 2. Yield bearing pool tokens, with data from external sources eg: http endpoints, subgraph, onchain\n *    * stETH\n *    * aave\n *    * usd+\n *    map token: calculatorFn\n * 3. Staking rewards based from veBal gauges\n */\nexport class PoolApr {\n  constructor(\n    private pools: Findable<Pool, PoolAttribute>,\n    private tokenPrices: Findable<Price>,\n    private tokenMeta: Findable<Token, TokenAttribute>,\n    private tokenYields: Findable<number>,\n    private feeCollector: Findable<number>,\n    private yesterdaysPools?: Findable<Pool, PoolAttribute>,\n    private liquidityGauges?: Findable<LiquidityGauge>,\n    private feeDistributor?: BaseFeeDistributor\n  ) {}\n\n  /**\n   * Pool revenue via swap fees.\n   * Fees and liquidity are takes from subgraph as USD floats.\n   *\n   * @returns APR [bsp] from fees accumulated over last 24h\n   */\n  async swapFees(pool: Pool): Promise<number> {\n    // 365 * dailyFees * (1 - protocolFees) / totalLiquidity\n    const last24hFees = await this.last24hFees(pool);\n    const totalLiquidity = await this.totalLiquidity(pool);\n    // TODO: what to do when we are missing last24hFees or totalLiquidity?\n    // eg: stable phantom returns 0\n    if (!last24hFees || !totalLiquidity) {\n      return 0;\n    }\n    const dailyFees =\n      last24hFees * (1 - (await this.protocolSwapFeePercentage(pool)));\n    const feesDailyBsp = 10000 * (dailyFees / parseFloat(totalLiquidity));\n\n    return Math.round(365 * feesDailyBsp);\n  }\n\n  /**\n   * Pool revenue from holding yield-bearing wrapped tokens.\n   *\n   * @returns APR [bsp] from tokens contained in the pool\n   */\n  async tokenAprs(pool: Pool): Promise<AprBreakdown['tokenAprs']> {\n    if (!pool.tokens) {\n      return {\n        total: 0,\n        breakdown: {},\n      };\n    }\n\n    const totalLiquidity = await this.totalLiquidity(pool);\n\n    // Filter out BPT: token with the same address as the pool\n    // TODO: move this to data layer\n    const bptFreeTokens = pool.tokens.filter((token) => {\n      return token.address !== pool.address;\n    });\n\n    // Get each token APRs\n    const aprs = await Promise.all(\n      bptFreeTokens.map(async (token) => {\n        let apr = 0;\n        const tokenYield = await this.tokenYields.find(token.address);\n\n        if (tokenYield) {\n          if (pool.poolType === 'MetaStable') {\n            apr =\n              tokenYield * (1 - (await this.protocolSwapFeePercentage(pool)));\n          } else if (\n            pool.poolType === 'ComposableStable' ||\n            (pool.poolType === 'Weighted' && pool.poolTypeVersion === 2)\n          ) {\n            if (token.isExemptFromYieldProtocolFee) {\n              apr = tokenYield;\n            } else {\n              apr =\n                tokenYield *\n                (1 - parseFloat(pool.protocolYieldFeeCache || '0.5'));\n            }\n          } else {\n            apr = tokenYield;\n          }\n        } else {\n          // Handle subpool APRs with recursive call to get the subPool APR\n          const subPool = await this.pools.findBy('address', token.address);\n\n          if (subPool) {\n            // INFO: Liquidity mining APR can't cascade to other pools\n            const subSwapFees = await this.swapFees(subPool);\n            const subtokenAprs = await this.tokenAprs(subPool);\n            let subApr = subtokenAprs.total;\n            if (\n              pool.poolType === 'ComposableStable' ||\n              (pool.poolType === 'Weighted' && pool.poolTypeVersion === 2)\n            ) {\n              if (!token.isExemptFromYieldProtocolFee) {\n                subApr =\n                  subApr *\n                  (1 - parseFloat(pool.protocolYieldFeeCache || '0.5'));\n              }\n            }\n            apr = subSwapFees + subApr;\n          }\n        }\n\n        return apr;\n      })\n    );\n\n    // Get token weights normalised by usd price\n    const getWeight = async (token: PoolToken): Promise<number> => {\n      let tokenPrice: string | undefined;\n      if (token.weight) {\n        return parseFloat(token.weight);\n      } else if (token.token?.pool?.poolType) {\n        const poolToken = await this.pools.findBy('address', token.address);\n        if (poolToken) {\n          tokenPrice = (await this.bptPrice(poolToken)).toString();\n        }\n      } else {\n        tokenPrice =\n          token.price?.usd ||\n          (await this.tokenPrices.find(token.address))?.usd ||\n          token.token?.latestUSDPrice;\n      }\n      if (tokenPrice) {\n        // using floats assuming frontend purposes with low precision needs\n        const tokenValue = parseFloat(token.balance) * parseFloat(tokenPrice);\n        return tokenValue / parseFloat(totalLiquidity);\n      } else {\n        throw `No price for ${token.address}`;\n      }\n    };\n\n    // Normalise tokenAPRs according to weights\n    const weightedAprs = await Promise.all(\n      bptFreeTokens.map(async (token, idx) => {\n        if (aprs[idx] === 0) {\n          return 0;\n        }\n\n        const weight = await getWeight(token);\n        return Math.round(aprs[idx] * weight);\n      })\n    );\n\n    // sum them up to get pool APRs\n    const apr = weightedAprs.reduce((sum, apr) => sum + apr, 0);\n    const breakdown = pickBy(\n      zipObject(\n        bptFreeTokens.map((t) => t.address),\n        weightedAprs\n      ),\n      identity\n    );\n\n    return {\n      total: apr,\n      breakdown,\n    };\n  }\n\n  /**\n   * Calculates staking rewards based on veBal gauges deployed with Curve Finance contracts.\n   * https://curve.readthedocs.io/dao-gauges.html\n   *\n   * Terminology:\n   *  - LP token of a gauge is a BPT of a pool\n   *  - Depositing into a gauge is called staking on the frontend\n   *  - gauge totalSupply - BPT tokens deposited to a gauge\n   *  - gauge workingSupply - effective BPT tokens participating in reward distribution. sum of 40% deposit + 60% boost from individual user's veBal\n   *  - gauge relative weight - weight of this gauge in bal inflation distribution [0..1] scaled to 1e18\n   *\n   * APR sources:\n   *  - gauge BAL emissions = min: 40% of totalSupply, max: 40% of totalSupply + 60% of totalSupply * gauge LPs voting power\n   *    https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeV5.vy#L338\n   *  - gauge reward tokens: Admin or designated depositor has an option to deposit additional reward with a weekly accruing cadence.\n   *    https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/liquidity-mining/contracts/gauges/ethereum/LiquidityGaugeV5.vy#L641\n   *    rate: amount of token per second\n   *\n   * @param pool\n   * @param boost range between 1 and 2.5\n   * @returns APR [bsp] from protocol rewards.\n   */\n  async stakingApr(pool: Pool, boost = 1): Promise<number> {\n    if (!this.liquidityGauges) {\n      return 0;\n    }\n\n    // Data resolving\n    const gauge = await this.liquidityGauges.findBy('poolId', pool.id);\n    if (\n      !gauge ||\n      (pool.chainId == 1 && gauge.workingSupply == 0) ||\n      (pool.chainId > 1 && gauge.totalSupply == 0)\n    ) {\n      return 0;\n    }\n\n    const bal =\n      BALANCER_NETWORK_CONFIG[pool.chainId as Network].addresses.tokens.bal;\n    if (!bal) {\n      return 0;\n    }\n\n    const [balPrice, bptPriceUsd] = await Promise.all([\n      this.tokenPrices.find(bal), // BAL\n      this.bptPrice(pool),\n    ]);\n\n    if (!balPrice?.usd) {\n      throw 'Missing BAL price';\n    }\n\n    const balPriceUsd = parseFloat(balPrice.usd);\n\n    // Subgraph is returning BAL staking rewards as reward tokens for L2 gauges.\n    if (pool.chainId > 1) {\n      if (!gauge.rewardTokens) {\n        return 0;\n      }\n\n      const balReward = bal && gauge.rewardTokens[bal];\n      if (balReward) {\n        const reward = await this.rewardTokenApr(bal, balReward);\n        const totalSupplyUsd = gauge.totalSupply * bptPriceUsd;\n        const rewardValue = reward.value / totalSupplyUsd;\n        return Math.round(10000 * rewardValue);\n      } else {\n        return 0;\n      }\n    }\n\n    const now = Math.round(new Date().getTime() / 1000);\n    const totalBalEmissions = (emissions.weekly(now) / 7) * 365;\n    const gaugeBalEmissions = totalBalEmissions * gauge.relativeWeight;\n    const gaugeBalEmissionsUsd = gaugeBalEmissions * balPriceUsd;\n    const gaugeSupply = (gauge.workingSupply + 0.4) / 0.4; // Only 40% of LP token staked accrue emissions, totalSupply = workingSupply * 2.5\n    const gaugeSupplyUsd = gaugeSupply * bptPriceUsd;\n    const gaugeBalAprBps = Math.round(\n      (boost * 10000 * gaugeBalEmissionsUsd) / gaugeSupplyUsd\n    );\n\n    return gaugeBalAprBps;\n  }\n\n  /**\n   * Some gauges are holding tokens distributed as rewards to LPs.\n   *\n   * @param pool\n   * @returns APR [bsp] from token rewards.\n   */\n  async rewardAprs(pool: Pool): Promise<AprBreakdown['rewardAprs']> {\n    if (!this.liquidityGauges) {\n      return { total: 0, breakdown: {} };\n    }\n\n    // Data resolving\n    const gauge = await this.liquidityGauges.findBy('poolId', pool.id);\n    if (\n      !gauge ||\n      !gauge.rewardTokens ||\n      Object.keys(gauge.rewardTokens).length < 1\n    ) {\n      return { total: 0, breakdown: {} };\n    }\n\n    // BAL rewards already returned as stakingApr, so we can filter them out\n    const bal =\n      BALANCER_NETWORK_CONFIG[pool.chainId as Network].addresses.tokens.bal;\n    const rewardTokenAddresses = Object.keys(gauge.rewardTokens).filter(\n      (a) => a != bal\n    );\n\n    // Gets each tokens rate, extrapolate to a year and convert to USD\n    const rewards = rewardTokenAddresses.map(async (tAddress) => {\n      /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n      const data = gauge!.rewardTokens![tAddress];\n      return this.rewardTokenApr(tAddress, data);\n    });\n\n    // Get the gauge totalSupplyUsd\n    const bptPriceUsd = await this.bptPrice(pool);\n    const totalSupplyUsd = gauge.totalSupply * bptPriceUsd;\n\n    if (totalSupplyUsd == 0) {\n      return { total: 0, breakdown: {} };\n    }\n\n    const rewardTokensBreakdown: Record<string, number> = {};\n\n    let total = 0;\n    for await (const reward of Object.values(rewards)) {\n      const rewardValue = reward.value / totalSupplyUsd;\n      const rewardValueScaled = Math.round(10000 * rewardValue);\n      total += rewardValueScaled;\n      rewardTokensBreakdown[reward.address] = rewardValueScaled;\n    }\n\n    return {\n      total,\n      breakdown: rewardTokensBreakdown,\n    };\n  }\n\n  /**\n   * 80BAL-20WETH pool is accruing protocol revenue.\n   *\n   * @param pool\n   * @returns accrued protocol revenue as APR [bsp]\n   */\n  async protocolApr(pool: Pool): Promise<number> {\n    const veBalPoolId =\n      '0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014';\n\n    if (pool.id != veBalPoolId || !this.feeDistributor) {\n      return 0;\n    }\n\n    const revenue = new ProtocolRevenue(this.feeDistributor, this.tokenPrices);\n\n    const { lastWeekBalRevenue, lastWeekBBAUsdRevenue, veBalSupply } =\n      await revenue.data();\n\n    const bptPrice = await this.bptPrice(pool);\n    if (!bptPrice) {\n      throw 'bptPrice for veBal pool missing';\n    }\n\n    const dailyRevenue = (lastWeekBalRevenue + lastWeekBBAUsdRevenue) / 7;\n    const apr = Math.round(\n      (10000 * (365 * dailyRevenue)) / (bptPrice * veBalSupply)\n    );\n\n    return apr;\n  }\n\n  /**\n   * Composes all sources for total pool APR.\n   *\n   * @returns pool APR split [bsp]\n   */\n  async apr(pool: Pool): Promise<AprBreakdown> {\n    const [\n      swapFees,\n      tokenAprs,\n      minStakingApr,\n      maxStakingApr,\n      rewardAprs,\n      protocolApr,\n    ] = await Promise.all([\n      this.swapFees(pool), // pool snapshot for last 24h fees dependency\n      this.tokenAprs(pool),\n      this.stakingApr(pool),\n      this.stakingApr(pool, 2.5),\n      this.rewardAprs(pool),\n      this.protocolApr(pool),\n    ]);\n\n    return {\n      swapFees,\n      tokenAprs,\n      stakingApr: {\n        min: minStakingApr,\n        max: maxStakingApr,\n      },\n      rewardAprs,\n      protocolApr,\n      min: swapFees + tokenAprs.total + rewardAprs.total + minStakingApr,\n      max:\n        swapFees +\n        tokenAprs.total +\n        rewardAprs.total +\n        protocolApr +\n        maxStakingApr,\n    };\n  }\n\n  private async last24hFees(pool: Pool): Promise<number> {\n    const poolFees = new PoolFees(this.yesterdaysPools);\n    return poolFees.last24h(pool);\n  }\n\n  /**\n   * Total Liquidity based on USD token prices taken from external price feed, eg: coingecko.\n   *\n   * @param pool\n   * @returns Pool liquidity in USD\n   */\n  private async totalLiquidity(pool: Pool): Promise<string> {\n    try {\n      const liquidityService = new Liquidity(this.pools, this.tokenPrices);\n      const liquidity = await liquidityService.getLiquidity(pool);\n      return liquidity;\n    } catch (err) {\n      console.error('Liquidity calculcation failed, falling back to subgraph');\n      return pool.totalLiquidity;\n    }\n  }\n\n  /**\n   * BPT price as pool totalLiquidity / pool total Shares\n   * Total Liquidity is calculated based on USD token prices taken from external price feed, eg: coingecko.\n   *\n   * @param pool\n   * @returns BPT price in USD\n   */\n  private async bptPrice(pool: Pool) {\n    return (\n      parseFloat(await this.totalLiquidity(pool)) / parseFloat(pool.totalShares)\n    );\n  }\n\n  private async protocolSwapFeePercentage(pool: Pool) {\n    let fee = 0;\n\n    if (\n      pool.poolType == 'ComposableStable' ||\n      (pool.poolType == 'Weighted' && pool.poolTypeVersion == 2)\n    ) {\n      fee = 0;\n    } else if (pool.protocolSwapFeeCache) {\n      fee = parseFloat(pool.protocolSwapFeeCache);\n    } else {\n      fee = (await this.feeCollector.find('')) || 0;\n    }\n\n    return fee;\n  }\n\n  private async rewardTokenApr(tokenAddress: string, rewardData: RewardData) {\n    if (rewardData.period_finish.toNumber() < Date.now() / 1000) {\n      return {\n        address: tokenAddress,\n        value: 0,\n      };\n    } else {\n      const yearlyReward = rewardData.rate.mul(86400).mul(365);\n      const price = await this.tokenPrices.find(tokenAddress);\n      if (price && price.usd) {\n        let decimals = 18;\n        if (rewardData.decimals) {\n          decimals = rewardData.decimals;\n        } else {\n          const meta = await this.tokenMeta.find(tokenAddress);\n          decimals = meta?.decimals || 18;\n        }\n        const yearlyRewardUsd =\n          parseFloat(formatUnits(yearlyReward, decimals)) *\n          parseFloat(price.usd);\n        return {\n          address: tokenAddress,\n          value: yearlyRewardUsd,\n        };\n      } else {\n        throw `No USD price for ${tokenAddress}`;\n      }\n    }\n  }\n}\n","import { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { isSameAddress, parsePoolInfo } from '@/lib/utils';\nimport { Pool, PoolAttribute, PoolType } from '@/types';\nimport { Zero, WeiPerEther } from '@ethersproject/constants';\nimport { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport { Findable } from '../data/types';\nimport { PoolTypeConcerns } from '../pools/pool-type-concerns';\n\ntype SpotPrices = { [tokenIn: string]: string };\nexport interface Node {\n  address: string;\n  id: string;\n  joinAction: JoinAction;\n  exitAction: ExitAction;\n  type: string;\n  children: Node[];\n  marked: boolean;\n  index: string;\n  proportionOfParent: BigNumber;\n  parent: Node | undefined;\n  isLeaf: boolean;\n  spotPrices: SpotPrices;\n  decimals: number;\n}\n\ntype JoinAction =\n  | 'input'\n  | 'batchSwap'\n  | 'wrap'\n  | 'joinPool'\n  | 'wrapAaveDynamicToken'\n  | 'wrapERC4626';\nconst joinActions = new Map<PoolType, JoinAction>();\njoinActions.set(PoolType.AaveLinear, 'batchSwap');\njoinActions.set(PoolType.EulerLinear, 'batchSwap');\njoinActions.set(PoolType.ERC4626Linear, 'batchSwap');\njoinActions.set(PoolType.Element, 'batchSwap');\njoinActions.set(PoolType.Investment, 'joinPool');\njoinActions.set(PoolType.LiquidityBootstrapping, 'joinPool');\njoinActions.set(PoolType.MetaStable, 'joinPool');\njoinActions.set(PoolType.Stable, 'joinPool');\njoinActions.set(PoolType.StablePhantom, 'batchSwap');\njoinActions.set(PoolType.Weighted, 'joinPool');\njoinActions.set(PoolType.ComposableStable, 'joinPool');\n\ntype ExitAction =\n  | 'output'\n  | 'batchSwap'\n  | 'unwrap'\n  | 'exitPool'\n  | 'unwrapAaveStaticToken'\n  | 'unwrapERC4626';\nconst exitActions = new Map<PoolType, ExitAction>();\nexitActions.set(PoolType.AaveLinear, 'batchSwap');\njoinActions.set(PoolType.EulerLinear, 'batchSwap');\nexitActions.set(PoolType.ERC4626Linear, 'batchSwap');\nexitActions.set(PoolType.Element, 'batchSwap');\nexitActions.set(PoolType.Investment, 'exitPool');\nexitActions.set(PoolType.LiquidityBootstrapping, 'exitPool');\nexitActions.set(PoolType.MetaStable, 'exitPool');\nexitActions.set(PoolType.Stable, 'exitPool');\nexitActions.set(PoolType.StablePhantom, 'batchSwap');\nexitActions.set(PoolType.Weighted, 'exitPool');\nexitActions.set(PoolType.ComposableStable, 'exitPool');\n\nexport class PoolGraph {\n  constructor(private pools: Findable<Pool, PoolAttribute>) {}\n\n  async buildGraphFromRootPool(\n    poolId: string,\n    wrapMainTokens: boolean\n  ): Promise<Node> {\n    const rootPool = await this.pools.find(poolId);\n    if (!rootPool) throw new BalancerError(BalancerErrorCode.POOL_DOESNT_EXIST);\n    const nodeIndex = 0;\n    const rootNode = await this.buildGraphFromPool(\n      rootPool.address,\n      nodeIndex,\n      undefined,\n      WeiPerEther,\n      wrapMainTokens\n    );\n    return rootNode[0];\n  }\n\n  getTokenTotal(pool: Pool): BigNumber {\n    const bptIndex = pool.tokensList.indexOf(pool.address);\n    let total = Zero;\n    const { parsedBalances } = parsePoolInfo(pool);\n    parsedBalances.forEach((balance, i) => {\n      // Ignore phantomBpt balance\n      if (bptIndex !== i) {\n        total = total.add(balance);\n      }\n    });\n    return total;\n  }\n\n  async buildGraphFromPool(\n    address: string,\n    nodeIndex: number,\n    parent: Node | undefined,\n    proportionOfParent: BigNumber,\n    wrapMainTokens: boolean\n  ): Promise<[Node, number]> {\n    const pool = await this.pools.findBy('address', address);\n\n    if (!pool) {\n      if (!parent) {\n        // If pool not found by address and is root pool (without parent), then throw error\n        throw new BalancerError(BalancerErrorCode.POOL_DOESNT_EXIST);\n      } else {\n        // If pool not found by address, but it has parent, assume it's a leaf token and add a leafTokenNode\n        // TODO: maybe it's a safety issue? Can we be safer?\n        const parentPool = (await this.pools.findBy(\n          'address',\n          parent.address\n        )) as Pool;\n        const leafTokenDecimals =\n          parentPool.tokens[parentPool.tokensList.indexOf(address)].decimals ??\n          18;\n\n        const nodeInfo = PoolGraph.createInputTokenNode(\n          nodeIndex,\n          address,\n          leafTokenDecimals,\n          parent,\n          proportionOfParent\n        );\n        return nodeInfo;\n      }\n    }\n\n    const joinAction = joinActions.get(pool.poolType);\n    const exitAction = exitActions.get(pool.poolType);\n    if (!joinAction || !exitAction)\n      throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n\n    const tokenTotal = this.getTokenTotal(pool);\n    // Spot price service\n    const { spotPriceCalculator } = PoolTypeConcerns.from(pool.poolType);\n    const spotPrices: SpotPrices = {};\n    let decimals = 18;\n    // Spot price of a path is product of the sp of each pool in path. We calculate the sp for each pool token here to use as required later.\n    pool.tokens.forEach((token) => {\n      if (isSameAddress(token.address, pool.address)) {\n        // Updated node with BPT token decimal\n        decimals = token.decimals ? token.decimals : 18;\n        return;\n      }\n      const sp = spotPriceCalculator.calcPoolSpotPrice(\n        token.address,\n        pool.address,\n        pool\n      );\n      spotPrices[token.address] = sp;\n    });\n\n    let poolNode: Node = {\n      address: pool.address,\n      id: pool.id,\n      type: pool.poolType,\n      joinAction,\n      exitAction,\n      children: [],\n      marked: false,\n      index: nodeIndex.toString(),\n      parent,\n      proportionOfParent,\n      isLeaf: false,\n      spotPrices,\n      decimals,\n    };\n    nodeIndex++;\n    if (pool.poolType.toString().includes('Linear')) {\n      [poolNode, nodeIndex] = this.createLinearNodeChildren(\n        poolNode,\n        nodeIndex,\n        pool,\n        wrapMainTokens\n      );\n    } else {\n      const { parsedBalances } = parsePoolInfo(pool);\n      for (let i = 0; i < pool.tokens.length; i++) {\n        // ignore any phantomBpt tokens\n        if (isSameAddress(pool.tokens[i].address, pool.address)) continue;\n        let proportion: BigNumber;\n        // If the pool is a weighted pool we can use the actual tokenWeight as proportion\n        if (pool.poolType === 'Weighted') {\n          const tokenWeight = pool.tokens[i].weight as string;\n          proportion = parseFixed(tokenWeight, 18);\n        } else {\n          proportion = BigNumber.from(parsedBalances[i])\n            .mul((1e18).toString())\n            .div(tokenTotal);\n        }\n        const finalProportion = proportion\n          .mul(proportionOfParent)\n          .div((1e18).toString());\n        const childNode = await this.buildGraphFromPool(\n          pool.tokens[i].address,\n          nodeIndex,\n          poolNode,\n          finalProportion,\n          wrapMainTokens\n        );\n        nodeIndex = childNode[1];\n        if (childNode[0]) poolNode.children.push(childNode[0]);\n      }\n    }\n    return [poolNode, nodeIndex];\n  }\n\n  createLinearNodeChildren(\n    linearPoolNode: Node,\n    nodeIndex: number,\n    linearPool: Pool,\n    wrapMainTokens: boolean\n  ): [Node, number] {\n    if (wrapMainTokens) {\n      // Linear pool will be joined via wrapped token. This will be the child node.\n      const wrappedNodeInfo = this.createWrappedTokenNode(\n        linearPool,\n        nodeIndex,\n        linearPoolNode,\n        linearPoolNode.proportionOfParent\n      );\n      linearPoolNode.children.push(wrappedNodeInfo[0]);\n      return [linearPoolNode, wrappedNodeInfo[1]];\n    } else {\n      // Main token\n      if (linearPool.mainIndex === undefined)\n        throw new Error('Issue With Linear Pool');\n\n      const mainTokenDecimals =\n        linearPool.tokens[linearPool.mainIndex].decimals ?? 18;\n\n      const nodeInfo = PoolGraph.createInputTokenNode(\n        nodeIndex,\n        linearPool.tokensList[linearPool.mainIndex],\n        mainTokenDecimals,\n        linearPoolNode,\n        linearPoolNode.proportionOfParent\n      );\n      linearPoolNode.children.push(nodeInfo[0]);\n      nodeIndex = nodeInfo[1];\n      return [linearPoolNode, nodeIndex];\n    }\n  }\n\n  createWrappedTokenNode(\n    linearPool: Pool,\n    nodeIndex: number,\n    parent: Node | undefined,\n    proportionOfParent: BigNumber\n  ): [Node, number] {\n    if (\n      linearPool.wrappedIndex === undefined ||\n      linearPool.mainIndex === undefined\n    )\n      throw new Error('Issue With Linear Pool');\n\n    // Relayer can support different wrapped tokens\n    let joinAction: JoinAction = 'wrapAaveDynamicToken';\n    switch (linearPool.poolType) {\n      case PoolType.ERC4626Linear:\n        joinAction = 'wrapERC4626';\n    }\n    let exitAction: ExitAction = 'unwrapAaveStaticToken';\n    switch (linearPool.poolType) {\n      case PoolType.ERC4626Linear:\n        exitAction = 'unwrapERC4626';\n    }\n\n    const wrappedTokenNode: Node = {\n      type: 'WrappedToken',\n      address: linearPool.tokensList[linearPool.wrappedIndex],\n      id: 'N/A',\n      children: [],\n      marked: false,\n      joinAction,\n      exitAction,\n      index: nodeIndex.toString(),\n      parent,\n      proportionOfParent,\n      isLeaf: false,\n      spotPrices: {},\n      decimals: 18,\n    };\n    nodeIndex++;\n\n    const mainTokenDecimals =\n      linearPool.tokens[linearPool.mainIndex].decimals ?? 18;\n\n    const inputNode = PoolGraph.createInputTokenNode(\n      nodeIndex,\n      linearPool.tokensList[linearPool.mainIndex],\n      mainTokenDecimals,\n      wrappedTokenNode,\n      proportionOfParent\n    );\n    wrappedTokenNode.children = [inputNode[0]];\n    nodeIndex = inputNode[1];\n    return [wrappedTokenNode, nodeIndex];\n  }\n\n  static createInputTokenNode(\n    nodeIndex: number,\n    address: string,\n    decimals: number,\n    parent: Node | undefined,\n    proportionOfParent: BigNumber\n  ): [Node, number] {\n    return [\n      {\n        address,\n        id: 'N/A',\n        type: 'Input',\n        children: [],\n        marked: false,\n        joinAction: 'input',\n        exitAction: 'output',\n        index: nodeIndex.toString(), // This will be updated with real amounts in join construction.\n        parent,\n        proportionOfParent,\n        isLeaf: true,\n        spotPrices: {},\n        decimals,\n      },\n      nodeIndex + 1,\n    ];\n  }\n\n  static orderByBfs(root: Node): Node[] {\n    // Breadth first traversal of graph\n    const nodes: Node[] = [];\n    const orderedNodes: Node[] = [];\n    root.marked = true;\n    nodes.push(root);\n    while (nodes.length > 0) {\n      const currentNode = nodes.shift(); // removes first\n      if (currentNode) orderedNodes.push(currentNode);\n      currentNode?.children.forEach((c) => {\n        if (!c.marked) {\n          c.marked = true;\n          nodes.push(c);\n        }\n      });\n    }\n    return orderedNodes;\n  }\n\n  // Return a list of leaf token addresses\n  static getLeafAddresses(nodes: Node[]): string[] {\n    return nodes.filter((n) => n.isLeaf).map((n) => n.address);\n  }\n\n  // Get full graph from root pool and return ordered nodes\n  static getGraphNodes = async (\n    isJoin: boolean,\n    poolId: string,\n    pools: Findable<Pool, PoolAttribute>,\n    wrapMainTokens: boolean\n  ): Promise<Node[]> => {\n    const rootPool = await pools.find(poolId);\n    if (!rootPool) throw new BalancerError(BalancerErrorCode.POOL_DOESNT_EXIST);\n    const poolsGraph = new PoolGraph(pools);\n\n    const rootNode = await poolsGraph.buildGraphFromRootPool(\n      poolId,\n      wrapMainTokens\n    );\n\n    if (rootNode.id !== poolId) throw new Error('Error creating graph nodes');\n\n    if (isJoin) return PoolGraph.orderByBfs(rootNode).reverse();\n    else return PoolGraph.orderByBfs(rootNode);\n  };\n}\n","import axios from 'axios';\nimport { MaxInt256 } from '@ethersproject/constants';\nimport { networkAddresses } from '@/lib/constants/config';\nimport { BalancerTenderlyConfig } from '@/types';\n\ntype StateOverrides = {\n  [address: string]: { value: { [key: string]: string } };\n};\n\nexport default class TenderlyHelper {\n  private vaultAddress;\n  private tenderlyUrl;\n  private opts?;\n  private blockNumber: number | undefined;\n\n  constructor(\n    private chainId: number,\n    tenderlyConfig?: BalancerTenderlyConfig\n  ) {\n    const { contracts } = networkAddresses(this.chainId);\n    this.vaultAddress = contracts.vault as string;\n    if (tenderlyConfig?.user && tenderlyConfig?.project) {\n      this.tenderlyUrl = `https://api.tenderly.co/api/v1/account/${tenderlyConfig.user}/project/${tenderlyConfig.project}/`;\n    } else {\n      this.tenderlyUrl = 'https://api.balancer.fi/tenderly/';\n    }\n\n    if (tenderlyConfig?.accessKey) {\n      this.opts = {\n        headers: {\n          'X-Access-Key': tenderlyConfig.accessKey,\n        },\n      };\n    }\n\n    this.blockNumber = tenderlyConfig?.blockNumber;\n  }\n\n  simulateMulticall = async (\n    to: string,\n    data: string,\n    userAddress: string,\n    tokens: string[]\n  ): Promise<string> => {\n    const tokensOverrides = await this.encodeBalanceAndAllowanceOverrides(\n      userAddress,\n      tokens\n    );\n    const relayerApprovalOverride = await this.encodeRelayerApprovalOverride(\n      userAddress,\n      to\n    );\n    const encodedStateOverrides = {\n      ...tokensOverrides,\n      ...relayerApprovalOverride,\n    };\n    return this.simulateTransaction(\n      to,\n      data,\n      userAddress,\n      encodedStateOverrides\n    );\n  };\n\n  simulateTransaction = async (\n    to: string,\n    data: string,\n    userAddress: string,\n    encodedStateOverrides: StateOverrides\n  ): Promise<string> => {\n    // Map encoded-state response into simulate request body by replacing property names\n    const state_objects = Object.fromEntries(\n      Object.keys(encodedStateOverrides).map((address) => {\n        // Object.fromEntries require format [key, value] instead of {key: value}\n        return [address, { storage: encodedStateOverrides[address].value }];\n      })\n    );\n\n    const body = {\n      // -- Standard TX fields --\n      network_id: this.chainId.toString(),\n      block_number: this.blockNumber,\n      from: userAddress,\n      to,\n      input: data,\n      // gas: 8000000,\n      // gas_price: '0',\n      // value: '0',\n      // -- Simulation config (tenderly specific) --\n      save_if_fails: true,\n      // save: true,\n      simulation_type: 'quick', // remove this while developing/debugging\n      state_objects,\n    };\n\n    const SIMULATE_URL = this.tenderlyUrl + 'simulate';\n\n    const resp = await axios.post(SIMULATE_URL, body, this.opts);\n\n    const simulatedTransactionOutput =\n      resp.data.transaction.transaction_info.call_trace.output;\n\n    return simulatedTransactionOutput;\n  };\n\n  // Encode relayer approval state override\n  encodeRelayerApprovalOverride = async (\n    userAddress: string,\n    relayerAddress: string\n  ): Promise<StateOverrides> => {\n    const stateOverrides: StateOverrides = {\n      [`${this.vaultAddress}`]: {\n        value: {\n          [`_approvedRelayers[${userAddress}][${relayerAddress}]`]:\n            true.toString(),\n        },\n      },\n    };\n\n    const encodedStateOverrides = await this.requestStateOverrides(\n      stateOverrides\n    );\n\n    return encodedStateOverrides;\n  };\n\n  // Encode token balances and allowances overrides to max value\n  encodeBalanceAndAllowanceOverrides = async (\n    userAddress: string,\n    tokens: string[]\n  ): Promise<StateOverrides> => {\n    if (tokens.length === 0) return {};\n\n    // Create balances and allowances overrides for each token address provided\n    let stateOverrides: StateOverrides = {};\n    tokens.forEach(\n      (token) =>\n        (stateOverrides = {\n          ...stateOverrides,\n          [`${token}`]: {\n            value: {\n              [`_balances[${userAddress}]`]: MaxInt256.toString(),\n              [`_allowances[${userAddress}][${this.vaultAddress}]`]:\n                MaxInt256.toString(),\n              [`balanceOf[${userAddress}]`]: MaxInt256.toString(),\n              [`allowance[${userAddress}][${this.vaultAddress}]`]:\n                MaxInt256.toString(),\n              [`balances[${userAddress}]`]: MaxInt256.toString(),\n              [`allowed[${userAddress}][${this.vaultAddress}]`]:\n                MaxInt256.toString(),\n            },\n          },\n        })\n    );\n\n    const encodedStateOverrides = await this.requestStateOverrides(\n      stateOverrides\n    );\n\n    if (\n      Object.keys(encodedStateOverrides).some((k) => {\n        return Object.keys(encodedStateOverrides[k].value).length !== 2;\n      })\n    )\n      throw new Error(\n        \"Couldn't encode state overrides - states should match the ones in the contracts\"\n      );\n\n    return encodedStateOverrides;\n  };\n\n  private requestStateOverrides = async (\n    stateOverrides: StateOverrides\n  ): Promise<StateOverrides> => {\n    const ENCODE_STATES_URL = this.tenderlyUrl + 'contracts/encode-states';\n    const body = {\n      networkID: this.chainId.toString(),\n      stateOverrides,\n    };\n\n    const encodedStatesResponse = await axios.post(\n      ENCODE_STATES_URL,\n      body,\n      this.opts\n    );\n    const encodedStateOverrides = encodedStatesResponse.data\n      .stateOverrides as StateOverrides;\n\n    if (\n      !encodedStateOverrides ||\n      Object.keys(encodedStateOverrides).length !==\n        Object.keys(stateOverrides).length\n    )\n      throw new Error(\n        \"Couldn't encode state overrides - contracts should be verified and whitelisted on Tenderly\"\n      );\n\n    return encodedStateOverrides;\n  };\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { cloneDeep } from 'lodash';\nimport { Interface } from '@ethersproject/abi';\nimport { BigNumber, parseFixed } from '@ethersproject/bignumber';\nimport {\n  AddressZero,\n  MaxInt256,\n  WeiPerEther,\n  Zero,\n} from '@ethersproject/constants';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Relayer } from '@/modules/relayer/relayer.module';\nimport { BatchSwapStep, FundManagement, SwapType } from '@/modules/swaps/types';\nimport { StablePoolEncoder } from '@/pool-stable';\nimport {\n  BalancerNetworkConfig,\n  JoinPoolRequest,\n  Pool,\n  PoolAttribute,\n  PoolType,\n} from '@/types';\nimport { Findable } from '../data/types';\nimport { PoolGraph, Node } from '../graph/graph';\n\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport TenderlyHelper from '@/lib/utils/tenderlyHelper';\nimport balancerRelayerAbi from '@/lib/abi/RelayerV4.json';\nimport { networkAddresses } from '@/lib/constants/config';\nimport { AssetHelpers, isSameAddress } from '@/lib/utils';\nimport {\n  SolidityMaths,\n  _computeScalingFactor,\n  _upscale,\n} from '@/lib/utils/solidityMaths';\nimport { calcPriceImpact } from '../pricing/priceImpact';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { getPoolAddress } from '@/pool-utils';\nconst balancerRelayerInterface = new Interface(balancerRelayerAbi);\n\nexport class Join {\n  private relayer: string;\n  private wrappedNativeAsset;\n  private tenderlyHelper: TenderlyHelper;\n  constructor(\n    private pools: Findable<Pool, PoolAttribute>,\n    networkConfig: BalancerNetworkConfig\n  ) {\n    const { tokens, contracts } = networkAddresses(networkConfig.chainId);\n    this.relayer = contracts.relayerV4 as string;\n    this.wrappedNativeAsset = tokens.wrappedNativeAsset;\n\n    this.tenderlyHelper = new TenderlyHelper(\n      networkConfig.chainId,\n      networkConfig.tenderly\n    );\n  }\n\n  async joinPool(\n    poolId: string,\n    tokensIn: string[],\n    amountsIn: string[],\n    userAddress: string,\n    wrapMainTokens: boolean,\n    slippage: string,\n    authorisation?: string\n  ): Promise<{\n    to: string;\n    callData: string;\n    expectedOut: string;\n    minOut: string;\n    priceImpact: string;\n  }> {\n    if (tokensIn.length != amountsIn.length)\n      throw new BalancerError(BalancerErrorCode.INPUT_LENGTH_MISMATCH);\n\n    // Create nodes for each pool/token interaction and order by breadth first\n    const orderedNodes = await PoolGraph.getGraphNodes(\n      true,\n      poolId,\n      this.pools,\n      wrapMainTokens\n    );\n\n    const joinPaths = Join.getJoinPaths(orderedNodes, tokensIn, amountsIn);\n\n    const totalBptZeroPi = Join.totalBptZeroPriceImpact(joinPaths);\n    /*\n    - Create calls with 0 min bpt for each root join\n    - static call (or V4 special call) to get actual amounts for each root join\n    - Apply slippage to amounts\n    - Recreate calls with minAmounts === actualAmountsWithSlippage\n    - Return minAmoutOut (sum actualAmountsWithSlippage), UI would use this to display to user\n    - Return updatedCalls, UI would use this to execute tx\n    */\n    // Create calls with 0 expected for each root join\n    // Peek is enabled here so we can static call the returned amounts and use these to set limits\n    const { callData: queryData, outputIndexes } = await this.createCalls(\n      joinPaths,\n      userAddress,\n      undefined,\n      authorisation\n    );\n\n    // static call (or V4 special call) to get actual amounts for each root join\n    const { amountsOut, totalAmountOut } = await this.amountsOutByJoinPath(\n      userAddress,\n      queryData,\n      tokensIn,\n      outputIndexes\n    );\n\n    const { minAmountsOut, totalMinAmountOut } = this.minAmountsOutByJoinPath(\n      slippage,\n      amountsOut,\n      totalAmountOut\n    );\n    const priceImpact = calcPriceImpact(\n      BigInt(totalAmountOut),\n      totalBptZeroPi.toBigInt(),\n      true\n    ).toString();\n\n    // Create calls with minAmountsOut\n    const { callData, deltas } = await this.createCalls(\n      joinPaths,\n      userAddress,\n      minAmountsOut,\n      authorisation\n    );\n\n    this.assertDeltas(poolId, deltas, tokensIn, amountsIn, totalMinAmountOut);\n\n    return {\n      to: this.relayer,\n      callData,\n      expectedOut: totalAmountOut,\n      minOut: totalMinAmountOut,\n      priceImpact,\n    };\n  }\n\n  private assertDeltas(\n    poolId: string,\n    deltas: Record<string, BigNumber>,\n    tokensIn: string[],\n    amountsIn: string[],\n    minBptOut: string\n  ): void {\n    const poolAddress = getPoolAddress(poolId);\n    const outDiff = deltas[poolAddress.toLowerCase()].add(minBptOut);\n\n    if (outDiff.abs().gt(3)) {\n      console.error(\n        `join assertDeltas, bptOut: `,\n        poolAddress,\n        minBptOut,\n        deltas[poolAddress.toLowerCase()]?.toString()\n      );\n      throw new BalancerError(BalancerErrorCode.JOIN_DELTA_AMOUNTS);\n    }\n    delete deltas[poolAddress.toLowerCase()];\n\n    tokensIn.forEach((token, i) => {\n      if (\n        !BigNumber.from(amountsIn[i]).eq(0) &&\n        deltas[token.toLowerCase()]?.toString() !== amountsIn[i]\n      ) {\n        console.error(\n          `join assertDeltas, tokenIn: `,\n          token,\n          amountsIn[i],\n          deltas[token.toLowerCase()]?.toString()\n        );\n        throw new BalancerError(BalancerErrorCode.JOIN_DELTA_AMOUNTS);\n      }\n      delete deltas[token.toLowerCase()];\n    });\n\n    for (const token in deltas) {\n      if (deltas[token].toString() !== '0') {\n        console.error(\n          `join assertDeltas, non-input token should be 0: `,\n          token,\n          deltas[token].toString()\n        );\n        throw new BalancerError(BalancerErrorCode.JOIN_DELTA_AMOUNTS);\n      }\n    }\n  }\n\n  // Create join paths from tokensIn all the way to the root node.\n  static getJoinPaths = (\n    orderedNodes: Node[],\n    tokensIn: string[],\n    amountsIn: string[]\n  ): Node[][] => {\n    const joinPaths: Node[][] = [];\n\n    // Filter all nodes that contain a token in the tokensIn array\n    const inputNodes = orderedNodes.filter((node) =>\n      tokensIn\n        .filter((t, i) => BigNumber.from(amountsIn[i]).gt(0)) // Remove input tokens with 0 amounts\n        .map((tokenIn) => tokenIn.toLowerCase())\n        .includes(node.address.toLowerCase())\n    );\n\n    // If inputNodes contain at least one leaf token, then add path to join proportionally with all leaf tokens contained in tokensIn\n    const containsLeafNode = inputNodes.some((node) => node.isLeaf);\n    if (containsLeafNode) {\n      joinPaths.push(orderedNodes);\n    }\n\n    // Add a join path for each non-leaf input node\n    const nonLeafInputNodes = inputNodes.filter((node) => !node.isLeaf);\n    nonLeafInputNodes.forEach((nonLeafInputNode) => {\n      // Get amount in for current node\n      const nonLeafAmountIn = amountsIn.find((amountIn, i) =>\n        isSameAddress(tokensIn[i], nonLeafInputNode.address)\n      ) as string;\n      // Split amount in between nodes with same non-leaf input token based on proportionOfParent\n      const totalProportions = nonLeafInputNodes\n        .filter((node) => isSameAddress(node.address, nonLeafInputNode.address))\n        .reduce(\n          (total, node) => total.add(node.proportionOfParent),\n          BigNumber.from(0)\n        );\n      const proportionalNonLeafAmountIn = BigNumber.from(nonLeafAmountIn)\n        .mul(nonLeafInputNode.proportionOfParent)\n        .div(totalProportions)\n        .toString();\n      // Create input node for current non-leaf input token\n      const [inputTokenNode] = PoolGraph.createInputTokenNode(\n        0, // temp value that will be updated after creation\n        nonLeafInputNode.address,\n        nonLeafInputNode.decimals,\n        nonLeafInputNode.parent,\n        WeiPerEther\n      );\n      // Update index to be actual amount in\n      inputTokenNode.index = proportionalNonLeafAmountIn;\n      inputTokenNode.isLeaf = false;\n      // Start join path with input node\n      const nonLeafJoinPath = [inputTokenNode];\n      // Add each parent to the join path until we reach the root node\n      let parent = nonLeafInputNode.parent;\n      while (parent) {\n        nonLeafJoinPath.push(cloneDeep(parent));\n        parent = parent.parent;\n      }\n      // Add join path to list of join paths\n      joinPaths.push(nonLeafJoinPath);\n    });\n\n    // After creating all join paths, update the index of each input node to be the amount in for that node\n    // All other node indexes will be used as a reference to store the amounts out for that node\n    this.updateInputAmounts(joinPaths, tokensIn, amountsIn);\n\n    return joinPaths;\n  };\n\n  /*\n  AmountsIn should be adjusted after being split between tokensIn to fix eventual rounding issues.\n  This prevents the transaction to leave out dust amounts.\n  */\n  private static updateInputAmounts = (\n    joinPaths: Node[][],\n    tokensIn: string[],\n    amountsIn: string[]\n  ): void => {\n    // Helper function to calculate and adjust amount difference for each token in\n    const ajdustAmountInDiff = (\n      tokenInInputNodes: Node[],\n      amountIn: string\n    ): void => {\n      if (tokenInInputNodes.length > 1) {\n        // Sum of amountsIn from each input node with same tokenIn\n        const amountsInSumforTokenIn = tokenInInputNodes.reduce(\n          (sum, currentNode) => sum.add(currentNode.index),\n          BigNumber.from(0)\n        );\n        // Compare total amountIn with sum of amountIn split between each input node with same tokenIn\n        const diff = BigNumber.from(amountIn).sub(amountsInSumforTokenIn);\n        // Apply difference to first input node with same tokenIn\n        tokenInInputNodes[0].index = diff\n          .add(tokenInInputNodes[0].index)\n          .toString();\n      }\n    };\n\n    // Update amountsIn within leaf join path\n    const leafJoinPath = joinPaths.find((joinPath) => joinPath[0].isLeaf);\n    if (leafJoinPath) {\n      // Update input proportions so inputs are shared correctly between leaf nodes with same tokenIn\n      const totalProportions = this.updateTotalProportions(leafJoinPath);\n      // Update input nodes to have correct input amount\n      leafJoinPath.forEach((node) => {\n        if (node.joinAction === 'input')\n          node = this.updateNodeAmount(\n            node,\n            tokensIn,\n            amountsIn,\n            totalProportions\n          );\n      });\n      // Adjust amountIn for each tokenIn to fix eventual rounding issues\n      tokensIn.forEach((tokenIn, i) => {\n        const tokenInInputNodes = leafJoinPath.filter(\n          (inputNode) =>\n            inputNode.isLeaf && isSameAddress(inputNode.address, tokenIn)\n        );\n        ajdustAmountInDiff(tokenInInputNodes, amountsIn[i]);\n      });\n    }\n\n    // Adjust amountsIn shared between non-leaf join paths with same tokenIn\n    const nonLeafJoinPaths = joinPaths.filter(\n      (joinPath) => !joinPath[0].isLeaf\n    );\n    if (nonLeafJoinPaths.length > 1) {\n      tokensIn.forEach((tokenIn, i) => {\n        const tokenInInputNodes = nonLeafJoinPaths\n          .map((path) => path[0])\n          .filter((node) => isSameAddress(node.address, tokenIn));\n        ajdustAmountInDiff(tokenInInputNodes, amountsIn[i]);\n      });\n    }\n  };\n\n  private createCalls = async (\n    joinPaths: Node[][],\n    userAddress: string,\n    minAmountsOut?: string[], // one for each joinPath\n    authorisation?: string\n  ): Promise<{\n    callData: string;\n    outputIndexes: number[];\n    deltas: Record<string, BigNumber>;\n  }> => {\n    // Create calls for both leaf and non-leaf inputs\n    const { calls, outputIndexes, deltas } = this.createActionCalls(\n      joinPaths,\n      userAddress,\n      minAmountsOut\n    );\n\n    if (authorisation) {\n      calls.unshift(this.createSetRelayerApproval(authorisation));\n    }\n\n    const callData = balancerRelayerInterface.encodeFunctionData('multicall', [\n      calls,\n    ]);\n\n    return {\n      callData,\n      outputIndexes: authorisation\n        ? outputIndexes.map((i) => i + 1)\n        : outputIndexes,\n      deltas,\n    };\n  };\n\n  /*\n  1. For each input token:\n    1. recursively find the spot price for each pool in the path of the join\n    2. take the product to get the spot price of the path\n    3. multiply the input amount of that token by the path spot price to get the \"zeroPriceImpact\" amount of BPT for that token\n  2. Sum each tokens zeroPriceImpact BPT amount to get total zeroPriceImpact BPT\n  */\n  static totalBptZeroPriceImpact = (joinPaths: Node[][]): BigNumber => {\n    // Add bptZeroPriceImpact for all inputs\n    let totalBptZeroPi = BigNumber.from('0');\n    joinPaths.forEach((joinPath) => {\n      const isLeafJoin = joinPath[0].isLeaf;\n      if (isLeafJoin) {\n        // Calculate bptZeroPriceImpact for leaf inputs\n        const leafNodes = joinPath.filter((node) => node.isLeaf);\n        leafNodes.forEach((leafNode) => {\n          const bptOut = this.bptOutZeroPiForInputNode(leafNode);\n          totalBptZeroPi = totalBptZeroPi.add(bptOut);\n        });\n      } else {\n        // Calculate bptZeroPriceImpact for non-leaf inputs\n        const bptOut = this.bptOutZeroPiForInputNode(joinPath[0]);\n        totalBptZeroPi = totalBptZeroPi.add(bptOut);\n      }\n    });\n    return totalBptZeroPi;\n  };\n\n  /*\n  1. recursively find the spot price for each pool in the path of the join\n  2. take the product to get the spot price of the path\n  3. multiply the input amount of that token by the path spot price to get the \"zeroPriceImpact\" amount of BPT for that token \n  */\n  static bptOutZeroPiForInputNode = (inputNode: Node): bigint => {\n    if (inputNode.index === '0' || inputNode.joinAction !== 'input')\n      return BigInt(0);\n    let spProduct = 1;\n    let parentNode: Node | undefined = inputNode.parent;\n    let childAddress = inputNode.address;\n    // Traverse up graph until we reach root adding each node\n    while (parentNode !== undefined) {\n      if (\n        parentNode.joinAction === 'batchSwap' ||\n        parentNode.joinAction === 'joinPool'\n      ) {\n        const sp = parentNode.spotPrices[childAddress.toLowerCase()];\n        spProduct = spProduct * parseFloat(sp);\n        childAddress = parentNode.address;\n      }\n      parentNode = parentNode.parent;\n    }\n    const spPriceScaled = parseFixed(spProduct.toFixed(18), 18);\n    const scalingFactor = _computeScalingFactor(BigInt(inputNode.decimals));\n    const inputAmountScaled = _upscale(BigInt(inputNode.index), scalingFactor);\n    const bptOut = SolidityMaths.divDownFixed(\n      inputAmountScaled,\n      spPriceScaled.toBigInt()\n    );\n    return bptOut;\n  };\n\n  /*\n  Simulate transaction and decodes each output of interest.\n  */\n  private amountsOutByJoinPath = async (\n    userAddress: string,\n    callData: string,\n    tokensIn: string[],\n    outputIndexes: number[]\n  ): Promise<{ amountsOut: string[]; totalAmountOut: string }> => {\n    const amountsOut: string[] = [];\n\n    const staticResult = await this.tenderlyHelper.simulateMulticall(\n      this.relayer,\n      callData,\n      userAddress,\n      tokensIn\n    );\n\n    const multicallResult = defaultAbiCoder.decode(\n      ['bytes[]'],\n      staticResult\n    )[0] as string[];\n\n    let totalAmountOut = BigNumber.from('0');\n    // Decode each root output\n    outputIndexes.forEach((outputIndex) => {\n      const value = defaultAbiCoder.decode(\n        ['uint256'],\n        multicallResult[outputIndex]\n      );\n      amountsOut.push(value.toString());\n      totalAmountOut = totalAmountOut.add(value.toString());\n    });\n\n    return {\n      amountsOut,\n      totalAmountOut: totalAmountOut.toString(),\n    };\n  };\n\n  /*\n  Apply slippage to amounts\n  */\n  private minAmountsOutByJoinPath = (\n    slippage: string,\n    amounts: string[],\n    totalAmountOut: string\n  ): { minAmountsOut: string[]; totalMinAmountOut: string } => {\n    const minAmountsOut = amounts.map((amount) =>\n      subSlippage(BigNumber.from(amount), BigNumber.from(slippage)).toString()\n    );\n    const totalMinAmountOut = subSlippage(\n      BigNumber.from(totalAmountOut),\n      BigNumber.from(slippage)\n    ).toString();\n\n    return {\n      minAmountsOut,\n      totalMinAmountOut,\n    };\n  };\n\n  private updateDeltas(\n    deltas: Record<string, BigNumber>,\n    assets: string[],\n    amounts: string[]\n  ): Record<string, BigNumber> {\n    assets.forEach((t, i) => {\n      const asset = t.toLowerCase();\n      if (!deltas[asset]) deltas[asset] = Zero;\n      deltas[asset] = deltas[asset].add(amounts[i]);\n    });\n    return deltas;\n  }\n\n  // Create actions for each Node and return in multicall array\n  // Create calls for each path, use value stored in minBptAmounts if available\n  private createActionCalls = (\n    joinPaths: Node[][],\n    userAddress: string,\n    minAmountsOut?: string[]\n  ): {\n    calls: string[];\n    outputIndexes: number[];\n    deltas: Record<string, BigNumber>;\n  } => {\n    const calls: string[] = [];\n    const outputIndexes: number[] = [];\n    const isPeek = !minAmountsOut;\n    const deltas: Record<string, BigNumber> = {};\n\n    joinPaths.forEach((joinPath, j) => {\n      const isLeafJoin = joinPath[0].isLeaf;\n      joinPath.forEach((node, i) => {\n        let nodeChildrenWithinJoinPath;\n        if (isLeafJoin) {\n          nodeChildrenWithinJoinPath = joinPath.filter(\n            (joinNode) =>\n              node.children.map((n) => n.address).includes(joinNode.address) &&\n              node.index === joinNode.parent?.index // Ensure child nodes with same address are not included\n          );\n        } else {\n          nodeChildrenWithinJoinPath = i > 0 ? [joinPath[i - 1]] : [];\n        }\n\n        // Prevent adding action calls with input amounts equal 0\n        if (\n          nodeChildrenWithinJoinPath.length > 0 &&\n          nodeChildrenWithinJoinPath.filter((c) => c.index !== '0').length === 0\n        ) {\n          node.index = '0';\n          return;\n        }\n\n        // If child node was input the tokens come from user not relayer\n        // wrapped tokens have to come from user (Relayer has no approval for wrapped tokens)\n        const fromUser = nodeChildrenWithinJoinPath.some(\n          (child) =>\n            child.joinAction === 'input' ||\n            child.joinAction === 'wrapAaveDynamicToken'\n        );\n        const sender = fromUser ? userAddress : userAddress;\n\n        const isLastChainedCall = i === joinPath.length - 1;\n        // Always send to user on last call otherwise send to relayer\n        const recipient = isLastChainedCall ? userAddress : userAddress;\n        // Last action will use minBptOut to protect user. Middle calls can safely have 0 minimum as tx will revert if last fails.\n        const minOut =\n          isLastChainedCall && minAmountsOut ? minAmountsOut[j] : '0';\n\n        switch (node.joinAction) {\n          // TODO - Add other Relayer supported Unwraps\n          case 'wrapAaveDynamicToken':\n            // relayer has no allowance to spend its own wrapped tokens so recipient must be the user\n            calls.push(\n              this.createAaveWrap(\n                node,\n                nodeChildrenWithinJoinPath,\n                j,\n                sender,\n                userAddress\n              )\n            );\n            break;\n          case 'batchSwap': {\n            const [call, assets, limits] = this.createBatchSwap(\n              node,\n              nodeChildrenWithinJoinPath,\n              j,\n              minOut,\n              sender,\n              recipient\n            );\n            calls.push(call);\n            this.updateDeltas(deltas, assets, limits);\n            break;\n          }\n          case 'joinPool': {\n            const [call, tokensIn, amountsIn, minBptOut] = this.createJoinPool(\n              node,\n              nodeChildrenWithinJoinPath,\n              j,\n              minOut,\n              sender,\n              recipient\n            );\n            calls.push(call);\n            this.updateDeltas(\n              deltas,\n              [node.address, ...tokensIn],\n              [minBptOut, ...amountsIn]\n            );\n            break;\n          }\n        }\n      });\n      if (isPeek) {\n        const outputRef = 100 * j;\n        const peekCall = Relayer.encodePeekChainedReferenceValue(\n          Relayer.toChainedReference(outputRef, false)\n        );\n        calls.push(peekCall);\n        outputIndexes.push(calls.indexOf(peekCall));\n      }\n    });\n\n    return { calls, outputIndexes, deltas };\n  };\n\n  /**\n   * Creates a map of node address and total proportion. Used for the case where there may be multiple inputs using same token, e.g. DAI input to 2 pools.\n   * @param nodes nodes to consider.\n   */\n  static updateTotalProportions = (\n    nodes: Node[]\n  ): Record<string, BigNumber> => {\n    const totalProportions: Record<string, BigNumber> = {};\n    nodes.forEach((node) => {\n      if (!totalProportions[node.address])\n        totalProportions[node.address] = node.proportionOfParent;\n      else {\n        totalProportions[node.address] = totalProportions[node.address].add(\n          node.proportionOfParent\n        );\n      }\n    });\n    return totalProportions;\n  };\n\n  /**\n   * Uses relayer to approve itself to act in behalf of the user\n   *\n   * @param authorisation Encoded authorisation call.\n   * @returns relayer approval call\n   */\n  private createSetRelayerApproval = (authorisation: string): string => {\n    return Relayer.encodeSetRelayerApproval(this.relayer, true, authorisation);\n  };\n\n  static updateNodeAmount = (\n    node: Node,\n    tokensIn: string[],\n    amountsIn: string[],\n    totalProportions: Record<string, BigNumber>\n  ): Node => {\n    /*\n    An input node requires a real amount (not an outputRef) as it is first node in chain.\n    This amount will be used when chaining to parent.\n    Amounts are split proportionally between all inputs with same token.\n    */\n    const tokenIndex = tokensIn\n      .map((t) => t.toLowerCase())\n      .indexOf(node.address.toLowerCase());\n    if (tokenIndex === -1) {\n      node.index = '0';\n      return node;\n    }\n\n    // Calculate proportional split\n    const totalProportion = totalProportions[node.address];\n    const inputProportion = node.proportionOfParent\n      .mul((1e18).toString())\n      .div(totalProportion);\n    const inputAmount = inputProportion\n      .mul(amountsIn[tokenIndex])\n      .div((1e18).toString());\n    // Update index with actual value\n    node.index = inputAmount.toString();\n    // console.log(\n    //   `${node.type} ${node.address} prop: ${node.proportionOfParent.toString()}\n    //   ${node.joinAction} (\n    //     Inputs: ${inputAmount.toString()}\n    //     OutputRef: ${node.index}\n    //   )`\n    // );\n    return node;\n  };\n\n  private createAaveWrap = (\n    node: Node,\n    nodeChildrenWithinJoinPath: Node[],\n    joinPathIndex: number,\n    sender: string,\n    recipient: string\n  ): string => {\n    // Throws error based on the assumption that aaveWrap apply only to input tokens from leaf nodes\n    if (nodeChildrenWithinJoinPath.length !== 1)\n      throw new Error('aaveWrap nodes should always have a single child node');\n\n    const childNode = nodeChildrenWithinJoinPath[0];\n\n    const staticToken = node.address;\n    const amount = childNode.index;\n    const call = Relayer.encodeWrapAaveDynamicToken({\n      staticToken,\n      sender,\n      recipient,\n      amount,\n      fromUnderlying: true,\n      outputReference: this.getOutputRefValue(joinPathIndex, node).value,\n    });\n\n    // console.log(\n    //   `${node.type} ${node.address} prop: ${node.proportionOfParent.toString()}\n    //   ${node.joinAction} (\n    //     staticToken: ${staticToken},\n    //     input: ${amount},\n    //     outputRef: ${node.index.toString()}\n    //   )`\n    // );\n\n    return call;\n  };\n\n  private createBatchSwap = (\n    node: Node,\n    nodeChildrenWithinJoinPath: Node[],\n    joinPathIndex: number,\n    expectedOut: string,\n    sender: string,\n    recipient: string\n  ): [string, string[], string[]] => {\n    // We only need batchSwaps for main/wrapped > linearBpt so shouldn't be more than token > token\n    if (nodeChildrenWithinJoinPath.length !== 1)\n      throw new Error('Unsupported batchswap');\n    const inputToken = nodeChildrenWithinJoinPath[0].address;\n    const inputValue = this.getOutputRefValue(\n      joinPathIndex,\n      nodeChildrenWithinJoinPath[0]\n    );\n    const assets = [node.address, inputToken];\n\n    // For tokens going in to the Vault, the limit shall be a positive number. For tokens going out of the Vault, the limit shall be a negative number.\n    // First asset will always be the output token (which will be linearBpt) so use expectedOut to set limit\n    // We don't know input amounts if they are part of a chain so set to max input\n    // TODO can we be safer?\n    const limits: string[] = [\n      BigNumber.from(expectedOut).mul(-1).toString(),\n      inputValue.isRef ? MaxInt256.toString() : inputValue.value,\n    ];\n\n    // TODO Change to single swap to save gas\n    const swaps: BatchSwapStep[] = [\n      {\n        poolId: node.id,\n        assetInIndex: 1,\n        assetOutIndex: 0,\n        amount: inputValue.value,\n        userData: '0x',\n      },\n    ];\n\n    const funds: FundManagement = {\n      sender,\n      recipient,\n      fromInternalBalance: sender === this.relayer,\n      toInternalBalance: recipient === this.relayer,\n    };\n\n    const outputReferences = [\n      {\n        index: assets\n          .map((a) => a.toLowerCase())\n          .indexOf(node.address.toLowerCase()),\n        key: BigNumber.from(this.getOutputRefValue(joinPathIndex, node).value),\n      },\n    ];\n\n    // console.log(\n    //   `${node.type} ${node.address} prop: ${node.proportionOfParent.toString()}\n    //   ${node.joinAction}(\n    //     inputAmt: ${nodeChildrenWithinJoinPath[0].index},\n    //     inputToken: ${nodeChildrenWithinJoinPath[0].address},\n    //     pool: ${node.id},\n    //     outputToken: ${node.address},\n    //     outputRef: ${this.getOutputRefValue(joinPathIndex, node).value},\n    //     sender: ${sender},\n    //     recipient: ${recipient}\n    //   )`\n    // );\n\n    const call = Relayer.encodeBatchSwap({\n      swapType: SwapType.SwapExactIn,\n      swaps,\n      assets,\n      funds,\n      limits,\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value: '0',\n      outputReferences,\n    });\n\n    // If the sender is the Relayer the swap is part of a chain and shouldn't be considered for user deltas\n    const userTokenIn = sender === this.relayer ? '0' : limits[1];\n    // If the receiver is the Relayer the swap is part of a chain and shouldn't be considered for user deltas\n    const userBptOut = recipient === this.relayer ? '0' : limits[0];\n\n    return [call, assets, [userBptOut, userTokenIn]];\n  };\n\n  private createJoinPool = (\n    node: Node,\n    nodeChildrenWithinJoinPath: Node[],\n    joinPathIndex: number,\n    minAmountOut: string,\n    sender: string,\n    recipient: string\n  ): [string, string[], string[], string] => {\n    const inputTokens: string[] = [];\n    const inputAmts: string[] = [];\n\n    // inputTokens needs to include each asset even if it has 0 amount\n    node.children.forEach((child) => {\n      inputTokens.push(child.address);\n      // non-leaf joins should set input amounts only for children that are in their joinPath\n      const childWithinJoinPath = nodeChildrenWithinJoinPath.find((c) =>\n        isSameAddress(c.address, child.address)\n      );\n      if (childWithinJoinPath) {\n        inputAmts.push(\n          this.getOutputRefValue(joinPathIndex, childWithinJoinPath).value\n        );\n      } else {\n        inputAmts.push('0');\n      }\n    });\n\n    if (node.type === PoolType.ComposableStable) {\n      // assets need to include the phantomPoolToken\n      inputTokens.push(node.address);\n      // need to add a placeholder so sorting works\n      inputAmts.push('0');\n    }\n\n    // sort inputs\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      inputTokens,\n      inputAmts\n    ) as [string[], string[]];\n\n    // userData amounts should not include the BPT of the pool being joined\n    let userDataAmounts = [];\n    const bptIndex = sortedTokens\n      .map((t) => t.toLowerCase())\n      .indexOf(node.address.toLowerCase());\n    if (bptIndex === -1) {\n      userDataAmounts = sortedAmounts;\n    } else {\n      userDataAmounts = [\n        ...sortedAmounts.slice(0, bptIndex),\n        ...sortedAmounts.slice(bptIndex + 1),\n      ];\n    }\n\n    let userData: string;\n    if (node.type === PoolType.Weighted) {\n      userData = WeightedPoolEncoder.joinExactTokensInForBPTOut(\n        userDataAmounts,\n        minAmountOut\n      );\n    } else {\n      userData = StablePoolEncoder.joinExactTokensInForBPTOut(\n        userDataAmounts,\n        minAmountOut\n      );\n    }\n\n    // TODO: add test to join weth/wsteth pool using ETH\n    const ethIndex = sortedTokens.indexOf(AddressZero);\n    const value = ethIndex === -1 ? '0' : sortedAmounts[ethIndex];\n\n    // console.log(\n    //   `${node.type} ${node.address} prop: ${node.proportionOfParent.toString()}\n    //   ${node.joinAction}(\n    //     poolId: ${node.id},\n    //     assets: ${sortedTokens.toString()},\n    //     maxAmtsIn: ${sortedAmounts.toString()},\n    //     amountsIn: ${userDataAmounts.toString()},\n    //     minOut: ${minAmountOut},\n    //     outputRef: ${this.getOutputRefValue(joinPathIndex, node).value},\n    //     sender: ${sender},\n    //     recipient: ${recipient}\n    //   )`\n    // );\n\n    const call = Relayer.constructJoinCall({\n      poolId: node.id,\n      kind: 0,\n      sender,\n      recipient,\n      value,\n      outputReference: this.getOutputRefValue(joinPathIndex, node).value,\n      joinPoolRequest: {} as JoinPoolRequest,\n      assets: sortedTokens, // Must include BPT token\n      maxAmountsIn: sortedAmounts,\n      userData,\n      fromInternalBalance: sender === this.relayer,\n    });\n\n    const userAmountsTokenIn = sortedAmounts.map((a) =>\n      Relayer.isChainedReference(a) ? '0' : a\n    );\n    const userAmountOut = Relayer.isChainedReference(minAmountOut)\n      ? '0'\n      : minAmountOut;\n\n    return [\n      call,\n      // If the sender is the Relayer the join is part of a chain and shouldn't be considered for user deltas\n      sender === this.relayer ? [] : sortedTokens,\n      sender === this.relayer ? [] : userAmountsTokenIn,\n      // If the receiver is the Relayer the join is part of a chain and shouldn't be considered for user deltas\n      recipient === this.relayer\n        ? Zero.toString()\n        : Zero.sub(userAmountOut).toString(), // -ve because coming from Vault\n    ];\n  };\n\n  private getOutputRefValue = (\n    joinPathIndex: number,\n    node: Node\n  ): { value: string; isRef: boolean } => {\n    if (node.joinAction === 'input') {\n      // Input nodes have their indexes set as the actual input amount, instead of a chained reference\n      return { value: node.index, isRef: false };\n    } else if (node.index !== '0' || !node.parent) {\n      // Root node (parent === undefined) has index zero, but should still pass chained reference as outputRef value\n      return {\n        value: Relayer.toChainedReference(\n          BigNumber.from(node.index).add(joinPathIndex * 100)\n        ).toString(),\n        isRef: true,\n      };\n    } else {\n      return {\n        value: '0',\n        isRef: true,\n      };\n    }\n  };\n}\n","import { defaultAbiCoder } from '@ethersproject/abi';\nimport { cloneDeep } from 'lodash';\nimport { Interface } from '@ethersproject/abi';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { MaxInt256, WeiPerEther, Zero } from '@ethersproject/constants';\n\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { Relayer } from '@/modules/relayer/relayer.module';\nimport { BatchSwapStep, FundManagement, SwapType } from '@/modules/swaps/types';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { StablePoolEncoder } from '@/pool-stable';\nimport {\n  BalancerNetworkConfig,\n  ExitPoolRequest,\n  Pool,\n  PoolAttribute,\n  PoolType,\n} from '@/types';\nimport { Findable } from '../data/types';\nimport { PoolGraph, Node } from '../graph/graph';\n\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport TenderlyHelper from '@/lib/utils/tenderlyHelper';\nimport balancerRelayerAbi from '@/lib/abi/RelayerV4.json';\nimport { networkAddresses } from '@/lib/constants/config';\nimport { AssetHelpers } from '@/lib/utils';\nimport { getPoolAddress } from '@/pool-utils';\nimport { Join } from '../joins/joins.module';\nimport { calcPriceImpact } from '../pricing/priceImpact';\n\nconst balancerRelayerInterface = new Interface(balancerRelayerAbi);\n\nexport class Exit {\n  private wrappedNativeAsset: string;\n  private relayer: string;\n  private tenderlyHelper: TenderlyHelper;\n\n  constructor(\n    private pools: Findable<Pool, PoolAttribute>,\n    networkConfig: BalancerNetworkConfig\n  ) {\n    const { tokens, contracts } = networkAddresses(networkConfig.chainId);\n    this.wrappedNativeAsset = tokens.wrappedNativeAsset;\n    this.relayer = contracts.relayerV4 as string;\n\n    this.tenderlyHelper = new TenderlyHelper(\n      networkConfig.chainId,\n      networkConfig.tenderly\n    );\n  }\n\n  async exitPool(\n    poolId: string,\n    amountBptIn: string,\n    userAddress: string,\n    slippage: string,\n    authorisation?: string\n  ): Promise<{\n    to: string;\n    callData: string;\n    tokensOut: string[];\n    expectedAmountsOut: string[];\n    minAmountsOut: string[];\n    priceImpact: string;\n  }> {\n    /*\n    Overall exit flow description:\n    - Create calls with 0 expected min amount for each token out\n    - static call (or V4 special call) to get actual amounts for each token out\n    - Apply slippage to amountsOut\n    - Recreate calls with minAmounts === actualAmountsWithSlippage\n    - Return minAmoutsOut, UI would use this to display to user\n    - Return updatedCalls, UI would use this to execute tx\n    */\n\n    // Create nodes and order by breadth first\n    const orderedNodes = await PoolGraph.getGraphNodes(\n      false,\n      poolId,\n      this.pools,\n      false\n    );\n\n    // Create exit paths for each output node and splits amount in proportionally between them\n    const outputNodes = orderedNodes.filter((n) => n.exitAction === 'output');\n\n    const exitPaths = this.getExitPaths(outputNodes, amountBptIn);\n\n    const tokensOutByExitPath = outputNodes.map((n) => n.address.toLowerCase());\n    const tokensOut = [...new Set(tokensOutByExitPath)].sort();\n\n    // Create calls with minimum expected amount out for each exit path\n    const staticCall = await this.createCalls(\n      exitPaths,\n      userAddress,\n      undefined,\n      authorisation\n    );\n\n    const { expectedAmountsOutByExitPath, minAmountsOutByExitPath } =\n      await this.amountsOutByExitPath(\n        userAddress,\n        staticCall.callData,\n        orderedNodes[0].address,\n        staticCall.outputIndexes,\n        slippage\n      );\n\n    // Create calls with minimum expected amount out for each exit path\n    const { callData, deltas } = await this.createCalls(\n      exitPaths,\n      userAddress,\n      minAmountsOutByExitPath,\n      authorisation\n    );\n\n    const { expectedAmountsOut, minAmountsOut } = this.amountsOutByTokenOut(\n      tokensOut,\n      tokensOutByExitPath,\n      expectedAmountsOutByExitPath,\n      slippage\n    );\n\n    this.assertDeltas(poolId, deltas, amountBptIn, tokensOut, minAmountsOut);\n\n    const priceImpact = await this.calculatePriceImpact(\n      poolId,\n      tokensOut,\n      expectedAmountsOut,\n      amountBptIn\n    );\n\n    return {\n      to: this.relayer,\n      callData,\n      tokensOut,\n      expectedAmountsOut,\n      minAmountsOut,\n      priceImpact,\n    };\n  }\n\n  /*\n  (From Fernando)\n  1. Given a bpt amount in find the expect token amounts out (proportionally)\n  2. Uses bptZeroPi = _bptForTokensZeroPriceImpact (the same is used for joins too)\n  3. PI = bptAmountIn / bptZeroPi - 1\n  */\n  private async calculatePriceImpact(\n    poolId: string,\n    tokensOut: string[],\n    amountsOut: string[],\n    amountBptIn: string\n  ): Promise<string> {\n    // Create nodes for each pool/token interaction and order by breadth first\n    const orderedNodesForJoin = await PoolGraph.getGraphNodes(\n      true,\n      poolId,\n      this.pools,\n      false\n    );\n    const joinPaths = Join.getJoinPaths(\n      orderedNodesForJoin,\n      tokensOut,\n      amountsOut\n    );\n    const totalBptZeroPi = Join.totalBptZeroPriceImpact(joinPaths);\n    const priceImpact = calcPriceImpact(\n      BigInt(amountBptIn),\n      totalBptZeroPi.toBigInt(),\n      false\n    ).toString();\n    return priceImpact;\n  }\n\n  private assertDeltas(\n    poolId: string,\n    deltas: Record<string, BigNumber>,\n    bptIn: string,\n    tokensOut: string[],\n    amountsOut: string[]\n  ): void {\n    const poolAddress = getPoolAddress(poolId);\n    const outDiff = deltas[poolAddress.toLowerCase()].sub(bptIn);\n\n    if (outDiff.abs().gt(3)) {\n      console.error(\n        `exit assertDeltas, bptIn: `,\n        poolAddress,\n        bptIn,\n        deltas[poolAddress.toLowerCase()]?.toString()\n      );\n      throw new BalancerError(BalancerErrorCode.EXIT_DELTA_AMOUNTS);\n    }\n    delete deltas[poolAddress.toLowerCase()];\n\n    tokensOut.forEach((token, i) => {\n      const diff = deltas[token.toLowerCase()].add(amountsOut[i]);\n      if (diff.abs().gt(1)) {\n        console.error(\n          `exit assertDeltas, tokenOut: `,\n          token,\n          amountsOut[i],\n          deltas[token.toLowerCase()]?.toString()\n        );\n        throw new BalancerError(BalancerErrorCode.EXIT_DELTA_AMOUNTS);\n      }\n      delete deltas[token.toLowerCase()];\n    });\n\n    for (const token in deltas) {\n      if (deltas[token].toString() !== '0') {\n        console.error(\n          `exit assertDeltas, non-input token should be 0: `,\n          token,\n          deltas[token].toString()\n        );\n        throw new BalancerError(BalancerErrorCode.EXIT_DELTA_AMOUNTS);\n      }\n    }\n  }\n\n  // Query amounts out through static call and return decoded result\n  private amountsOutByExitPath = async (\n    userAddress: string,\n    callData: string,\n    tokenIn: string,\n    outputIndexes: number[],\n    slippage: string\n  ): Promise<{\n    expectedAmountsOutByExitPath: string[];\n    minAmountsOutByExitPath: string[];\n  }> => {\n    const simulationResult = await this.tenderlyHelper.simulateMulticall(\n      this.relayer,\n      callData,\n      userAddress,\n      [tokenIn]\n    );\n\n    // Decode each exit path amount out from static call result\n    const multiCallResult = defaultAbiCoder.decode(\n      ['bytes[]'],\n      simulationResult\n    )[0] as string[];\n\n    const expectedAmountsOutByExitPath = outputIndexes.map((outputIndex) => {\n      const result = defaultAbiCoder.decode(\n        ['uint256'],\n        multiCallResult[outputIndex]\n      );\n      return result.toString();\n    });\n\n    // Apply slippage tolerance on expected amount out for each exit path\n    const minAmountsOutByExitPath = expectedAmountsOutByExitPath.map(\n      (expectedAmountOut) =>\n        subSlippage(\n          BigNumber.from(expectedAmountOut),\n          BigNumber.from(slippage)\n        ).toString()\n    );\n\n    return { expectedAmountsOutByExitPath, minAmountsOutByExitPath };\n  };\n\n  // Aggregate amounts out by exit path into amounts out by token out\n  private amountsOutByTokenOut = (\n    tokensOut: string[],\n    tokensOutByExitPath: string[],\n    expectedAmountsOutByExitPath: string[],\n    slippage: string\n  ) => {\n    // Aggregate amountsOutByExitPath into expectedAmountsOut\n    const expectedAmountsOutMap: Record<string, BigNumber> = {};\n    tokensOutByExitPath.forEach(\n      (tokenOut, i) =>\n        (expectedAmountsOutMap[tokenOut] = (\n          expectedAmountsOutMap[tokenOut] ?? Zero\n        ).add(expectedAmountsOutByExitPath[i]))\n    );\n    const expectedAmountsOut = tokensOut.map((tokenOut) =>\n      expectedAmountsOutMap[tokenOut].toString()\n    );\n\n    // Apply slippage tolerance on each expected amount out\n    const minAmountsOut = expectedAmountsOut.map((expectedAmountOut) =>\n      subSlippage(\n        BigNumber.from(expectedAmountOut),\n        BigNumber.from(slippage)\n      ).toString()\n    );\n\n    return { expectedAmountsOut, minAmountsOut };\n  };\n\n  // Create one exit path for each output node\n  private getExitPaths = (outputNodes: Node[], amountIn: string): Node[][] => {\n    const exitPaths = outputNodes.map((outputNode) => {\n      const exitPath = [outputNode];\n      while (exitPath[0].parent) {\n        exitPath.unshift(cloneDeep(exitPath[0].parent));\n      }\n      /*\n      The input/root node requires a real amount (not a reference/index) as it is first node in chain.\n      This amount will be used when chaining to children.\n      */\n      exitPath[0].index = exitPath[exitPath.length - 1].proportionOfParent\n        .mul(amountIn)\n        .div(WeiPerEther)\n        .toString();\n      return exitPath;\n    });\n\n    /*\n    Amounts in for exit paths should be adjusted after caculated to fix eventual rounding issues\n    */\n    // Sum amountIn for each exit path\n    const amountsInSum = exitPaths.reduce((accumulator, currentExitPath) => {\n      const amountInForCurrentExitPath = currentExitPath[0].index;\n      return BigNumber.from(amountInForCurrentExitPath).add(accumulator);\n    }, Zero);\n    // Compare total amountIn with sum of calculated amountIn for each exit path\n    const amountsInDiff = BigNumber.from(amountIn).sub(amountsInSum);\n    // Add diff to last exit path amountIn\n    exitPaths[exitPaths.length - 1][0].index = amountsInDiff\n      .add(exitPaths[exitPaths.length - 1][0].index)\n      .toString();\n\n    return exitPaths;\n  };\n\n  private async createCalls(\n    exitPaths: Node[][],\n    userAddress: string,\n    minAmountsOut?: string[],\n    authorisation?: string\n  ): Promise<{\n    callData: string;\n    outputIndexes: number[];\n    deltas: Record<string, BigNumber>;\n  }> {\n    const { calls, outputIndexes, deltas } = this.createActionCalls(\n      cloneDeep(exitPaths),\n      userAddress,\n      minAmountsOut\n    );\n\n    if (authorisation) {\n      calls.unshift(\n        Relayer.encodeSetRelayerApproval(this.relayer, true, authorisation)\n      );\n    }\n\n    const callData = balancerRelayerInterface.encodeFunctionData('multicall', [\n      calls,\n    ]);\n\n    return {\n      callData,\n      outputIndexes: authorisation\n        ? outputIndexes.map((i) => i + 1)\n        : outputIndexes,\n      deltas,\n    };\n  }\n\n  private updateDeltas(\n    deltas: Record<string, BigNumber>,\n    assets: string[],\n    amounts: string[]\n  ): Record<string, BigNumber> {\n    assets.forEach((t, i) => {\n      const asset = t.toLowerCase();\n      if (!deltas[asset]) deltas[asset] = Zero;\n      deltas[asset] = deltas[asset].add(amounts[i]);\n    });\n    return deltas;\n  }\n\n  private createActionCalls(\n    exitPaths: Node[][],\n    userAddress: string,\n    minAmountsOut?: string[]\n  ): {\n    calls: string[];\n    outputIndexes: number[];\n    deltas: Record<string, BigNumber>;\n  } {\n    const calls: string[] = [];\n    const outputIndexes: number[] = [];\n    const isPeek = !minAmountsOut;\n    const deltas: Record<string, BigNumber> = {};\n\n    // Create actions for each Node and return in multicall array\n\n    exitPaths.forEach((exitPath, i) => {\n      exitPath.forEach((node) => {\n        // Calls from root node are sent by the user. Otherwise sent by the relayer\n        const isRootNode = !node.parent;\n        const sender = isRootNode ? userAddress : this.relayer;\n        // Always send to user on output calls otherwise send to relayer\n        const exitChild = node.children.find((child) =>\n          exitPath.map((n) => n.index).includes(child.index)\n        );\n        const isLastActionFromExitPath = exitChild?.exitAction === 'output';\n        const recipient = isLastActionFromExitPath ? userAddress : this.relayer;\n        // Last calls will use minAmountsOut to protect user. Middle calls can safely have 0 minimum as tx will revert if last fails.\n        const minAmountOut =\n          isLastActionFromExitPath && minAmountsOut ? minAmountsOut[i] : '0';\n\n        switch (node.exitAction) {\n          case 'batchSwap': {\n            const [call, assets, limits] = this.createBatchSwap(\n              node,\n              exitChild as Node,\n              i,\n              minAmountOut,\n              sender,\n              recipient\n            );\n            calls.push(call);\n            this.updateDeltas(deltas, assets, limits);\n            break;\n          }\n          case 'exitPool': {\n            const [call, bptIn, tokensOut, amountsOut] = this.createExitPool(\n              node,\n              exitChild as Node,\n              i,\n              minAmountOut,\n              sender,\n              recipient\n            );\n            calls.push(call);\n            this.updateDeltas(\n              deltas,\n              [node.address, ...tokensOut],\n              [bptIn, ...amountsOut]\n            );\n            break;\n          }\n          case 'output':\n            if (isPeek) {\n              calls.push(\n                Relayer.encodePeekChainedReferenceValue(\n                  Relayer.toChainedReference(\n                    this.getOutputRef(i, node.index),\n                    false\n                  )\n                )\n              );\n              outputIndexes.push(calls.length - 1);\n            }\n            break;\n          default:\n            return;\n        }\n      });\n    });\n\n    return { calls, outputIndexes, deltas };\n  }\n\n  private createBatchSwap(\n    node: Node,\n    exitChild: Node,\n    exitPathIndex: number,\n    minAmountOut: string,\n    sender: string,\n    recipient: string\n  ): [string, string[], string[]] {\n    const isRootNode = !node.parent;\n    const amountIn = isRootNode\n      ? node.index\n      : Relayer.toChainedReference(\n          this.getOutputRef(exitPathIndex, node.index)\n        ).toString();\n\n    const tokenOut = exitChild.address;\n    const assets = [tokenOut, node.address];\n\n    // For tokens going in to the Vault, the limit shall be a positive number. For tokens going out of the Vault, the limit shall be a negative number.\n    // First asset will always be the output token so use expectedOut to set limit\n    const limits: string[] = [\n      BigNumber.from(minAmountOut).mul(-1).toString(),\n      Relayer.isChainedReference(amountIn) ? MaxInt256.toString() : amountIn, // We don't know input amounts if they are part of a chain so set to max input\n    ];\n\n    // TODO Change to single swap to save gas\n    const swaps: BatchSwapStep[] = [\n      {\n        poolId: node.id,\n        assetInIndex: 1,\n        assetOutIndex: 0,\n        amount: amountIn,\n        userData: '0x',\n      },\n    ];\n\n    const funds: FundManagement = {\n      sender,\n      recipient,\n      fromInternalBalance: false,\n      toInternalBalance: false,\n    };\n\n    const outputReferences = [\n      {\n        index: assets\n          .map((a) => a.toLowerCase())\n          .indexOf(tokenOut.toLowerCase()),\n        key: Relayer.toChainedReference(\n          this.getOutputRef(exitPathIndex, exitChild.index)\n        ),\n      },\n    ];\n\n    // console.log(\n    //   `${node.type} ${node.address} prop: ${formatFixed(\n    //     node.proportionOfParent,\n    //     18\n    //   )}\n    //   ${node.exitAction}(\n    //     inputAmt: ${amountIn},\n    //     inputToken: ${node.address},\n    //     pool: ${node.id},\n    //     outputToken: ${exitChild.address},\n    //     outputRef: ${this.getOutputRef(exitPathIndex, exitChild.index)},\n    //     sender: ${sender},\n    //     recipient: ${recipient}\n    //   )`\n    // );\n\n    const call = Relayer.encodeBatchSwap({\n      swapType: SwapType.SwapExactIn,\n      swaps,\n      assets,\n      funds,\n      limits,\n      deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n      value: '0',\n      outputReferences,\n    });\n\n    let userTokenOutAmount = limits[0];\n    const userBptAmount = limits[1];\n    // If the sender is the Relayer the swap is part of a chain and shouldn't be considered for user deltas\n    const bptIn = sender === this.relayer ? '0' : userBptAmount;\n    // If the receiver is the Relayer the swap is part of a chain and shouldn't be considered for user deltas\n    userTokenOutAmount = recipient === this.relayer ? '0' : userTokenOutAmount;\n    return [call, assets, [userTokenOutAmount, bptIn]];\n  }\n\n  private createExitPool(\n    node: Node,\n    exitChild: Node,\n    exitPathIndex: number,\n    minAmountOut: string,\n    sender: string,\n    recipient: string\n  ): [string, string, string[], string[]] {\n    const tokenOut = exitChild.address;\n    const isRootNode = !node.parent;\n    const amountIn = isRootNode\n      ? node.index\n      : Relayer.toChainedReference(\n          this.getOutputRef(exitPathIndex, node.index)\n        ).toString();\n\n    const tokensOut: string[] = [];\n    const amountsOut: string[] = [];\n\n    // tokensOut needs to include each asset even if it has 0 amount\n    node.children.forEach((child) => {\n      tokensOut.push(child.address);\n      amountsOut.push(child.address === tokenOut ? minAmountOut : '0');\n    });\n\n    if (node.type === PoolType.ComposableStable) {\n      // assets need to include the phantomPoolToken\n      tokensOut.push(node.address);\n      // need to add a placeholder so sorting works\n      amountsOut.push('0');\n    }\n\n    // sort inputs\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensOut,\n      amountsOut\n    ) as [string[], string[]];\n\n    // userData amounts should not include the BPT of the pool being joined\n    let userDataTokens = [];\n    const bptIndex = sortedTokens\n      .map((t) => t.toLowerCase())\n      .indexOf(node.address.toLowerCase());\n    if (bptIndex === -1) {\n      userDataTokens = sortedTokens;\n    } else {\n      userDataTokens = [\n        ...sortedTokens.slice(0, bptIndex),\n        ...sortedTokens.slice(bptIndex + 1),\n      ];\n    }\n\n    let userData: string;\n    if (node.type === PoolType.Weighted) {\n      userData = WeightedPoolEncoder.exitExactBPTInForOneTokenOut(\n        amountIn,\n        userDataTokens.indexOf(tokenOut)\n      );\n    } else {\n      userData = StablePoolEncoder.exitExactBPTInForOneTokenOut(\n        amountIn,\n        userDataTokens.indexOf(tokenOut)\n      );\n    }\n\n    const outputReferences = [\n      {\n        index: sortedTokens\n          .map((t) => t.toLowerCase())\n          .indexOf(tokenOut.toLowerCase()),\n        key: Relayer.toChainedReference(\n          this.getOutputRef(exitPathIndex, exitChild.index)\n        ),\n      },\n    ];\n\n    // console.log(\n    //   `${node.type} ${node.address} prop: ${formatFixed(\n    //     node.proportionOfParent,\n    //     18\n    //   )}\n    //   ${node.exitAction}(\n    //     poolId: ${node.id},\n    //     tokensOut: ${sortedTokens},\n    //     tokenOut: ${sortedTokens[sortedTokens.indexOf(tokenOut)].toString()},\n    //     amountOut: ${sortedAmounts[sortedTokens.indexOf(tokenOut)].toString()},\n    //     amountIn: ${amountIn},\n    //     minAmountOut: ${minAmountOut},\n    //     outputRef: ${this.getOutputRef(exitPathIndex, exitChild.index)},\n    //     sender: ${sender},\n    //     recipient: ${recipient}\n    //   )`\n    // );\n\n    const call = Relayer.constructExitCall({\n      poolId: node.id,\n      poolKind: 0,\n      sender,\n      recipient,\n      outputReferences,\n      exitPoolRequest: {} as ExitPoolRequest,\n      assets: sortedTokens,\n      minAmountsOut: sortedAmounts,\n      userData,\n      toInternalBalance: false,\n    });\n\n    const userAmountTokensOut = sortedAmounts.map((a) =>\n      Relayer.isChainedReference(a) ? '0' : Zero.sub(a).toString()\n    );\n    const userBptIn = Relayer.isChainedReference(amountIn) ? '0' : amountIn;\n\n    return [\n      call,\n      // If the sender is the Relayer the exit is part of a chain and shouldn't be considered for user deltas\n      sender === this.relayer ? Zero.toString() : userBptIn,\n      // If the receiver is the Relayer the exit is part of a chain and shouldn't be considered for user deltas\n      recipient === this.relayer ? [] : sortedTokens,\n      recipient === this.relayer ? [] : userAmountTokensOut,\n    ];\n  }\n\n  private getOutputRef = (exitPathIndex: number, nodeIndex: string): number => {\n    return exitPathIndex * 100 + parseInt(nodeIndex);\n  };\n}\n","/**\n * Calculates pool fees\n *\n * 1. Pool fees in last 24hrs\n */\nimport { isLessThan24Hours } from '@/lib/utils/time';\nimport { Pool, Findable, PoolAttribute } from '@/types';\n\nexport class PoolVolume {\n  constructor(\n    private yesterdaysPools: Findable<Pool, PoolAttribute> | undefined\n  ) {}\n\n  // 🚨 this is adding 1 call to get yesterday's block height and 2nd call to fetch yesterday's pools data from subgraph\n  // TODO: find a better data source for that eg. add blocks to graph, replace with a database, or dune\n  async last24h(pool: Pool): Promise<number> {\n    let yesterdaysPool;\n    if (this.yesterdaysPools) {\n      yesterdaysPool = await this.yesterdaysPools.find(pool.id);\n    }\n\n    if (!pool.totalSwapVolume) {\n      return 0;\n    }\n\n    if (!yesterdaysPool?.totalSwapVolume) {\n      // Process edge case when pool creation time is less that 24h\n      if (pool.createTime && isLessThan24Hours(pool.createTime)) {\n        return parseFloat(pool.totalSwapVolume);\n      }\n      return 0;\n    }\n\n    return (\n      parseFloat(pool.totalSwapVolume) -\n      parseFloat(yesterdaysPool.totalSwapVolume)\n    );\n  }\n}\n","import {\n  ComposableStableCreatePoolParameters,\n  InitJoinPoolAttributes,\n  InitJoinPoolParameters,\n} from '@/modules/pools/factory/types';\nimport { AssetHelpers, parseToBigInt18 } from '@/lib/utils';\nimport { TransactionRequest } from '@ethersproject/providers';\nimport { PoolFactory } from '@/modules/pools/factory/pool-factory';\nimport composableStableAbi from '../../../../lib/abi/ComposableStableFactory.json';\nimport { FunctionFragment, Interface } from '@ethersproject/abi';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { networkAddresses } from '@/lib/constants/config';\nimport { BalancerNetworkConfig } from '@/types';\n\nexport class ComposableStableFactory implements PoolFactory {\n  private wrappedNativeAsset: string;\n\n  constructor(networkConfig: BalancerNetworkConfig) {\n    const { tokens } = networkAddresses(networkConfig.chainId);\n    this.wrappedNativeAsset = tokens.wrappedNativeAsset;\n  }\n\n  /***\n   * @param params\n   *  * Builds a transaction for a composable pool create operation.\n   *  * @param contractAddress - The address of the factory for composable stable pool (contract address)\n   *  * @param name - The name of the pool\n   *  * @param symbol - The symbol of the pool\n   *  * @param swapFee - The swapFee for the owner of the pool in string or number format(100% is \"1.00\" or 1, 10% is \"0.1\" or 0.1, 1% is \"0.01\" or 0.01)\n   *  * @param tokenAddresses - The token's addresses\n   *  * @param rateProviders The addresses of the rate providers for each token, ordered\n   *  * @param tokenRateCacheDurations the Token Rate Cache Duration of each token\n   *  * @param owner - The address of the owner of the pool\n   *  * @param amplificationParameter The amplification parameter(must be greater than 1)\n   *  * @param exemptFromYieldProtocolFeeFlags array containing boolean for each token exemption from yield protocol fee flags\n   *  * @returns a TransactionRequest object, which can be directly inserted in the transaction to create a composable stable pool\n   */\n  create({\n    factoryAddress,\n    name,\n    symbol,\n    tokenAddresses,\n    amplificationParameter,\n    rateProviders,\n    tokenRateCacheDurations,\n    exemptFromYieldProtocolFeeFlags,\n    swapFee,\n    owner,\n  }: ComposableStableCreatePoolParameters): TransactionRequest {\n    const swapFeeScaled = parseToBigInt18(`${swapFee}`);\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    const [\n      sortedTokens,\n      sortedRateProviders,\n      sortedTokenRateCacheDurations,\n      sortedExemptFromYieldProtocols,\n    ] = assetHelpers.sortTokens(\n      tokenAddresses,\n      rateProviders,\n      tokenRateCacheDurations,\n      exemptFromYieldProtocolFeeFlags\n    ) as [string[], string[], string[], boolean[]];\n    const params = [\n      name,\n      symbol,\n      sortedTokens,\n      amplificationParameter,\n      sortedRateProviders,\n      sortedTokenRateCacheDurations,\n      sortedExemptFromYieldProtocols,\n      swapFeeScaled.toString(),\n      owner,\n    ];\n    const composablePoolInterface = new Interface(composableStableAbi);\n    const createFunctionAbi = composableStableAbi.find(\n      ({ name }) => name === 'create'\n    );\n    if (!createFunctionAbi)\n      throw new BalancerError(BalancerErrorCode.INTERNAL_ERROR_INVALID_ABI);\n    const createFunctionFragment = FunctionFragment.from(createFunctionAbi);\n    const encodedFunctionData = composablePoolInterface.encodeFunctionData(\n      createFunctionFragment,\n      params\n    );\n    return {\n      to: factoryAddress,\n      data: encodedFunctionData,\n    };\n  }\n\n  /***\n   * @param params\n   *  * Returns an array of calculated weights for every token in the PoolSeedToken array \"tokens\"\n   *  * @param joiner - The address of the joiner of the pool\n   *  * @param poolId - The id of the pool\n   *  * @param poolAddress - The address of the pool\n   *  * @param tokensIn - array with the address of the tokens\n   *  * @param amountsIn - array with the amount of each token\n   *  * @param wrappedNativeAsset\n   *  * @returns a InitJoinPoolAttributes object, which can be directly inserted in the transaction to init join a composable stable pool\n   */\n  buildInitJoin({\n    joiner,\n    poolId,\n    poolAddress,\n    tokensIn,\n    amountsIn,\n  }: InitJoinPoolParameters): InitJoinPoolAttributes {\n    console.log(joiner, poolId, poolAddress, tokensIn, amountsIn);\n    throw new Error('To be implemented');\n    // const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    // // sort inputs\n    // tokensIn.push(poolAddress);\n    // amountsIn.push('0');\n    //\n    // const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n    //   tokensIn,\n    //   amountsIn\n    // ) as [string[], string[]];\n    //\n    // let userDataAmounts;\n    // const bptIndex = sortedTokens\n    //   .map((t) => t.toLowerCase())\n    //   .indexOf(poolAddress.toLowerCase());\n    // if (bptIndex === -1) {\n    //   userDataAmounts = sortedAmounts;\n    // } else {\n    //   userDataAmounts = [\n    //     ...sortedAmounts.slice(0, bptIndex),\n    //     ...sortedAmounts.slice(bptIndex + 1),\n    //   ];\n    // }\n    //\n    // const userData = ComposableStablePoolEncoder.joinInit(userDataAmounts);\n    // const functionName = 'joinPool';\n    //\n    // const attributes = {\n    //   poolId: poolId,\n    //   sender: joiner,\n    //   recipient: joiner,\n    //   joinPoolRequest: {\n    //     assets: sortedTokens,\n    //     maxAmountsIn: sortedAmounts,\n    //     userData,\n    //     fromInternalBalance: false,\n    //   },\n    // };\n    //\n    // const vaultInterface = Vault__factory.createInterface();\n    // const data = vaultInterface.encodeFunctionData(functionName, [\n    //   attributes.poolId,\n    //   attributes.sender,\n    //   attributes.recipient,\n    //   attributes.joinPoolRequest,\n    // ]);\n    //\n    // return {\n    //   to: balancerVault,\n    //   functionName,\n    //   attributes,\n    //   data,\n    // };\n  }\n}\n","import {\n  InitJoinPoolAttributes,\n  InitJoinPoolParameters,\n  WeightedCreatePoolParameters,\n} from '@/modules/pools/factory/types';\nimport { AssetHelpers, parseToBigInt18 } from '@/lib/utils';\nimport { TransactionRequest } from '@ethersproject/providers';\nimport { PoolFactory } from '@/modules/pools/factory/pool-factory';\nimport { FunctionFragment, Interface } from '@ethersproject/abi';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { balancerVault, networkAddresses } from '@/lib/constants/config';\nimport { BalancerNetworkConfig } from '@/types';\nimport {\n  Vault__factory,\n  WeightedPoolFactory__factory,\n} from '@balancer-labs/typechain';\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\n\nexport class WeightedFactory implements PoolFactory {\n  private wrappedNativeAsset: string;\n\n  constructor(networkConfig: BalancerNetworkConfig) {\n    const { tokens } = networkAddresses(networkConfig.chainId);\n    this.wrappedNativeAsset = tokens.wrappedNativeAsset;\n  }\n\n  /***\n   * @param params\n   *  * Builds a transaction for a weighted pool create operation.\n   *  * @param factoryAddress - The address of the factory for weighted pool (contract address)\n   *  * @param name - The name of the pool\n   *  * @param symbol - The symbol of the pool\n   *  * @param tokenAddresses - The token's addresses\n   *  * @param weights The weights for each token, ordered\n   *  * @param swapFee - The swapFee for the owner of the pool in string or number format(100% is \"1.00\" or 1, 10% is \"0.1\" or 0.1, 1% is \"0.01\" or 0.01)\n   *  * @param owner - The address of the owner of the pool\n   *  * @returns a TransactionRequest object, which can be directly inserted in the transaction to create a weighted pool\n   */\n  create({\n    factoryAddress,\n    name,\n    symbol,\n    tokenAddresses,\n    weights,\n    swapFee,\n    owner,\n  }: WeightedCreatePoolParameters): TransactionRequest {\n    const swapFeeScaled = parseToBigInt18(`${swapFee}`);\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n    const [sortedTokens, sortedWeights] = assetHelpers.sortTokens(\n      tokenAddresses,\n      weights\n    ) as [string[], BigNumberish[]];\n    const params = [\n      name,\n      symbol,\n      sortedTokens,\n      sortedWeights,\n      swapFeeScaled.toString(),\n      owner,\n    ];\n    const weightedPoolInterface = new Interface(\n      WeightedPoolFactory__factory.abi\n    );\n    const createFunctionAbi = WeightedPoolFactory__factory.abi.find(\n      ({ name }) => name === 'create'\n    );\n    if (!createFunctionAbi)\n      throw new BalancerError(BalancerErrorCode.INTERNAL_ERROR_INVALID_ABI);\n    const createFunctionFragment = FunctionFragment.from(createFunctionAbi);\n    const encodedFunctionData = weightedPoolInterface.encodeFunctionData(\n      createFunctionFragment,\n      params\n    );\n    return {\n      to: factoryAddress,\n      data: encodedFunctionData,\n    };\n  }\n\n  /***\n   * @param params\n   *  * Returns a InitJoinPoolAttributes to make a init join transaction\n   *  * @param joiner - The address of the joiner of the pool\n   *  * @param poolId - The id of the pool\n   *  * @param tokensIn - array with the address of the tokens\n   *  * @param amountsIn - array with the amount of each token\n   *  * @returns a InitJoinPoolAttributes object, which can be directly inserted in the transaction to init join a weighted pool\n   */\n  buildInitJoin({\n    joiner,\n    poolId,\n    tokensIn,\n    amountsIn,\n  }: InitJoinPoolParameters): InitJoinPoolAttributes {\n    const assetHelpers = new AssetHelpers(this.wrappedNativeAsset);\n\n    const [sortedTokens, sortedAmounts] = assetHelpers.sortTokens(\n      tokensIn,\n      amountsIn\n    ) as [string[], string[]];\n\n    const userData = WeightedPoolEncoder.joinInit(sortedAmounts);\n    const functionName = 'joinPool';\n\n    const attributes = {\n      poolId: poolId,\n      sender: joiner,\n      recipient: joiner,\n      joinPoolRequest: {\n        assets: sortedTokens,\n        maxAmountsIn: sortedAmounts,\n        userData,\n        fromInternalBalance: false,\n      },\n    };\n\n    const vaultInterface = Vault__factory.createInterface();\n    const data = vaultInterface.encodeFunctionData(functionName, [\n      attributes.poolId,\n      attributes.sender,\n      attributes.recipient,\n      attributes.joinPoolRequest,\n    ]);\n\n    return {\n      to: balancerVault,\n      functionName,\n      attributes,\n      data,\n    };\n  }\n}\n","import { BalancerNetworkConfig, PoolType } from '@/types';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\nimport { PoolFactory } from '@/modules/pools/factory/pool-factory';\nimport { ComposableStableFactory } from '@/modules/pools/factory/composable-stable/composable-stable.factory';\nimport { WeightedFactory } from '@/modules/pools/factory/weighted/weighted.factory';\n\n/**\n * Wrapper around pool type specific methods.\n *\n * Returns a class instance of a type specific factory.\n */\nexport class PoolFactory__factory {\n  networkConfig: BalancerNetworkConfig;\n\n  constructor(networkConfig: BalancerNetworkConfig) {\n    this.networkConfig = networkConfig;\n  }\n\n  of(poolType: PoolType): PoolFactory {\n    switch (poolType) {\n      case 'Weighted':\n        return new WeightedFactory(this.networkConfig);\n      case 'Investment':\n      case 'LiquidityBootstrapping': {\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n      case 'Stable': {\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n      case 'ComposableStable': {\n        return new ComposableStableFactory(this.networkConfig);\n      }\n      case 'MetaStable': {\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n      case 'StablePhantom': {\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n      case 'AaveLinear':\n      case 'ERC4626Linear': {\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n      }\n      default:\n        throw new BalancerError(BalancerErrorCode.UNSUPPORTED_POOL_TYPE);\n    }\n  }\n}\n","import * as PoolQueries from './types';\nimport { AddressZero, Zero, MaxUint256 } from '@ethersproject/constants';\nimport { getEncoder } from './get_encoder';\n\n/**\n * Builds parameters quering join / exit liquidity functions in the Balancer Helpers contract.\n */\nexport class ParamsBuilder implements PoolQueries.ParamsBuilder {\n  private encoder: PoolQueries.Encoder;\n\n  constructor(private pool: PoolQueries.Pool) {\n    const encoder = getEncoder(pool.poolType);\n    if (encoder) {\n      this.encoder = encoder;\n    } else {\n      throw 'Pool type not supported';\n    }\n  }\n\n  /**\n   * Encodes the query to get expected amount of BPT when joining a Pool with exact token inputs\n   *\n   * @param maxAmountsIn - the amounts each of token to deposit in the pool as liquidity, order needs to match pool.tokensList\n   * @param minimumBPT - the minimum acceptable BPT to receive in return for deposited tokens\n   */\n  buildQueryJoinExactIn({\n    sender = AddressZero,\n    recipient = sender,\n    maxAmountsIn,\n    minimumBPT = Zero,\n    fromInternalBalance = false,\n  }: PoolQueries.JoinExactInParams): PoolQueries.queryJoinParams {\n    const bptIndex = this.pool.tokensList.findIndex((token) =>\n      this.pool.id.includes(token)\n    );\n    const assets = [...this.pool.tokensList];\n\n    // Remove BPT token from amounts\n    if (bptIndex && bptIndex > -1) {\n      maxAmountsIn.splice(bptIndex, 1);\n    }\n\n    const userData = this.encoder.joinExactTokensInForBPTOut(\n      maxAmountsIn,\n      minimumBPT\n    );\n\n    const params = [\n      this.pool.id,\n      sender,\n      recipient,\n      {\n        assets,\n        maxAmountsIn,\n        userData,\n        fromInternalBalance,\n      },\n    ] as PoolQueries.queryJoinParams;\n\n    return params;\n  }\n\n  /**\n   * Encodes the query to get expected token amount when joining a Pool specifying fixed BPT out.\n   *\n   * @param maxAmountsIn - max limits of amounts provided as liquidity, can be set to zero, ordered same as pool.tokensList\n   * @param bptOut - the expected BPT for providing liquidity\n   * @param tokenIn - address of a token joining the pool\n   */\n  buildQueryJoinExactOut({\n    sender = AddressZero,\n    recipient = sender,\n    maxAmountsIn = [],\n    bptOut,\n    tokenIn,\n    fromInternalBalance = false,\n  }: PoolQueries.JoinExactOutParams): PoolQueries.queryJoinParams {\n    const tokenIndex = this.pool.tokensList.indexOf(tokenIn);\n\n    const userData = this.encoder.joinTokenInForExactBPTOut(bptOut, tokenIndex);\n\n    const params = [\n      this.pool.id,\n      sender,\n      recipient,\n      {\n        assets: this.pool.tokensList,\n        maxAmountsIn,\n        userData,\n        fromInternalBalance,\n      },\n    ] as PoolQueries.queryJoinParams;\n\n    return params;\n  }\n\n  /**\n   * Encodes the query for exiting the pool to a single token\n   *\n   * @param minAmountsOut - minimum expected amounts, can be set to zero for a query, ordered same as pool.tokensList\n   * @param bptIn - BPT, shares of the pool liquidity\n   * @param tokenOut - address of an exit liquidity token\n   */\n  buildQueryExitToSingleToken({\n    sender = AddressZero,\n    recipient = sender,\n    minAmountsOut = [],\n    bptIn,\n    tokenOut,\n    toInternalBalance = false,\n  }: PoolQueries.ExitToSingleTokenParams): PoolQueries.queryExitParams {\n    const tokenIndex = this.pool.tokensList.indexOf(tokenOut);\n\n    const userData = this.encoder.exitExactBPTInForOneTokenOut(\n      bptIn,\n      tokenIndex\n    );\n\n    const params = [\n      this.pool.id,\n      sender,\n      recipient,\n      {\n        assets: this.pool.tokensList,\n        minAmountsOut,\n        userData,\n        toInternalBalance,\n      },\n    ] as PoolQueries.queryExitParams;\n\n    return params;\n  }\n\n  /**\n   * Encodes the query for exiting the pool with all underlying tokens proportionally.\n   * Not supported by ComposableStable\n   *\n   * @param minAmountsOut - minimum expected amounts, can be set to zero for a query, ordered same as pool.tokensList\n   * @param bptIn - BPT, shares of the pool liquidity\n   */\n  buildQueryExitProportionally({\n    sender = AddressZero,\n    recipient = sender,\n    minAmountsOut = [],\n    bptIn,\n    toInternalBalance = false,\n  }: PoolQueries.ExitProportionallyParams): PoolQueries.queryExitParams {\n    if (!this.encoder.exitExactBPTInForTokensOut) {\n      throw 'Proportional exit not implemented';\n    }\n\n    const userData = this.encoder.exitExactBPTInForTokensOut(bptIn);\n\n    const params = [\n      this.pool.id,\n      sender,\n      recipient,\n      {\n        assets: this.pool.tokensList,\n        minAmountsOut,\n        userData,\n        toInternalBalance,\n      },\n    ] as PoolQueries.queryExitParams;\n\n    return params;\n  }\n\n  /**\n   * Encodes calldata to query expected BPT for known amounts out.\n   *\n   * @param minAmountsOut - minimum expected amounts, ordered same as pool.tokensList\n   * @param maxBptIn - BPT, shares of the pool liquidity, can be set to zero for a query\n   */\n  buildQueryExitExactOut({\n    sender = AddressZero,\n    recipient = sender,\n    minAmountsOut,\n    maxBptIn = MaxUint256,\n    toInternalBalance = false,\n  }: PoolQueries.ExitExactOutParams): PoolQueries.queryExitParams {\n    const bptIndex = this.pool.tokensList.findIndex((token) =>\n      this.pool.id.includes(token)\n    );\n\n    // Remove BPT token from amounts\n    if (bptIndex && bptIndex > -1) {\n      minAmountsOut.splice(bptIndex, 1);\n    }\n\n    const userData = this.encoder.exitBPTInForExactTokensOut(\n      minAmountsOut,\n      maxBptIn\n    );\n\n    const params = [\n      this.pool.id,\n      sender,\n      recipient,\n      {\n        assets: this.pool.tokensList,\n        minAmountsOut,\n        userData,\n        toInternalBalance,\n      },\n    ] as PoolQueries.queryExitParams;\n\n    return params;\n  }\n}\n","import { WeightedPoolEncoder } from '@/pool-weighted/encoder';\nimport { StablePoolEncoder } from '@/pool-stable/encoder';\nimport { ComposableStablePoolEncoder } from '@/pool-composable-stable';\nimport { PoolType } from '@/types';\n\nexport const getEncoder = (\n  poolType: PoolType\n):\n  | typeof WeightedPoolEncoder\n  | typeof StablePoolEncoder\n  | typeof ComposableStablePoolEncoder\n  | undefined => {\n  switch (poolType) {\n    case PoolType.Weighted:\n      return WeightedPoolEncoder;\n\n    case PoolType.Stable:\n    case PoolType.MetaStable:\n    case PoolType.StablePhantom:\n    case PoolType.AaveLinear:\n    case PoolType.EulerLinear:\n    case PoolType.ERC4626Linear:\n    case PoolType.Element:\n    case PoolType.Gyro2:\n    case PoolType.Gyro3:\n      return StablePoolEncoder;\n\n    case PoolType.ComposableStable:\n      return ComposableStablePoolEncoder;\n\n    default:\n      break;\n  }\n};\n","import * as emissions from '@/modules/data/bal/emissions';\nimport { Findable, LiquidityGauge } from '@/types';\n\n/**\n * Returns BAL emissions per pool\n */\nexport class EmissionsService {\n  constructor(private liquidityGaugesRepository: Findable<LiquidityGauge>) {}\n\n  async relativeWeight(poolId: string): Promise<number> {\n    const gauge = await this.liquidityGaugesRepository.findBy('poolId', poolId);\n\n    if (gauge) {\n      return gauge.relativeWeight;\n    }\n\n    return 0;\n  }\n\n  async weekly(poolId: string): Promise<number> {\n    const perWeek = emissions.weekly();\n    const relativeWeight = await this.relativeWeight(poolId);\n\n    return perWeek * relativeWeight;\n  }\n}\n","import { parseUnits } from '@ethersproject/units';\nimport { BigNumber } from '@ethersproject/bignumber';\n\n/**\n * Calculates the proportional amounts of tokens in relation to a given token and amount.\n * Useful for calculating the amounts of tokens to be sent to a pool when joining or swapping.\n * When using proportional amounts to join a pool the price impact will be minimal.\n *\n * @param pool - Pool object\n * @param token - Token address in relation to which the amounts are calculated\n * @param amount - Amount of token\n * @returns Object with tokens and amounts\n * @example\n * const pool = {\n *   id: '0x0000',\n *   tokens: [\n *     { address: '0x1234', balance: '10' },\n *     { address: '0x5678', balance: '20' }\n *   ]\n * }\n *\n * const { tokens, amounts } = proportionalAmounts(pool, '0x1234', '1000000000000000000')\n */\nexport const proportionalAmounts = (\n  pool: {\n    id: string;\n    tokens: { address: string; balance: string; decimals?: number }[];\n  },\n  token: string,\n  amount: string\n): {\n  tokens: string[];\n  amounts: string[];\n} => {\n  const tokensWithoutBpt = pool.tokens.filter(\n    (t) => !pool.id.toLowerCase().includes(t.address.toLowerCase())\n  );\n  const referenceTokenIndex = tokensWithoutBpt.findIndex(\n    (t) => t.address.toLowerCase() === token.toLowerCase()\n  );\n\n  if (referenceTokenIndex == -1) {\n    throw new Error('Token not found in pool');\n  }\n\n  const balances = tokensWithoutBpt.map((t) =>\n    parseUnits(t.balance, t.decimals)\n  );\n  const amountBn = BigNumber.from(amount);\n  const proportionalAmounts = balances.map((b) =>\n    b.mul(amountBn).div(balances[referenceTokenIndex])\n  );\n\n  return {\n    tokens: tokensWithoutBpt.map((t) => t.address),\n    amounts: proportionalAmounts.map((a) => a.toString()),\n  };\n};\n","import { ImpermanentLossService } from '@/modules/pools/impermanentLoss/impermanentLossService';\nimport type {\n  BalancerNetworkConfig,\n  BalancerDataRepositories,\n  Findable,\n  Searchable,\n  Pool,\n  PoolWithMethods,\n  AprBreakdown,\n  PoolAttribute,\n} from '@/types';\nimport { JoinPoolAttributes } from './pool-types/concerns/types';\nimport { PoolTypeConcerns } from './pool-type-concerns';\nimport { PoolApr } from './apr/apr';\nimport { Liquidity } from '../liquidity/liquidity.module';\nimport { Join } from '../joins/joins.module';\nimport { Exit } from '../exits/exits.module';\nimport { PoolVolume } from './volume/volume';\nimport { PoolFees } from './fees/fees';\nimport { PoolFactory__factory } from './pool-factory__factory';\nimport * as Queries from './queries';\nimport { BalancerError } from '@/balancerErrors';\nimport { EmissionsService } from './emissions';\nimport { proportionalAmounts } from './proportional-amounts';\n\nconst notImplemented = (poolType: string, name: string) => () => {\n  throw `${name} for poolType ${poolType} not implemented`;\n};\n\n/**\n * Controller / use-case layer for interacting with pools data.\n */\nexport class Pools implements Findable<PoolWithMethods> {\n  aprService;\n  liquidityService;\n  joinService;\n  exitService;\n  feesService;\n  volumeService;\n  poolFactory;\n  impermanentLossService;\n  emissionsService;\n  proportionalAmounts;\n\n  constructor(\n    private networkConfig: BalancerNetworkConfig,\n    private repositories: BalancerDataRepositories\n  ) {\n    this.aprService = new PoolApr(\n      this.repositories.pools,\n      this.repositories.tokenPrices,\n      this.repositories.tokenMeta,\n      this.repositories.tokenYields,\n      this.repositories.feeCollector,\n      this.repositories.yesterdaysPools,\n      this.repositories.liquidityGauges,\n      this.repositories.feeDistributor\n    );\n    this.liquidityService = new Liquidity(\n      repositories.pools,\n      repositories.tokenPrices\n    );\n    this.joinService = new Join(this.repositories.poolsOnChain, networkConfig);\n    this.exitService = new Exit(this.repositories.poolsOnChain, networkConfig);\n    this.feesService = new PoolFees(repositories.yesterdaysPools);\n    this.volumeService = new PoolVolume(repositories.yesterdaysPools);\n    this.poolFactory = new PoolFactory__factory(networkConfig);\n    this.impermanentLossService = new ImpermanentLossService(\n      repositories.tokenPrices,\n      repositories.tokenHistoricalPrices\n    );\n    if (repositories.liquidityGauges) {\n      this.emissionsService = new EmissionsService(\n        repositories.liquidityGauges\n      );\n    }\n    this.proportionalAmounts = proportionalAmounts;\n  }\n\n  dataSource(): Findable<Pool, PoolAttribute> & Searchable<Pool> {\n    // TODO: Add API data repository to data and use liveModelProvider as fallback\n    return this.repositories.pools;\n  }\n\n  /**\n   * Calculates APR on any pool data\n   *\n   * @param pool\n   * @returns\n   */\n  async apr(pool: Pool): Promise<AprBreakdown> {\n    return this.aprService.apr(pool);\n  }\n\n  /**\n   * Calculates Impermanent Loss on any pool data\n   *\n   * @param timestamp\n   * @param pool\n   * @returns\n   */\n  async impermanentLoss(timestamp: number, pool: Pool): Promise<number> {\n    return this.impermanentLossService.calcImpLoss(timestamp, pool);\n  }\n\n  /**\n   * Calculates total liquidity of the pool\n   *\n   * @param pool\n   * @returns\n   */\n  async liquidity(pool: Pool): Promise<string> {\n    return this.liquidityService.getLiquidity(pool);\n  }\n\n  /**\n   * Builds generalised join transaction\n   *\n   * @param poolId          Pool id\n   * @param tokens          Token addresses\n   * @param amounts         Token amounts in EVM scale\n   * @param userAddress     User address\n   * @param wrapMainTokens  Indicates whether main tokens should be wrapped before being used\n   * @param slippage        Maximum slippage tolerance in bps i.e. 50 = 0.5%.\n   * @param authorisation   Optional auhtorisation call to be added to the chained transaction\n   * @returns transaction data ready to be sent to the network along with min and expected BPT amounts out.\n   */\n  async generalisedJoin(\n    poolId: string,\n    tokens: string[],\n    amounts: string[],\n    userAddress: string,\n    wrapMainTokens: boolean,\n    slippage: string,\n    authorisation?: string\n  ): Promise<{\n    to: string;\n    callData: string;\n    minOut: string;\n    expectedOut: string;\n    priceImpact: string;\n  }> {\n    return this.joinService.joinPool(\n      poolId,\n      tokens,\n      amounts,\n      userAddress,\n      wrapMainTokens,\n      slippage,\n      authorisation\n    );\n  }\n\n  /**\n   * Builds generalised exit transaction\n   *\n   * @param poolId        Pool id\n   * @param amount        Token amount in EVM scale\n   * @param userAddress   User address\n   * @param slippage      Maximum slippage tolerance in bps i.e. 50 = 0.5%.\n   * @param authorisation Optional auhtorisation call to be added to the chained transaction\n   * @returns transaction data ready to be sent to the network along with tokens, min and expected amounts out.\n   */\n  async generalisedExit(\n    poolId: string,\n    amount: string,\n    userAddress: string,\n    slippage: string,\n    authorisation?: string\n  ): Promise<{\n    to: string;\n    callData: string;\n    tokensOut: string[];\n    expectedAmountsOut: string[];\n    minAmountsOut: string[];\n    priceImpact: string;\n  }> {\n    return this.exitService.exitPool(\n      poolId,\n      amount,\n      userAddress,\n      slippage,\n      authorisation\n    );\n  }\n\n  /**\n   * Calculates total fees for the pool in the last 24 hours\n   *\n   * @param pool\n   * @returns\n   */\n  async fees(pool: Pool): Promise<number> {\n    return this.feesService.last24h(pool);\n  }\n\n  /**\n   * Calculates total volume of the pool in the last 24 hours\n   *\n   * @param pool\n   * @returns\n   */\n  async volume(pool: Pool): Promise<number> {\n    return this.volumeService.last24h(pool);\n  }\n\n  static wrap(\n    pool: Pool,\n    networkConfig: BalancerNetworkConfig\n  ): PoolWithMethods {\n    let concerns: ReturnType<typeof PoolTypeConcerns.from>;\n    let queries: Queries.ParamsBuilder;\n    let methods;\n    try {\n      concerns = PoolTypeConcerns.from(pool.poolType);\n      methods = {\n        buildJoin: (\n          joiner: string,\n          tokensIn: string[],\n          amountsIn: string[],\n          slippage: string\n        ): JoinPoolAttributes => {\n          return concerns.join.buildJoin({\n            joiner,\n            pool,\n            tokensIn,\n            amountsIn,\n            slippage,\n            wrappedNativeAsset,\n          });\n        },\n        calcPriceImpact: async (\n          amountsIn: string[],\n          minBPTOut: string,\n          isJoin: boolean\n        ) =>\n          concerns.priceImpactCalculator.calcPriceImpact(\n            pool,\n            amountsIn,\n            minBPTOut,\n            isJoin\n          ),\n        buildExitExactBPTIn: (\n          exiter: string,\n          bptIn: string,\n          slippage: string,\n          shouldUnwrapNativeAsset = false,\n          singleTokenMaxOut?: string\n        ) => {\n          if (concerns.exit.buildExitExactBPTIn) {\n            return concerns.exit.buildExitExactBPTIn({\n              exiter,\n              pool,\n              bptIn,\n              slippage,\n              shouldUnwrapNativeAsset,\n              wrappedNativeAsset,\n              singleTokenMaxOut,\n            });\n          } else {\n            throw 'ExitExactBPTIn not supported';\n          }\n        },\n        buildExitExactTokensOut: (\n          exiter: string,\n          tokensOut: string[],\n          amountsOut: string[],\n          slippage: string\n        ) =>\n          concerns.exit.buildExitExactTokensOut({\n            exiter,\n            pool,\n            tokensOut,\n            amountsOut,\n            slippage,\n            wrappedNativeAsset,\n          }),\n        // TODO: spotPrice fails, because it needs a subgraphType,\n        // either we refetch or it needs a type transformation from SDK internal to SOR (subgraph)\n        // spotPrice: async (tokenIn: string, tokenOut: string) =>\n        //   methods.spotPriceCalculator.calcPoolSpotPrice(tokenIn, tokenOut, data),\n        calcSpotPrice: (tokenIn: string, tokenOut: string) =>\n          concerns.spotPriceCalculator.calcPoolSpotPrice(\n            tokenIn,\n            tokenOut,\n            pool\n          ),\n        calcProportionalAmounts: (token: string, amount: string) => {\n          return proportionalAmounts(pool, token, amount);\n        },\n      };\n    } catch (error) {\n      if ((error as BalancerError).code != 'UNSUPPORTED_POOL_TYPE') {\n        console.error(error);\n      }\n\n      methods = {\n        buildJoin: notImplemented(pool.poolType, 'buildJoin'),\n        calcPriceImpact: notImplemented(pool.poolType, 'calcPriceImpact'),\n        buildExitExactBPTIn: notImplemented(\n          pool.poolType,\n          'buildExitExactBPTIn'\n        ),\n        buildExitExactTokensOut: notImplemented(\n          pool.poolType,\n          'buildExitExactTokensOut'\n        ),\n        calcSpotPrice: notImplemented(pool.poolType, 'calcSpotPrice'),\n      };\n    }\n\n    try {\n      queries = new Queries.ParamsBuilder(pool);\n      methods = {\n        ...methods,\n        buildQueryJoinExactIn: queries.buildQueryJoinExactIn.bind(queries),\n        buildQueryJoinExactOut: queries.buildQueryJoinExactOut.bind(queries),\n        buildQueryExitExactOut: queries.buildQueryExitExactOut.bind(queries),\n        buildQueryExitToSingleToken:\n          queries.buildQueryExitToSingleToken.bind(queries),\n        buildQueryExitProportionally:\n          queries.buildQueryExitProportionally.bind(queries),\n      };\n    } catch (error) {\n      methods = {\n        ...methods,\n        buildQueryJoinExactIn: notImplemented(\n          pool.poolType,\n          'buildQueryJoinExactIn'\n        ),\n        buildQueryJoinExactOut: notImplemented(\n          pool.poolType,\n          'buildQueryJoinExactOut'\n        ),\n        buildQueryExitExactOut: notImplemented(\n          pool.poolType,\n          'buildQueryExitExactOut'\n        ),\n        buildQueryExitToSingleToken: notImplemented(\n          pool.poolType,\n          'buildQueryExitToSingleToken'\n        ),\n        buildQueryExitProportionally: notImplemented(\n          pool.poolType,\n          'buildQueryExitProportionally'\n        ),\n      };\n    }\n    const wrappedNativeAsset =\n      networkConfig.addresses.tokens.wrappedNativeAsset.toLowerCase();\n    return {\n      ...pool,\n      ...methods,\n    };\n  }\n\n  async find(id: string): Promise<PoolWithMethods | undefined> {\n    const data = await this.dataSource().find(id);\n    if (!data) return;\n\n    return Pools.wrap(data, this.networkConfig);\n  }\n\n  async findBy(\n    param: string,\n    value: string\n  ): Promise<PoolWithMethods | undefined> {\n    if (param == 'id') {\n      return this.find(value);\n    } else if (param == 'address') {\n      const data = await this.dataSource().findBy('address', value);\n      if (!data) return;\n\n      return Pools.wrap(data, this.networkConfig);\n    } else {\n      throw `search by ${param} not implemented`;\n    }\n  }\n\n  async all(): Promise<PoolWithMethods[]> {\n    const list = await this.dataSource().all();\n    if (!list) return [];\n\n    return list\n      .map((data: Pool) => Pools.wrap(data, this.networkConfig))\n      .filter((p) => p) as PoolWithMethods[];\n  }\n\n  async where(filter: (pool: Pool) => boolean): Promise<PoolWithMethods[]> {\n    const list = await this.dataSource().where(filter);\n    if (!list) return [];\n\n    const wrapped = list.map((data: Pool) =>\n      Pools.wrap(data, this.networkConfig)\n    );\n\n    return wrapped.filter((p) => p) as PoolWithMethods[];\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport { getAddress } from '@ethersproject/address';\nimport { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { formatUnits } from '@ethersproject/units';\nimport { Multicall } from '@/modules/contracts/implementations/multicall';\n\nconst gaugeControllerInterface = new Interface([\n  'function gauge_relative_weight(address gauge, uint timestamp) view returns (uint)',\n]);\n\nexport class GaugeControllerMulticallRepository {\n  multicall: Contract;\n\n  constructor(\n    multicallAddress: string,\n    private gaugeControllerAddress: string,\n    provider: Provider\n  ) {\n    this.multicall = Multicall(multicallAddress, provider);\n  }\n\n  async getRelativeWeights(\n    gaugeAddresses: string[],\n    timestamp?: number\n  ): Promise<{ [gaugeAddress: string]: number }> {\n    const payload = gaugeAddresses.map((gaugeAddress) => [\n      this.gaugeControllerAddress,\n      gaugeControllerInterface.encodeFunctionData('gauge_relative_weight', [\n        getAddress(gaugeAddress),\n        timestamp || Math.floor(Date.now() / 1000),\n      ]),\n    ]);\n    const [, res] = await this.multicall.aggregate(payload);\n\n    const weights = gaugeAddresses.reduce(\n      (p: { [key: string]: number }, a, i) => {\n        p[a] ||= parseFloat(formatUnits(res[i], 18));\n        return p;\n      },\n      {}\n    );\n\n    return weights;\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { Findable } from '@/types';\n\nexport abstract class AbstractSubgraphRepository<T, A>\n  implements Findable<T, A>\n{\n  protected abstract mapType(subgraphFragment: any): T;\n\n  abstract query(args: any): Promise<T[]>;\n\n  async get(args: any): Promise<T | undefined> {\n    const result = await this.query(args);\n    return result?.length > 0 ? result[0] : undefined;\n  }\n\n  async find(id: string): Promise<T | undefined> {\n    return this.get({ where: { id: id } });\n  }\n\n  async findBy(attribute: A, value: string): Promise<T | undefined> {\n    return this.get({ where: { [String(attribute)]: value } });\n  }\n\n  async findAllBy(\n    attribute: A,\n    value: string,\n    first = 1000,\n    skip = 0\n  ): Promise<T[]> {\n    const args = {\n      where: { [String(attribute)]: value },\n      first: first,\n      skip: skip,\n    };\n    return this.query(args);\n  }\n}\n","import { Network } from '@/lib/constants/network';\nimport { AbstractSubgraphRepository } from './abstract-subgraph-repository';\nimport { createSubgraphClient, SubgraphClient } from '../subgraph';\n\nexport abstract class BalancerSubgraphRepository<\n  T,\n  A\n> extends AbstractSubgraphRepository<T, A> {\n  protected client: SubgraphClient;\n\n  constructor(\n    url: string,\n    protected chainId: Network,\n    protected blockHeight?: () => Promise<number | undefined>\n  ) {\n    super();\n    this.client = createSubgraphClient(url);\n  }\n}\n","import { Network } from '@/lib/constants/network';\nimport { AbstractSubgraphRepository } from './abstract-subgraph-repository';\nimport { createGaugesClient, GaugesClient } from '../subgraph';\n\nexport abstract class GaugesSubgraphRepository<\n  T,\n  A\n> extends AbstractSubgraphRepository<T, A> {\n  protected client: GaugesClient;\n\n  constructor(\n    url: string,\n    protected chainId: Network,\n    protected blockHeight?: () => Promise<number | undefined>\n  ) {\n    super();\n    this.client = createGaugesClient(url);\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { GaugeShare, GaugeShareAttributes } from './types';\nimport { GaugesSubgraphRepository } from '@/modules/subgraph/repository';\nimport {\n  SubgraphGaugeShareFragment,\n  GaugeShare_OrderBy,\n  OrderDirection,\n} from '@/modules/subgraph/generated/balancer-gauges';\n\nexport class GaugeSharesRepository extends GaugesSubgraphRepository<\n  GaugeShare,\n  GaugeShareAttributes\n> {\n  async query(args: any): Promise<GaugeShare[]> {\n    if (!args.orderBy) args.orderBy = GaugeShare_OrderBy.Balance;\n    if (!args.orderDirection) args.orderDirection = OrderDirection.Desc;\n    if (!args.block && this.blockHeight)\n      args.block = { number: await this.blockHeight() };\n\n    const { gaugeShares } = await this.client.GaugeShares(args);\n    return gaugeShares.map(this.mapType);\n  }\n\n  mapType(subgraphGaugeShare: SubgraphGaugeShareFragment): GaugeShare {\n    return {\n      id: subgraphGaugeShare.id,\n      balance: subgraphGaugeShare.balance,\n      userAddress: subgraphGaugeShare.user?.id,\n      gauge: {\n        id: subgraphGaugeShare.gauge.id,\n        poolId: subgraphGaugeShare.gauge.poolId || undefined,\n        isKilled: subgraphGaugeShare.gauge.isKilled,\n        totalSupply: subgraphGaugeShare.gauge.totalSupply,\n      },\n    };\n  }\n\n  async findByUser(\n    userAddress: string,\n    first?: number,\n    skip?: number\n  ): Promise<GaugeShare[]> {\n    return this.findAllBy(\n      GaugeShareAttributes.UserAddress,\n      userAddress,\n      first,\n      skip\n    );\n  }\n\n  async findByGauge(\n    gaugeId: string,\n    first?: number,\n    skip?: number\n  ): Promise<GaugeShare[]> {\n    return this.findAllBy(GaugeShareAttributes.GaugeId, gaugeId, first, skip);\n  }\n}\n","import { Multicall } from '@/modules/contracts/implementations/multicall';\nimport { Provider } from '@ethersproject/providers';\nimport { Interface } from '@ethersproject/abi';\nimport { Contract } from '@ethersproject/contracts';\nimport { formatUnits } from '@ethersproject/units';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport type { Network } from '@/types';\n\nconst liquidityGaugeV5Interface = new Interface([\n  'function totalSupply() view returns (uint)',\n  'function working_supply() view returns (uint)',\n  'function reward_count() view returns (uint)',\n  'function reward_tokens(uint rewardIndex) view returns (address)',\n  'function reward_data(address rewardToken) view returns (tuple(address token, address distributor, uint period_finish, uint rate, uint last_update, uint integral) data)',\n]);\n\nexport interface RewardData {\n  token: string; // Always 0x0\n  distributor: string;\n  period_finish: BigNumber;\n  rate: BigNumber; // per second\n  last_update: BigNumber;\n  integral: BigNumber; // sum accrued to date\n  decimals?: number; // Provided by subgraph\n}\n\n/**\n * A lot of code to get liquidity gauge state via RPC multicall.\n * TODO: reseach helper contracts or extend subgraph\n */\nexport class LiquidityGaugesMulticallRepository {\n  multicall: Contract;\n\n  constructor(\n    multicallAddress: string,\n    private chainId: Network,\n    provider: Provider\n  ) {\n    this.multicall = Multicall(multicallAddress, provider);\n  }\n\n  async getTotalSupplies(\n    gaugeAddresses: string[]\n  ): Promise<{ [gaugeAddress: string]: number }> {\n    const payload = gaugeAddresses.map((gaugeAddress) => [\n      gaugeAddress,\n      liquidityGaugeV5Interface.encodeFunctionData('totalSupply', []),\n    ]);\n    const [, res] = await this.multicall.aggregate(payload);\n    // Handle 0x\n    const res0x = res.map((r: string) => (r == '0x' ? '0x0' : r));\n\n    const totalSupplies = gaugeAddresses.reduce(\n      (p: { [key: string]: number }, a, i) => {\n        p[a] ||= parseFloat(formatUnits(res0x[i], 18));\n        return p;\n      },\n      {}\n    );\n\n    return totalSupplies;\n  }\n\n  async getWorkingSupplies(\n    gaugeAddresses: string[]\n  ): Promise<{ [gaugeAddress: string]: number }> {\n    const payload = gaugeAddresses.map((gaugeAddress) => [\n      gaugeAddress,\n      liquidityGaugeV5Interface.encodeFunctionData('working_supply', []),\n    ]);\n    const [, res] = await this.multicall.aggregate(payload);\n    // Handle 0x\n    const res0x = res.map((r: string) => (r == '0x' ? '0x0' : r));\n\n    const workingSupplies = gaugeAddresses.reduce(\n      (p: { [key: string]: number }, a, i) => {\n        p[a] ||= parseFloat(formatUnits(res0x[i], 18));\n        return p;\n      },\n      {}\n    );\n\n    return workingSupplies;\n  }\n\n  async getRewardCounts(\n    gaugeAddresses: string[]\n  ): Promise<{ [gaugeAddress: string]: number }> {\n    let rewardCounts;\n    if (this.chainId == 1) {\n      const payload = gaugeAddresses.map((gaugeAddress) => [\n        gaugeAddress,\n        liquidityGaugeV5Interface.encodeFunctionData('reward_count', []),\n      ]);\n      const [, res] = await this.multicall.aggregate(payload);\n      // Handle 0x return values\n      const res0x = res.map((r: string) => (r == '0x' ? '0x0' : r));\n\n      rewardCounts = gaugeAddresses.reduce(\n        (p: { [key: string]: number }, a, i) => {\n          p[a] ||= parseInt(res0x[i]);\n          return p;\n        },\n        {}\n      );\n    } else {\n      rewardCounts = gaugeAddresses.reduce(\n        (p: { [key: string]: number }, a) => {\n          p[a] ||= 1;\n          return p;\n        },\n        {}\n      );\n    }\n\n    return rewardCounts;\n  }\n\n  async getRewardTokens(\n    gaugeAddresses: string[],\n    passingRewardCounts?: { [gaugeAddress: string]: number }\n  ): Promise<{ [gaugeAddress: string]: string[] }> {\n    const rewardCounts =\n      passingRewardCounts || (await this.getRewardCounts(gaugeAddresses));\n    const gaugesWithRewards = gaugeAddresses.filter(\n      (gaugeAddress) => rewardCounts[gaugeAddress] > 0\n    );\n    const startIndexes = [0];\n    const payload = gaugesWithRewards\n      .map((gaugeAddress, gaugeIndex) => {\n        const calls = [];\n        for (let i = 0; i < rewardCounts[gaugeAddress]; i++) {\n          calls.push([\n            gaugeAddress,\n            liquidityGaugeV5Interface.encodeFunctionData('reward_tokens', [i]),\n          ]);\n        }\n        startIndexes[gaugeIndex + 1] =\n          startIndexes[gaugeIndex] + rewardCounts[gaugeAddress];\n        return calls;\n      })\n      .flat();\n    const [, res] = await this.multicall.aggregate(payload);\n\n    const rewardTokens = gaugesWithRewards.reduce(\n      (p: { [key: string]: string[] }, a, i) => {\n        const start = startIndexes[i];\n        const end = startIndexes[i + 1];\n        const tokens: string[] = [];\n        for (let i = start; i < end; i++) {\n          tokens.push(\n            liquidityGaugeV5Interface.decodeFunctionResult(\n              'reward_tokens',\n              res[i]\n            )[0]\n          );\n        }\n        p[a] ||= tokens;\n        return p;\n      },\n      {}\n    );\n\n    return rewardTokens;\n  }\n\n  async getRewardData(\n    gaugeAddresses: string[],\n    passingRewardTokens?: { [gaugeAddress: string]: string[] }\n  ): Promise<{\n    [gaugeAddress: string]: { [rewardTokenAddress: string]: RewardData };\n  }> {\n    const rewardTokens =\n      passingRewardTokens || (await this.getRewardTokens(gaugeAddresses));\n\n    const startIndexes = [0];\n    const payload = Object.keys(rewardTokens)\n      .map((gaugeAddress, gaugeIndex) => {\n        const calls = [];\n        for (let i = 0; i < rewardTokens[gaugeAddress].length; i++) {\n          calls.push([\n            gaugeAddress,\n            liquidityGaugeV5Interface.encodeFunctionData('reward_data', [\n              rewardTokens[gaugeAddress][i],\n            ]),\n          ]);\n        }\n        startIndexes[gaugeIndex + 1] =\n          startIndexes[gaugeIndex] + rewardTokens[gaugeAddress].length;\n        return calls;\n      })\n      .flat();\n    const [, res] = (await this.multicall.aggregate(payload)) as [\n      unknown,\n      string[]\n    ];\n    const decoded = res.map(\n      (r) => liquidityGaugeV5Interface.decodeFunctionResult('reward_data', r)[0]\n    );\n\n    const rewardData = Object.keys(rewardTokens).reduce(\n      (p: { [key: string]: { [key: string]: RewardData } }, a, i) => {\n        const start = startIndexes[i];\n        const data = rewardTokens[a].reduce(\n          (d: { [key: string]: RewardData }, t, x) => {\n            d[t] ||= decoded[start + x] as RewardData;\n            return d;\n          },\n          {}\n        );\n        p[a] ||= data;\n        return p;\n      },\n      {}\n    );\n\n    return rewardData;\n  }\n}\n","import { Findable } from '../types';\nimport {\n  createGaugesClient,\n  GaugesClient,\n  SubgraphLiquidityGauge,\n} from '@/modules/subgraph/subgraph';\n\n/**\n * Access liquidity gauges indexed by subgraph.\n * Because we have ~100 gauges to save on repeated http calls we cache all results as `gauges` on an instance.\n * Balancer's subgraph URL: https://thegraph.com/hosted-service/subgraph/balancer-labs/balancer-gauges\n */\nexport class LiquidityGaugesSubgraphRepository\n  implements Findable<SubgraphLiquidityGauge>\n{\n  private client: GaugesClient;\n  public gauges: SubgraphLiquidityGauge[] = [];\n\n  constructor(url: string) {\n    this.client = createGaugesClient(url);\n  }\n\n  async fetch(): Promise<SubgraphLiquidityGauge[]> {\n    console.time('fetching liquidity gauges');\n    const queryResult = await this.client.Pools({\n      where: {\n        preferentialGauge_not: null,\n      },\n    });\n    const qauges = queryResult.pools.map((pool) => pool.preferentialGauge);\n    // TODO: optionally convert subgraph type to sdk internal type\n    this.gauges = qauges as SubgraphLiquidityGauge[];\n\n    console.timeEnd('fetching liquidity gauges');\n    return this.gauges;\n  }\n\n  async find(id: string): Promise<SubgraphLiquidityGauge | undefined> {\n    if (this.gauges.length == 0) {\n      await this.fetch();\n    }\n\n    return this.gauges.find((gauge) => gauge.id == id);\n  }\n\n  async findBy(\n    param: string,\n    value: string\n  ): Promise<SubgraphLiquidityGauge | undefined> {\n    if (this.gauges.length == 0) {\n      await this.fetch();\n    }\n\n    if (param == 'id') {\n      return this.find(value);\n    } else if (param == 'poolId') {\n      return this.gauges.find((gauge) => gauge.poolId == value);\n    } else if (param == 'poolAddress') {\n      return this.gauges.find((gauge) => gauge.poolAddress == value);\n    } else {\n      throw `search by ${param} not implemented`;\n    }\n  }\n}\n","import { GaugeControllerMulticallRepository } from '../gauge-controller/multicall';\nimport { LiquidityGaugesMulticallRepository, RewardData } from './multicall';\nimport { LiquidityGaugesSubgraphRepository } from './subgraph';\nimport { parseUnits } from '@ethersproject/units';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport type {\n  Maybe,\n  SubgraphLiquidityGauge,\n} from '@/modules/subgraph/subgraph';\nimport type { Findable } from '../types';\nimport type { Provider } from '@ethersproject/providers';\nimport type { Network } from '@/types';\n\nexport interface LiquidityGauge {\n  id: string;\n  address: string;\n  name: string;\n  poolId?: Maybe<string>;\n  poolAddress: string;\n  totalSupply: number;\n  workingSupply: number;\n  relativeWeight: number;\n  rewardTokens?: { [tokenAddress: string]: RewardData };\n}\n\nexport class LiquidityGaugeSubgraphRPCProvider\n  implements Findable<LiquidityGauge>\n{\n  gaugeController?: GaugeControllerMulticallRepository;\n  multicall: LiquidityGaugesMulticallRepository;\n  subgraph: LiquidityGaugesSubgraphRepository;\n  workingSupplies: { [gaugeAddress: string]: number } = {};\n  relativeWeights: { [gaugeAddress: string]: number } = {};\n  rewardData: {\n    [gaugeAddress: string]: { [tokenAddress: string]: RewardData };\n  } = {};\n  gauges?: Promise<LiquidityGauge[]>;\n\n  constructor(\n    subgraphUrl: string,\n    multicallAddress: string,\n    gaugeControllerAddress: string,\n    private chainId: Network,\n    provider: Provider\n  ) {\n    if (gaugeControllerAddress) {\n      this.gaugeController = new GaugeControllerMulticallRepository(\n        multicallAddress,\n        gaugeControllerAddress,\n        provider\n      );\n    }\n    this.multicall = new LiquidityGaugesMulticallRepository(\n      multicallAddress,\n      chainId,\n      provider\n    );\n    this.subgraph = new LiquidityGaugesSubgraphRepository(subgraphUrl);\n  }\n\n  async fetch(): Promise<LiquidityGauge[]> {\n    const gauges: SubgraphLiquidityGauge[] = await this.subgraph.fetch();\n    const gaugeAddresses = gauges.map((g) => g.id);\n    if (this.chainId == 1) {\n      console.time('Fetching multicall.getWorkingSupplies');\n      this.workingSupplies = await this.multicall.getWorkingSupplies(\n        gaugeAddresses\n      );\n      console.timeEnd('Fetching multicall.getWorkingSupplies');\n    }\n    if (this.gaugeController) {\n      console.time('Fetching gaugeController.getRelativeWeights');\n      this.relativeWeights = await this.gaugeController.getRelativeWeights(\n        gaugeAddresses\n      );\n      console.timeEnd('Fetching gaugeController.getRelativeWeights');\n    }\n\n    // Kept as a potential fallback for getting rewardData from RPC\n    // this.rewardData = await this.multicall.getRewardData(\n    //   gaugeAddresses //,\n    //   // rewardTokens\n    // );\n\n    // Reward data was made available from subgraph, keeping it separate for potential RPC fallback\n    this.rewardData = gauges.reduce(\n      (r: { [key: string]: { [key: string]: RewardData } }, g) => {\n        r[g.id] ||= g.tokens\n          ? Object.fromEntries(\n              g.tokens.map((t) => [\n                t.id.split('-')[0],\n                {\n                  distributor: '',\n                  last_update: BigNumber.from(0),\n                  integral: BigNumber.from(0),\n                  token: t.id.split('-')[0],\n                  decimals: t.decimals,\n                  rate: parseUnits(t.rate || '0', t.decimals),\n                  period_finish: BigNumber.from(\n                    (t.periodFinish as unknown as string) || '0'\n                  ),\n                },\n              ])\n            )\n          : {};\n\n        return r;\n      },\n      {}\n    );\n\n    return gauges.map(this.compose.bind(this));\n  }\n\n  async find(id: string): Promise<LiquidityGauge | undefined> {\n    if (!this.gauges) {\n      this.gauges = this.fetch();\n    }\n\n    return (await this.gauges).find((g) => g.id == id);\n  }\n\n  async findBy(\n    attribute: string,\n    value: string\n  ): Promise<LiquidityGauge | undefined> {\n    if (!this.gauges) {\n      this.gauges = this.fetch();\n    }\n\n    let gauge: LiquidityGauge | undefined;\n    if (attribute == 'id') {\n      return this.find(value);\n    } else if (attribute == 'address') {\n      return this.find(value);\n    } else if (attribute == 'poolId') {\n      gauge = (await this.gauges).find((g) => g.poolId == value);\n    } else if (attribute == 'poolAddress') {\n      gauge = (await this.gauges).find((g) => g.poolAddress == value);\n    } else {\n      throw `search by ${attribute} not implemented`;\n    }\n\n    return gauge;\n  }\n\n  private compose(subgraphGauge: SubgraphLiquidityGauge) {\n    return {\n      id: subgraphGauge.id,\n      address: subgraphGauge.id,\n      name: subgraphGauge.symbol,\n      poolId: subgraphGauge.poolId,\n      poolAddress: subgraphGauge.poolAddress,\n      totalSupply: parseFloat(subgraphGauge.totalSupply),\n      workingSupply: this.workingSupplies[subgraphGauge.id],\n      relativeWeight: this.relativeWeights[subgraphGauge.id],\n      rewardTokens: this.rewardData[subgraphGauge.id],\n    };\n  }\n}\n","import axios from 'axios';\nimport { jsonToGraphQLQuery } from 'json-to-graphql-query';\n\nexport default class BalancerAPIClient {\n  constructor(private readonly url: string, private readonly apiKey: string) {}\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public async get(query: unknown): Promise<any> {\n    try {\n      const payload = this.toPayload(query);\n      const { data } = await axios.post(this.url, payload, {\n        headers: {\n          'x-api-key': this.apiKey,\n        },\n      });\n      if (data.errors) {\n        throw new Error(\n          data.errors.map((error: Error) => error.message).join(',')\n        );\n      }\n      return data.data;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n\n    return [];\n  }\n\n  public toPayload(query: unknown): unknown {\n    return JSON.stringify({ query: jsonToGraphQLQuery({ query }) });\n  }\n}\n","import { Findable, Searchable } from '../types';\nimport {\n  createSubgraphClient,\n  SubgraphClient,\n  SubgraphPool,\n  Pool_OrderBy,\n  OrderDirection,\n  SubgraphPoolTokenFragment,\n  SubgraphSubPoolFragment,\n  SubgraphSubPoolTokenFragment,\n} from '@/modules/subgraph/subgraph';\nimport {\n  GraphQLArgsBuilder,\n  SubgraphArgsFormatter,\n} from '@/lib/graphql/args-builder';\nimport { GraphQLArgs } from '@/lib/graphql/types';\nimport { PoolAttribute, PoolsRepositoryFetchOptions } from './types';\nimport {\n  GraphQLQuery,\n  Pool,\n  PoolType,\n  PoolToken,\n  SubPool,\n  SubPoolMeta,\n} from '@/types';\nimport { Network } from '@/lib/constants/network';\nimport { PoolsQueryVariables } from '../../subgraph/subgraph';\n\ninterface PoolsSubgraphRepositoryOptions {\n  url: string;\n  chainId: Network;\n  blockHeight?: () => Promise<number | undefined>;\n  query?: GraphQLQuery;\n}\n\ninterface SubgraphSubPoolToken extends SubgraphSubPoolTokenFragment {\n  token?: SubgraphSubPoolMeta | null;\n}\n\ninterface SubgraphSubPoolMeta {\n  latestUSDPrice?: string | null;\n  pool?: SubgraphSubPool | null;\n}\n\ninterface SubgraphSubPool extends SubgraphSubPoolFragment {\n  tokens: SubgraphSubPoolToken[];\n}\n\n/**\n * Access pools using generated subgraph client.\n *\n * Balancer's subgraph URL: https://thegraph.com/hosted-service/subgraph/balancer-labs/balancer-v2\n */\nexport class PoolsSubgraphRepository\n  implements Findable<Pool, PoolAttribute>, Searchable<Pool>\n{\n  private client: SubgraphClient;\n  private chainId: Network;\n  private pools?: Promise<Pool[]>;\n  public skip = 0;\n  private blockHeight: undefined | (() => Promise<number | undefined>);\n  private query: GraphQLQuery;\n\n  /**\n   * Repository with optional lazy loaded blockHeight\n   *\n   * @param url subgraph URL\n   * @param chainId current network, needed for L2s logic\n   * @param blockHeight lazy loading blockHeigh resolver\n   */\n  constructor(options: PoolsSubgraphRepositoryOptions) {\n    this.client = createSubgraphClient(options.url);\n    this.blockHeight = options.blockHeight;\n    this.chainId = options.chainId;\n\n    const defaultArgs: GraphQLArgs = {\n      orderBy: Pool_OrderBy.TotalLiquidity,\n      orderDirection: OrderDirection.Desc,\n      where: {\n        swapEnabled: {\n          eq: true,\n        },\n        totalShares: {\n          gt: 0.000000000001,\n        },\n      },\n    };\n\n    const args = Object.assign({}, options.query?.args || defaultArgs);\n    const attrs = Object.assign({}, options.query?.attrs || {});\n\n    this.query = {\n      args,\n      attrs,\n    };\n  }\n\n  /**\n   * We need a list of all the pools, for calculating APRs (nested pools), and for SOR (path finding).\n   * All the pools are fetched on page load and cachced for speedy lookups.\n   *\n   * @returns Promise resolving to pools list\n   */\n  private async fetchDefault(): Promise<Pool[]> {\n    console.time('fetching pools');\n    const { pool0, pool1000, pool2000 } = await this.client.AllPools({\n      where: { swapEnabled: true, totalShares_gt: '0.000000000001' },\n      orderBy: Pool_OrderBy.TotalLiquidity,\n      orderDirection: OrderDirection.Desc,\n      block: await this.block(),\n    });\n    console.timeEnd('fetching pools');\n\n    return [...pool0, ...pool1000, ...pool2000].map(this.mapType.bind(this));\n  }\n\n  async fetch(options?: PoolsRepositoryFetchOptions): Promise<Pool[]> {\n    if (options?.skip) {\n      this.query.args.skip = options.skip;\n    }\n    if (this.blockHeight) {\n      this.query.args.block = { number: await this.blockHeight() };\n    }\n\n    this.query.args.first = options?.first || 1000;\n\n    const formattedQuery = new GraphQLArgsBuilder(this.query.args).format(\n      new SubgraphArgsFormatter()\n    ) as PoolsQueryVariables;\n\n    const { pools } = await this.client.Pools(formattedQuery);\n\n    this.skip = (options?.skip || 0) + pools.length;\n\n    return pools.map(this.mapType.bind(this));\n  }\n\n  async find(id: string): Promise<Pool | undefined> {\n    return await this.findBy('id', id);\n  }\n\n  async findBy(param: PoolAttribute, value: string): Promise<Pool | undefined> {\n    if (!this.pools) {\n      this.pools = this.fetchDefault();\n    }\n\n    return (await this.pools).find((pool) => pool[param] == value);\n\n    // TODO: @Nma - Fetching pools outside of default query is causing a lot of requests\n    // on a frontend, because results aren't cached anywhere.\n    // For fetching pools directly from subgraph with custom queries please use the client not this repository.\n    // Code below kept for reference, to be removed later.\n    //\n    // if (this.pools) {\n    //   return (await this.pools).find((p) => p[param] === value);\n    // }\n    // const { pools } = await this.client.Pools({\n    //   where: {\n    //     [param]: value,\n    //     swapEnabled: true,\n    //     totalShares_gt: '0.000000000001',\n    //   },\n    //   block: await this.block(),\n    // });\n    // const poolsTab: Pool[] = pools.map(this.mapType.bind(this));\n    // return poolsTab.length > 0 ? poolsTab[0] : undefined;\n  }\n\n  async all(): Promise<Pool[]> {\n    if (!this.pools) {\n      this.pools = this.fetchDefault();\n    }\n    return this.pools;\n  }\n\n  async block(): Promise<{ number: number | undefined } | undefined> {\n    return this.blockHeight ? { number: await this.blockHeight() } : undefined;\n  }\n\n  async where(filter: (pool: Pool) => boolean): Promise<Pool[]> {\n    if (!this.pools) {\n      this.pools = this.fetchDefault();\n    }\n\n    return (await this.pools).filter(filter);\n  }\n\n  private mapType(subgraphPool: SubgraphPool): Pool {\n    return {\n      id: subgraphPool.id,\n      name: subgraphPool.name || '',\n      address: subgraphPool.address,\n      chainId: this.chainId,\n      poolType: subgraphPool.poolType as PoolType,\n      poolTypeVersion: subgraphPool.poolTypeVersion || 1,\n      swapFee: subgraphPool.swapFee,\n      swapEnabled: subgraphPool.swapEnabled,\n      protocolYieldFeeCache: subgraphPool.protocolYieldFeeCache || '0',\n      protocolSwapFeeCache: subgraphPool.protocolSwapFeeCache || '0',\n      amp: subgraphPool.amp ?? undefined,\n      owner: subgraphPool.owner ?? undefined,\n      factory: subgraphPool.factory ?? undefined,\n      symbol: subgraphPool.symbol ?? undefined,\n      tokens: (subgraphPool.tokens || []).map(this.mapToken.bind(this)),\n      tokensList: subgraphPool.tokensList,\n      tokenAddresses: (subgraphPool.tokens || []).map((t) => t.address),\n      totalLiquidity: subgraphPool.totalLiquidity,\n      totalShares: subgraphPool.totalShares,\n      totalSwapFee: subgraphPool.totalSwapFee,\n      totalSwapVolume: subgraphPool.totalSwapVolume,\n      priceRateProviders: subgraphPool.priceRateProviders ?? undefined,\n      // onchain: subgraphPool.onchain,\n      createTime: subgraphPool.createTime,\n      mainIndex: subgraphPool.mainIndex ?? undefined,\n      wrappedIndex: subgraphPool.wrappedIndex ?? undefined,\n      // mainTokens: subgraphPool.mainTokens,\n      // wrappedTokens: subgraphPool.wrappedTokens,\n      // unwrappedTokens: subgraphPool.unwrappedTokens,\n      // isNew: subgraphPool.isNew,\n      // volumeSnapshot: subgraphPool.volumeSnapshot,\n      // feesSnapshot: subgraphPool.???, // Approximated last 24h fees\n      // boost: subgraphPool.boost,\n      totalWeight: subgraphPool.totalWeight || '1',\n      lowerTarget: subgraphPool.lowerTarget ?? '0',\n      upperTarget: subgraphPool.upperTarget ?? '0',\n    };\n  }\n\n  private mapToken(subgraphToken: SubgraphPoolTokenFragment): PoolToken {\n    const subPoolInfo = this.mapSubPools(\n      // need to typecast as the fragment is 3 layers deep while the type is infinite levels deep\n      subgraphToken.token as SubgraphSubPoolMeta\n    );\n    return {\n      ...subgraphToken,\n      isExemptFromYieldProtocolFee:\n        subgraphToken.isExemptFromYieldProtocolFee || false,\n      token: subPoolInfo,\n    };\n  }\n\n  private mapSubPools(metadata: SubgraphSubPoolMeta): SubPoolMeta {\n    let subPool: SubPool | null = null;\n    if (metadata.pool) {\n      subPool = {\n        id: metadata.pool.id,\n        address: metadata.pool.address,\n        totalShares: metadata.pool.totalShares,\n        poolType: metadata.pool.poolType as PoolType,\n        mainIndex: metadata.pool.mainIndex || 0,\n      };\n\n      if (metadata?.pool.tokens) {\n        subPool.tokens = metadata.pool.tokens.map(\n          this.mapSubPoolToken.bind(this)\n        );\n      }\n    }\n\n    return {\n      pool: subPool,\n      latestUSDPrice: metadata.latestUSDPrice || undefined,\n    };\n  }\n\n  private mapSubPoolToken(token: SubgraphSubPoolToken) {\n    return {\n      address: token.address,\n      decimals: token.decimals,\n      symbol: token.symbol,\n      balance: token.balance,\n      priceRate: token.priceRate,\n      weight: token.weight,\n      isExemptFromYieldProtocolFee:\n        token.isExemptFromYieldProtocolFee || undefined,\n      token: token.token ? this.mapSubPools(token.token) : undefined,\n    };\n  }\n}\n","import { Findable, Searchable } from '../types';\nimport { Provider } from '@ethersproject/providers';\nimport { PoolAttribute, PoolsRepositoryFetchOptions } from './types';\nimport { GraphQLQuery, Pool } from '@/types';\nimport { Network } from '@/lib/constants/network';\nimport { getOnChainBalances } from '../../../modules/sor/pool-data/onChainData';\nimport { PoolsSubgraphRepository } from './subgraph';\n\ninterface PoolsSubgraphOnChainRepositoryOptions {\n  url: string;\n  chainId: Network;\n  provider: Provider;\n  multicall: string;\n  vault: string;\n  blockHeight?: () => Promise<number | undefined>;\n  query?: GraphQLQuery;\n}\n\n/**\n * Access pools using generated subgraph client and multicall.\n */\nexport class PoolsSubgraphOnChainRepository\n  implements Findable<Pool, PoolAttribute>, Searchable<Pool>\n{\n  private poolsSubgraph: PoolsSubgraphRepository;\n  private provider: Provider;\n  private pools?: Promise<Pool[]>;\n  private multicall: string;\n  private vault: string;\n  public skip = 0;\n\n  /**\n   * Repository using multicall to get onchain data.\n   *\n   * @param url subgraph URL\n   * @param chainId current network, needed for L2s logic\n   * @param blockHeight lazy loading blockHeigh resolver\n   * @param multicall multicall address\n   * @param valt vault address\n   */\n  constructor(options: PoolsSubgraphOnChainRepositoryOptions) {\n    this.poolsSubgraph = new PoolsSubgraphRepository({\n      url: options.url,\n      chainId: options.chainId,\n      blockHeight: options.blockHeight,\n      query: options.query,\n    });\n    this.provider = options.provider;\n    this.multicall = options.multicall;\n    this.vault = options.vault;\n  }\n\n  /**\n   * We need a list of all the pools, for calculating APRs (nested pools), and for SOR (path finding).\n   * All the pools are fetched on page load and cachced for speedy lookups.\n   *\n   * @returns Promise resolving to pools list\n   */\n  private async fetchDefault(): Promise<Pool[]> {\n    console.time('fetching pools SG');\n    const pools = await this.poolsSubgraph.fetch();\n    console.timeEnd('fetching pools SG');\n    console.time('fetching pools onchain');\n    const onchainPools = await getOnChainBalances(\n      pools,\n      this.multicall,\n      this.vault,\n      this.provider\n    );\n    console.timeEnd('fetching pools onchain');\n\n    return onchainPools;\n  }\n\n  async fetch(options?: PoolsRepositoryFetchOptions): Promise<Pool[]> {\n    const pools = await this.poolsSubgraph.fetch(options);\n    const onchainPools = await getOnChainBalances(\n      pools,\n      this.multicall,\n      this.vault,\n      this.provider\n    );\n    return onchainPools;\n  }\n\n  async find(id: string): Promise<Pool | undefined> {\n    return await this.findBy('id', id);\n  }\n\n  async findBy(param: PoolAttribute, value: string): Promise<Pool | undefined> {\n    if (!this.pools) {\n      this.pools = this.fetchDefault();\n    }\n\n    return (await this.pools).find((pool) => pool[param] == value);\n  }\n\n  async all(): Promise<Pool[]> {\n    if (!this.pools) {\n      this.pools = this.fetchDefault();\n    }\n    return this.pools;\n  }\n\n  async where(filter: (pool: Pool) => boolean): Promise<Pool[]> {\n    if (!this.pools) {\n      this.pools = this.fetchDefault();\n    }\n\n    return (await this.pools).filter(filter);\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { GaugesSubgraphRepository } from '@/modules/subgraph/repository';\nimport { PoolGauges, PoolGaugesAttributes } from './types';\n\nexport class PoolGaugesRepository extends GaugesSubgraphRepository<\n  PoolGauges,\n  PoolGaugesAttributes\n> {\n  async query(args: any): Promise<PoolGauges[]> {\n    if (!args.block && this.blockHeight)\n      args.block = { number: await this.blockHeight() };\n\n    const { pools } = await this.client.PoolGauges(args);\n    return pools.map(this.mapType);\n  }\n\n  mapType(fragment: any): PoolGauges {\n    return fragment as PoolGauges;\n  }\n}\n","export enum PoolJoinExitAttributes {\n  Pool = 'pool',\n  Sender = 'sender',\n}\n\nexport interface PoolJoinExit {\n  id: string;\n  userAddress: string;\n  poolId: string;\n  timestamp: number;\n  type: string;\n  amounts: string[];\n  tokens: string[];\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { PoolJoinExit, PoolJoinExitAttributes } from './types';\nimport { BalancerSubgraphRepository } from '@/modules/subgraph/repository';\nimport {\n  JoinExit_OrderBy,\n  OrderDirection,\n  SubgraphJoinExitFragment,\n} from '@/modules/subgraph/generated/balancer-subgraph-types';\n\nexport class PoolJoinExitRepository extends BalancerSubgraphRepository<\n  PoolJoinExit,\n  PoolJoinExitAttributes\n> {\n  async query(args: any): Promise<PoolJoinExit[]> {\n    if (!args.orderBy) args.orderBy = JoinExit_OrderBy.Timestamp;\n    if (!args.orderDirection) args.orderDirection = OrderDirection.Asc;\n    if (!args.block && this.blockHeight)\n      args.block = { number: await this.blockHeight() };\n\n    const { joinExits } = await this.client.JoinExits(args);\n    return joinExits.map(this.mapType);\n  }\n\n  mapType(item: SubgraphJoinExitFragment): PoolJoinExit {\n    return {\n      id: item.id,\n      userAddress: item.user.id,\n      poolId: item.pool.id,\n      timestamp: item.timestamp,\n      type: item.type,\n      amounts: item.amounts,\n      tokens: item.pool.tokensList,\n    };\n  }\n\n  async findByUser(\n    sender: string,\n    first?: number,\n    skip?: number\n  ): Promise<PoolJoinExit[]> {\n    return this.findAllBy(PoolJoinExitAttributes.Sender, sender, first, skip);\n  }\n\n  async findJoins(sender: string, pool: string): Promise<PoolJoinExit[]> {\n    return this.query({ where: { sender, pool, type: 'Join' } });\n  }\n\n  async findExits(sender: string, pool: string): Promise<PoolJoinExit[]> {\n    return this.query({ where: { sender, pool, type: 'Exit' } });\n  }\n\n  async findByPool(\n    poolId: string,\n    first?: number,\n    skip?: number\n  ): Promise<PoolJoinExit[]> {\n    return this.findAllBy(PoolJoinExitAttributes.Pool, poolId, first, skip);\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any */\nimport { PoolShare, PoolShareAttributes } from './types';\nimport { BalancerSubgraphRepository } from '@/modules/subgraph/repository';\nimport {\n  SubgraphPoolShareFragment,\n  PoolShare_OrderBy,\n  OrderDirection,\n} from '@/modules/subgraph/generated/balancer-subgraph-types';\n\nexport class PoolSharesRepository extends BalancerSubgraphRepository<\n  PoolShare,\n  PoolShareAttributes\n> {\n  async query(args: any): Promise<PoolShare[]> {\n    if (!args.orderBy) args.orderBy = PoolShare_OrderBy.Balance;\n    if (!args.orderDirection) args.orderDirection = OrderDirection.Desc;\n    if (!args.block && this.blockHeight)\n      args.block = { number: await this.blockHeight() };\n\n    const { poolShares } = await this.client.PoolShares(args);\n    return poolShares.map(this.mapType);\n  }\n\n  mapType(subgraphPoolShare: SubgraphPoolShareFragment): PoolShare {\n    return {\n      id: subgraphPoolShare.id,\n      userAddress: subgraphPoolShare.userAddress.id,\n      poolId: subgraphPoolShare.poolId.id,\n      balance: subgraphPoolShare.balance,\n    };\n  }\n\n  async findByUser(\n    userAddress: string,\n    first?: number,\n    skip?: number\n  ): Promise<PoolShare[]> {\n    return this.findAllBy(\n      PoolShareAttributes.UserAddress,\n      userAddress,\n      first,\n      skip\n    );\n  }\n\n  async findByPool(\n    poolId: string,\n    first?: number,\n    skip?: number\n  ): Promise<PoolShare[]> {\n    return this.findAllBy(PoolShareAttributes.PoolId, poolId, first, skip);\n  }\n}\n","import type { Findable, Token } from '@/types';\nimport type { TokenAttribute } from './types';\n\nexport class StaticTokenProvider implements Findable<Token, TokenAttribute> {\n  constructor(private tokens: Token[]) {}\n\n  async find(address: string): Promise<Token | undefined> {\n    return this.tokens.find((token) => {\n      return token.address.toLowerCase() === address.toLowerCase();\n    });\n  }\n\n  async findBy(\n    attribute: TokenAttribute,\n    value: string\n  ): Promise<Token | undefined> {\n    return this.tokens.find((token) => {\n      return token[attribute] === value;\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { Price, Findable, TokenPrices, Network } from '@/types';\nimport axios from 'axios';\nimport { TOKENS } from '@/lib/constants/tokens';\nimport { Debouncer, tokenAddressForPricing } from '@/lib/utils';\n\n/**\n * Simple coingecko price source implementation. Configurable by network and token addresses.\n */\nexport class CoingeckoPriceRepository implements Findable<Price> {\n  prices: { [key: string]: Promise<Price> } = {};\n  nativePrice?: Promise<Price>;\n  urlBase: string;\n  baseTokenAddresses: string[];\n  debouncer: Debouncer<TokenPrices, string>;\n\n  constructor(tokenAddresses: string[], private chainId: Network = 1) {\n    this.baseTokenAddresses = tokenAddresses.map(tokenAddressForPricing);\n    this.urlBase = `https://api.coingecko.com/api/v3/simple/token_price/${this.platform(\n      chainId\n    )}?vs_currencies=usd,eth`;\n    this.debouncer = new Debouncer<TokenPrices, string>(\n      this.fetch.bind(this),\n      200\n    );\n  }\n\n  private fetch(\n    addresses: string[],\n    { signal }: { signal?: AbortSignal } = {}\n  ): Promise<TokenPrices> {\n    console.time(`fetching coingecko for ${addresses.length} tokens`);\n    return axios\n      .get<TokenPrices>(this.url(addresses), { signal })\n      .then(({ data }) => {\n        return data;\n      })\n      .finally(() => {\n        console.timeEnd(`fetching coingecko for ${addresses.length} tokens`);\n      });\n  }\n\n  private fetchNative({\n    signal,\n  }: { signal?: AbortSignal } = {}): Promise<Price> {\n    console.time(`fetching coingecko for native token`);\n    enum Assets {\n      ETH = 'ethereum',\n      MATIC = 'matic-network',\n      XDAI = 'xdai',\n    }\n    let assetId: Assets = Assets.ETH;\n    if (this.chainId === 137) assetId = Assets.MATIC;\n    if (this.chainId === 100) assetId = Assets.XDAI;\n    return axios\n      .get<{ [key in Assets]: Price }>(\n        `https://api.coingecko.com/api/v3/simple/price/?vs_currencies=eth,usd&ids=${assetId}`,\n        { signal }\n      )\n      .then(({ data }) => {\n        return data[assetId];\n      })\n      .finally(() => {\n        console.timeEnd(`fetching coingecko for native token`);\n      });\n  }\n\n  find(inputAddress: string): Promise<Price | undefined> {\n    const address = tokenAddressForPricing(inputAddress, this.chainId);\n    if (!this.prices[address]) {\n      // Make initial call with all the tokens we want to preload\n      if (Object.keys(this.prices).length === 0) {\n        for (const baseAddress of this.baseTokenAddresses) {\n          this.prices[baseAddress] = this.debouncer\n            .fetch(baseAddress)\n            .then((prices) => prices[baseAddress]);\n        }\n      }\n\n      // Handle native asset special case\n      if (\n        address === TOKENS(this.chainId).Addresses.nativeAsset.toLowerCase()\n      ) {\n        if (!this.nativePrice) {\n          this.prices[address] = this.fetchNative();\n        }\n\n        return this.prices[address];\n      }\n\n      this.prices[address] = this.debouncer\n        .fetch(address)\n        .then((prices) => prices[address]);\n    }\n\n    return this.prices[address];\n  }\n\n  async findBy(attribute: string, value: string): Promise<Price | undefined> {\n    if (attribute != 'address') {\n      return undefined;\n    }\n\n    return this.find(value);\n  }\n\n  private platform(chainId: number): string {\n    switch (chainId) {\n      case 1:\n      case 5:\n      case 42:\n      case 31337:\n      case 16116:\n        return 'ethereum';\n      case 100:\n        return 'xdai';\n      case 137:\n        return 'polygon-pos';\n      case 42161:\n        return 'arbitrum-one';\n    }\n\n    return '3';\n  }\n\n  private url(addresses: string[]): string {\n    return `${this.urlBase}&contract_addresses=${addresses.join(',')}`;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport {\n  Price,\n  Findable,\n  TokenPrices,\n  Network,\n  HistoricalPrices,\n} from '@/types';\nimport axios from 'axios';\nimport { tokenAddressForPricing } from '@/lib/utils';\n\nconst HOUR = 60 * 60;\n\n/**\n * Simple coingecko price source implementation. Configurable by network and token addresses.\n */\nexport class CoingeckoHistoricalPriceRepository implements Findable<Price> {\n  prices: TokenPrices = {};\n  nativePrice?: Promise<Price>;\n  urlBase: string;\n\n  constructor(private chainId: Network = 1) {\n    this.urlBase = `https://api.coingecko.com/api/v3/coins/${this.platform(\n      chainId\n    )}/contract/%TOKEN_ADDRESS%/market_chart/range?vs_currency=usd`;\n  }\n\n  private fetch(\n    address: string,\n    timestamp: number,\n    { signal }: { signal?: AbortSignal } = {}\n  ): Promise<HistoricalPrices> {\n    console.time(`fetching coingecko historical for ${address}`);\n    const url = this.urlRange(address, timestamp);\n    return axios\n      .get<HistoricalPrices>(url, { signal })\n      .then(({ data }) => {\n        return data;\n      })\n      .finally(() => {\n        console.timeEnd(`fetching coingecko historical for ${address}`);\n      });\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  async find(address: string): Promise<Price | undefined> {\n    throw `Historic price requires point-in-time timestamp, please use findBy(address, timestamp)`;\n  }\n\n  async findBy(\n    inputAddress: string,\n    timestamp: number\n  ): Promise<Price | undefined> {\n    const address = tokenAddressForPricing(inputAddress, this.chainId);\n    const response = await this.fetch(address, timestamp);\n\n    return {\n      usd: `${response.prices[0][1]}`,\n    };\n  }\n\n  private platform(chainId: number): string {\n    switch (chainId) {\n      case 1:\n      case 5:\n      case 42:\n      case 31337:\n      case 16116:\n        return 'ethereum';\n      case 137:\n        return 'polygon-pos';\n      case 42161:\n        return 'arbitrum-one';\n      case 100:\n        return 'xdai';\n    }\n\n    return '2';\n  }\n\n  private urlRange(address: string, timestamp: number): string {\n    const range: { from: number; to: number } = {\n      from: timestamp - HOUR,\n      to: timestamp + HOUR,\n    };\n    return `${this.urlBase.replace('%TOKEN_ADDRESS%', address)}&from=${\n      range.from\n    }&to=${range.to}`;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { Price, Findable, TokenPrices, Network } from '@/types';\nimport axios from 'axios';\nimport { Debouncer, tokenAddressForPricing } from '@/lib/utils';\n\ninterface SubgraphPricesResponse {\n  data: {\n    tokens: [\n      {\n        address: string;\n        latestUSDPrice?: string;\n      }\n    ];\n  };\n}\n\nexport class SubgraphPriceRepository implements Findable<Price> {\n  prices: { [key: string]: Promise<Price> } = {};\n  debouncer: Debouncer<TokenPrices, string>;\n\n  constructor(private subgraphUrl: string, private chainId: Network = 1) {\n    this.debouncer = new Debouncer<TokenPrices, string>(\n      this.fetch.bind(this),\n      200\n    );\n  }\n\n  private async fetch(\n    addresses: string[],\n    { signal }: { signal?: AbortSignal } = {}\n  ): Promise<TokenPrices> {\n    console.time(`fetching subgraph prices for ${addresses.length} tokens`);\n    return axios\n      .post<SubgraphPricesResponse>(\n        this.subgraphUrl,\n        {\n          variables: { addresses },\n          query: `query($addresses: [String!]) {\n            tokens(\n              where: {\n                id_in: $addresses\n              }\n            ) {\n              address\n              latestUSDPrice\n            }\n          }`,\n        },\n        { signal }\n      )\n      .then((response) => response.data.data)\n      .then(({ tokens }) =>\n        Object.fromEntries(\n          tokens.map((token) => [\n            token.address,\n            { usd: token.latestUSDPrice || undefined },\n          ])\n        )\n      )\n      .finally(() => {\n        console.timeEnd(\n          `fetching subgraph prices for ${addresses.length} tokens`\n        );\n      });\n  }\n\n  async find(inputAddress: string): Promise<Price | undefined> {\n    const address = tokenAddressForPricing(inputAddress, this.chainId);\n    if (!this.prices[address]) {\n      this.prices[address] = this.debouncer\n        .fetch(address)\n        .then((prices) => prices[address]);\n    }\n\n    return this.prices[address];\n  }\n\n  async findBy(attribute: string, value: string): Promise<Price | undefined> {\n    if (attribute != 'address') {\n      return undefined;\n    }\n\n    return this.find(value);\n  }\n}\n","import type { Findable, Price } from '@/types';\nimport { IAaveRates } from './aave-rates';\n\nexport class TokenPriceProvider implements Findable<Price> {\n  constructor(\n    private coingeckoRepository: Findable<Price>,\n    private subgraphRepository: Findable<Price>,\n    private aaveRates: IAaveRates\n  ) {}\n\n  async find(address: string): Promise<Price | undefined> {\n    let price;\n    try {\n      try {\n        price = await this.coingeckoRepository.find(address);\n        if (!price?.usd) {\n          throw new Error('Price not found');\n        }\n      } catch (err) {\n        console.error(`Coingecko API error: ${err}`);\n        price = await this.subgraphRepository.find(address);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    const rate = (await this.aaveRates.getRate(address)) || 1;\n    if (price && price.usd) {\n      return {\n        ...price,\n        usd: (parseFloat(price.usd) * rate).toString(),\n      };\n    } else {\n      return price;\n    }\n  }\n\n  async findBy(attribute: string, value: string): Promise<Price | undefined> {\n    if (attribute === 'address') {\n      return this.find(value);\n    }\n    throw `Token price search by ${attribute} not implemented`;\n  }\n}\n","import type { Findable, Price } from '@/types';\nimport { IAaveRates } from './aave-rates';\n\nexport class HistoricalPriceProvider implements Findable<Price> {\n  constructor(\n    private coingeckoRepository: Findable<Price>,\n    private aaveRates: IAaveRates\n  ) {}\n\n  /**\n   * get the historical price at time of call\n   *\n   * @param address the token address\n   */\n  async find(address: string): Promise<Price | undefined> {\n    return this.findBy(address, Math.floor(Date.now() / 1000));\n  }\n\n  /**\n   * get the historical price at the given timestamp.\n   *\n   * @param address the token address\n   * @param timestamp the UNIX timestamp\n   * @private\n   */\n  async findBy(address: string, timestamp: number): Promise<Price | undefined> {\n    const price = await this.coingeckoRepository.findBy(address, timestamp);\n    const rate = (await this.aaveRates.getRate(address)) || 1;\n    if (price && price.usd) {\n      return {\n        ...price,\n        usd: (parseFloat(price.usd) * rate).toString(),\n      };\n    } else {\n      return price;\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport { Contract } from '@ethersproject/contracts';\nimport { Provider } from '@ethersproject/providers';\nimport { formatUnits } from '@ethersproject/units';\nimport { Multicall } from '@/modules/contracts/implementations/multicall';\nimport { yieldTokens } from '../token-yields/tokens/aave';\nimport { Network } from '@/types';\n\nconst wrappedATokenInterface = new Interface([\n  'function rate() view returns (uint256)',\n]);\n\nexport interface IAaveRates {\n  getRate: (address: string) => Promise<number>;\n}\n\nexport class AaveRates implements IAaveRates {\n  multicall: Contract;\n  rates?: Promise<{ [wrappedATokenAddress: string]: number }>;\n\n  constructor(\n    multicallAddress: string,\n    provider: Provider,\n    private network: Network\n  ) {\n    this.multicall = Multicall(multicallAddress, provider);\n  }\n\n  private async fetch(\n    network: Network.MAINNET | Network.POLYGON\n  ): Promise<{ [wrappedATokenAddress: string]: number }> {\n    console.time('Fetching aave rates');\n    const addresses = Object.values(yieldTokens[network]);\n    const payload = addresses.map((wrappedATokenAddress) => [\n      wrappedATokenAddress,\n      wrappedATokenInterface.encodeFunctionData('rate', []),\n    ]);\n    const [, res] = await this.multicall.aggregate(payload);\n\n    const rates = addresses.reduce((p: { [key: string]: number }, a, i) => {\n      p[a] ||= res[i] == '0x' ? 0 : parseFloat(formatUnits(res[i], 27));\n      return p;\n    }, {});\n    console.timeEnd('Fetching aave rates');\n\n    return rates;\n  }\n\n  async getRate(wrappedAToken: string): Promise<number> {\n    if (this.network != Network.MAINNET && this.network != Network.POLYGON) {\n      return 1;\n    }\n    if (!Object.values(yieldTokens[this.network]).includes(wrappedAToken)) {\n      return 1;\n    }\n    if (!this.rates) {\n      this.rates = this.fetch(this.network);\n    }\n\n    return (await this.rates)[wrappedAToken];\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport { Provider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\nimport { getAddress } from '@ethersproject/address';\nimport { formatUnits } from '@ethersproject/units';\nimport { Multicall } from '@/modules/contracts/implementations/multicall';\n\nexport interface FeeDistributorData {\n  balAmount: number;\n  bbAUsdAmount: number;\n  veBalSupply: number;\n  bbAUsdPrice: number;\n  balAddress: string;\n}\n\nexport interface BaseFeeDistributor {\n  multicallData: (ts: number) => Promise<FeeDistributorData>;\n}\n\nconst feeDistributorInterface = new Interface([\n  'function getTokensDistributedInWeek(address token, uint timestamp) view returns (uint)',\n]);\n\nconst veBalInterface = new Interface([\n  'function totalSupply() view returns (uint)',\n]);\n\nconst bbAUsdInterface = new Interface([\n  'function getRate() view returns (uint)',\n]);\n\nexport class FeeDistributorRepository implements BaseFeeDistributor {\n  multicall: Contract;\n  data?: FeeDistributorData;\n\n  constructor(\n    multicallAddress: string,\n    private feeDistributorAddress: string,\n    private balAddress: string,\n    private veBalAddress: string,\n    private bbAUsdAddress: string,\n    provider: Provider\n  ) {\n    this.multicall = Multicall(multicallAddress, provider);\n  }\n\n  async fetch(timestamp: number): Promise<FeeDistributorData> {\n    const previousWeek = this.getPreviousWeek(timestamp);\n    const payload = [\n      [\n        this.feeDistributorAddress,\n        feeDistributorInterface.encodeFunctionData(\n          'getTokensDistributedInWeek',\n          [getAddress(this.balAddress), previousWeek]\n        ),\n      ],\n      [\n        this.feeDistributorAddress,\n        feeDistributorInterface.encodeFunctionData(\n          'getTokensDistributedInWeek',\n          [getAddress(this.bbAUsdAddress), previousWeek]\n        ),\n      ],\n      [this.veBalAddress, veBalInterface.encodeFunctionData('totalSupply', [])],\n      [this.bbAUsdAddress, bbAUsdInterface.encodeFunctionData('getRate', [])],\n    ];\n    const [, res] = await this.multicall.aggregate(payload);\n\n    const data = {\n      balAmount: parseFloat(formatUnits(res[0], 18)),\n      bbAUsdAmount: parseFloat(formatUnits(res[1], 18)),\n      veBalSupply: parseFloat(formatUnits(res[2], 18)),\n      bbAUsdPrice: parseFloat(formatUnits(res[3], 18)),\n      balAddress: this.balAddress,\n    };\n\n    return data;\n  }\n\n  async multicallData(timestamp: number): Promise<FeeDistributorData> {\n    if (!this.data) {\n      this.data = await this.fetch(timestamp);\n    }\n\n    return this.data;\n  }\n\n  getPreviousWeek(fromTimestamp: number): number {\n    const weeksToGoBack = 1;\n    const midnight = new Date(fromTimestamp);\n    midnight.setUTCHours(0);\n    midnight.setUTCMinutes(0);\n    midnight.setUTCSeconds(0);\n    midnight.setUTCMilliseconds(0);\n\n    let daysSinceThursday = midnight.getUTCDay() - 4;\n    if (daysSinceThursday < 0) daysSinceThursday += 7;\n\n    daysSinceThursday = daysSinceThursday + weeksToGoBack * 7;\n\n    return Math.floor(midnight.getTime() / 1000) - daysSinceThursday * 86400;\n  }\n}\n","import { Interface } from '@ethersproject/abi';\nimport { Provider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\nimport { formatUnits } from '@ethersproject/units';\nimport { Findable } from '../types';\n\nconst vaultInterface = new Interface([\n  'function getProtocolFeesCollector() view returns (address)',\n]);\n\nconst protocolFeesCollectorInterface = new Interface([\n  'function getSwapFeePercentage() view returns (uint)',\n]);\n\n// Using singleton here, so subsequent calls will return the same promise\nlet swapFeePercentagePromise: Promise<number>;\n\nexport class FeeCollectorRepository implements Findable<number> {\n  vault: Contract;\n  swapFeePercentage?: number;\n\n  constructor(vaultAddress: string, private provider: Provider) {\n    this.vault = new Contract(vaultAddress, vaultInterface, this.provider);\n  }\n\n  async fetch(): Promise<number> {\n    const address = (await this.vault.getProtocolFeesCollector()) as string;\n\n    const collector = new Contract(\n      address,\n      protocolFeesCollectorInterface,\n      this.provider\n    );\n    const fees = (await collector.getSwapFeePercentage()) as string;\n\n    return parseFloat(formatUnits(fees, 18));\n  }\n\n  async find(): Promise<number> {\n    if (!swapFeePercentagePromise) {\n      swapFeePercentagePromise = this.fetch();\n    }\n    this.swapFeePercentage = await swapFeePercentagePromise;\n\n    return this.swapFeePercentage;\n  }\n\n  async findBy(): Promise<number> {\n    return this.find();\n  }\n}\n","// 0x97207B095e4D5C9a6e4cfbfcd2C3358E03B90c4A\n\nimport { Interface } from '@ethersproject/abi';\nimport { Provider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\nimport { formatUnits } from '@ethersproject/units';\nimport { Multicall } from '@/modules/contracts/implementations/multicall';\n\nconst iProtocolFeePercentagesProvider = new Interface([\n  'function getSwapFeePercentage() view returns (uint)',\n]);\n\nexport interface ProtocolFees {\n  swapFee: number;\n  yieldFee: number;\n}\n\n// Using singleton here, so subsequent calls will return the same promise\nlet feesPromise: Promise<ProtocolFees>;\n\nexport class ProtocolFeesProvider {\n  multicall: Contract;\n  protocolFees?: ProtocolFees;\n\n  constructor(\n    multicallAddress: string,\n    private protocolFeePercentagesProviderAddress: string,\n    provider: Provider\n  ) {\n    this.multicall = Multicall(multicallAddress, provider);\n  }\n\n  private async fetch(): Promise<ProtocolFees> {\n    const payload = [\n      [\n        this.protocolFeePercentagesProviderAddress,\n        iProtocolFeePercentagesProvider.encodeFunctionData(\n          'getFeeTypePercentage',\n          [0]\n        ),\n      ],\n      [\n        this.protocolFeePercentagesProviderAddress,\n        iProtocolFeePercentagesProvider.encodeFunctionData(\n          'getFeeTypePercentage',\n          [2]\n        ),\n      ],\n    ];\n    const [, res] = await this.multicall.aggregate(payload);\n\n    const fees = {\n      swapFee: parseFloat(formatUnits(res[0], 18)),\n      yieldFee: parseFloat(formatUnits(res[2], 18)),\n    };\n\n    return fees;\n  }\n\n  async getFees(): Promise<ProtocolFees> {\n    if (!feesPromise) {\n      feesPromise = this.fetch();\n    }\n    this.protocolFees = await feesPromise;\n\n    return this.protocolFees;\n  }\n}\n","import { AprFetcher } from '../repository';\nimport axios from 'axios';\n\nexport const yieldTokens = {\n  stETH: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n  wstETH: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n  arbitrumStEth: '0x5979d7b546e38e414f7e9822514be443a4800529',\n};\n\ninterface LidoAPIResponse {\n  data: {\n    smaApr: string;\n  };\n}\n\n/**\n * Lido APR fetching\n *\n * @returns lido APR for stETH\n */\nexport const lido: AprFetcher = async () => {\n  let apr = 0;\n\n  try {\n    const response = await axios.get(\n      'https://lido-aprs-proxy.balancer.workers.dev/?network=1'\n    );\n    const { data: aprs } = response.data as LidoAPIResponse;\n\n    apr = Math.round(parseFloat(aprs.smaApr) * 100);\n  } catch (error) {\n    console.error('Failed to fetch stETH APR:', error);\n  }\n\n  return {\n    [yieldTokens.stETH]: apr,\n    [yieldTokens.wstETH]: apr,\n    [yieldTokens.arbitrumStEth]: apr,\n  };\n};\n","import { AprFetcher } from '../repository';\nimport axios from 'axios';\n\nexport const yieldTokens = {\n  rETH: '0xae78736cd615f374d3085123a210448e74fc6393',\n};\n\ninterface RocketPoolAPIResponse {\n  yearlyAPR: string;\n}\n\n/**\n * APR fetching\n *\n * @returns APR in bsp\n */\nexport const rocketpool: AprFetcher = async () => {\n  let apr = 0;\n\n  try {\n    const response = await axios.get<RocketPoolAPIResponse>(\n      'https://api.rocketpool.net/api/apr'\n    );\n    const { yearlyAPR } = response.data;\n\n    apr = Math.round(parseFloat(yearlyAPR) * 100);\n  } catch (error) {\n    console.error('Failed to fetch APR:', error);\n  }\n\n  return {\n    [yieldTokens.rETH]: apr,\n  };\n};\n","import { AprFetcher } from '../repository';\nimport axios from 'axios';\n\nexport const yieldTokens = {\n  stMATIC: '0x3a58a54c066fdc0f2d55fc9c89f0415c92ebf3c4',\n};\n\ninterface LidoAPIResponse {\n  price: string;\n  apr: string;\n}\n\n/**\n * Lido APR fetching\n *\n * @returns lido APR for stMATIC\n */\nexport const lidoPolygon: AprFetcher = async () => {\n  let returnApr = 0;\n\n  try {\n    const response = await axios.get(\n      'https://lido-aprs-proxy.balancer.workers.dev/?network=137'\n    );\n    const { apr } = response.data as LidoAPIResponse;\n\n    returnApr = Math.round(parseFloat(apr) * 100);\n  } catch (error) {\n    console.error('Failed to fetch stMATIC APR:', error);\n  }\n\n  return {\n    [yieldTokens.stMATIC]: returnApr,\n  };\n};\n","import { AprFetcher } from '../repository';\nimport axios from 'axios';\n\nexport const yieldTokens = {\n  usdcUSDplus: '0x1aafc31091d93c3ff003cff5d2d8f7ba2e728425',\n  usdcUSDplus2: '0x6933ec1ca55c06a894107860c92acdfd2dd8512f',\n};\n\n/**\n * Overnight token APR fetching\n *\n * @returns cached APR for USD+\n */\nexport const overnight: AprFetcher = async () => {\n  let bsp = 0;\n  try {\n    const { data: rate } = await axios.get(\n      'https://app.overnight.fi/api/balancer/week/apr'\n    );\n    bsp = Math.round((parseFloat(rate) * 10000) / 100);\n  } catch (error) {\n    console.error('Failed to fetch USD+ APR:', error);\n  }\n\n  return Object.fromEntries(\n    Object.values(yieldTokens).map((address) => [address, bsp])\n  );\n};\n","import { AprFetcher } from '../repository';\nimport axios from 'axios';\n\nexport const yieldTokens = {\n  sfrxETH: '0xac3e018457b222d93114458476f3e3416abbe38f',\n};\n\ninterface FraxAPIResponse {\n  sfrxethApr: string;\n}\n\n/**\n * APR fetching\n *\n * @returns APR in bsp\n */\nexport const sfrxETH: AprFetcher = async () => {\n  let apr = 0;\n\n  try {\n    const response = await axios.get<FraxAPIResponse>(\n      'https://api.frax.finance/v2/frxeth/summary/latest'\n    );\n    const { sfrxethApr } = response.data;\n\n    apr = Math.round(parseFloat(sfrxethApr) * 100);\n  } catch (error) {\n    console.error('Failed to fetch APR:', error);\n  }\n\n  return {\n    [yieldTokens.sfrxETH]: apr,\n  };\n};\n","import { AprFetcher } from '../repository';\nimport axios from 'axios';\n\nexport const yieldTokens = {\n  maticX: '0xfa68fb4628dff1028cfec22b4162fccd0d45efb6',\n};\n\ninterface StaderLabsAPIResponse {\n  value: string;\n}\n\n/**\n * APR fetching\n *\n * @returns APR in bsp\n */\nexport const maticX: AprFetcher = async () => {\n  let apr = 0;\n\n  try {\n    const response = await axios.get<StaderLabsAPIResponse>(\n      'https://generic-apr-proxy.balancer.workers.dev/?provider=stader'\n    );\n    const { value } = response.data;\n\n    apr = Math.round(parseFloat(value) * 100);\n  } catch (error) {\n    console.error('Failed to fetch APR:', error);\n  }\n\n  return {\n    [yieldTokens.maticX]: apr,\n  };\n};\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { formatEther } from '@ethersproject/units';\nimport { AprFetcher } from '../repository';\nimport axios from 'axios';\n\nexport const yieldTokens = {\n  qETH: '0x93ef1ea305d11a9b2a3ebb9bb4fcc34695292e7d',\n};\n\ninterface TranchessAPIResponse {\n  weeklyAveragePnlPercentage: string;\n}\n\n/**\n * APR fetching\n *\n * @returns tokens yields\n */\nexport const tranchess: AprFetcher = async () => {\n  let apr = 0;\n\n  try {\n    const response = await axios.get(\n      'https://generic-apr-proxy.balancer.workers.dev/?provider=tranchess'\n    );\n\n    const [{ weeklyAveragePnlPercentage }] =\n      response.data as TranchessAPIResponse[];\n\n    apr = Math.round(\n      parseFloat(\n        formatEther(\n          //The key weeklyAveragePnlPercentage is the daily yield of qETH in 18 decimals, timing 365 should give you the APR.\n          BigNumber.from(weeklyAveragePnlPercentage).mul(365).mul(10000)\n        )\n      )\n    );\n  } catch (error) {\n    console.error('Failed to fetch qETH APR:', error);\n  }\n\n  return {\n    [yieldTokens.qETH]: apr,\n  };\n};\n","import { AprFetcher } from '../repository';\nimport axios from 'axios';\n\nexport const yieldTokens = {\n  USDR: '0xaf0d9d65fc54de245cda37af3d18cbec860a4d4b',\n};\n\ninterface USDRAPIResponse {\n  usdr: string;\n}\n\n/**\n * APR fetching\n *\n * @returns tokens yields\n */\nexport const usdr: AprFetcher = async () => {\n  let apr = 0;\n\n  try {\n    const response = await axios.get(\n      'https://generic-apr-proxy.balancer.workers.dev/?provider=usdr'\n    );\n\n    const { usdr } = response.data as USDRAPIResponse;\n\n    apr = Math.round(parseFloat(usdr) * 100);\n  } catch (error) {\n    console.error('Failed to fetch USDR APR:', error);\n  }\n\n  return {\n    [yieldTokens.USDR]: apr,\n  };\n};\n","import { AprFetcher } from '../repository';\nimport axios from 'axios';\n\nexport const yieldTokens = {\n  rETH: '0x9559aaa82d9649c7a7b220e7c461d2e74c9a3593',\n};\n\ninterface StafiAPIResponse {\n  data: {\n    stakeApr: string;\n  };\n}\n\n/**\n * APR fetching\n *\n * @returns APR in bsp\n */\nexport const stafi: AprFetcher = async () => {\n  let apr = 0;\n\n  try {\n    const response = await axios.get<StafiAPIResponse>(\n      'https://drop-api.stafi.io/reth/v1/poolData/'\n    );\n\n    const { stakeApr } = response.data.data;\n\n    apr = Math.round(parseFloat(stakeApr) * 100);\n  } catch (error) {\n    console.error('Failed to fetch APR:', error);\n  }\n\n  return {\n    [yieldTokens.rETH]: apr,\n  };\n};\n","import { AprFetcher } from '../repository';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\n\nconst poolAddress = '0x5954aB967Bc958940b7EB73ee84797Dc8a2AFbb9';\nconst poolAbi = [\n  {\n    inputs: [],\n    name: 'getPoolsUI',\n    outputs: [\n      {\n        components: [\n          { internalType: 'uint256', name: 'poolId', type: 'uint256' },\n          { internalType: 'uint256', name: 'stakedAmount', type: 'uint256' },\n          {\n            components: [\n              {\n                internalType: 'uint48',\n                name: 'startTimestampHour',\n                type: 'uint48',\n              },\n              {\n                internalType: 'uint48',\n                name: 'endTimestampHour',\n                type: 'uint48',\n              },\n              {\n                internalType: 'uint96',\n                name: 'rewardsPerHour',\n                type: 'uint96',\n              },\n              {\n                internalType: 'uint96',\n                name: 'capPerPosition',\n                type: 'uint96',\n              },\n            ],\n            internalType: 'struct ApeCoinStaking.TimeRange',\n            name: 'currentTimeRange',\n            type: 'tuple',\n          },\n        ],\n        internalType: 'struct ApeCoinStaking.PoolUI',\n        name: '',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { internalType: 'uint256', name: 'poolId', type: 'uint256' },\n          { internalType: 'uint256', name: 'stakedAmount', type: 'uint256' },\n          {\n            components: [\n              {\n                internalType: 'uint48',\n                name: 'startTimestampHour',\n                type: 'uint48',\n              },\n              {\n                internalType: 'uint48',\n                name: 'endTimestampHour',\n                type: 'uint48',\n              },\n              {\n                internalType: 'uint96',\n                name: 'rewardsPerHour',\n                type: 'uint96',\n              },\n              {\n                internalType: 'uint96',\n                name: 'capPerPosition',\n                type: 'uint96',\n              },\n            ],\n            internalType: 'struct ApeCoinStaking.TimeRange',\n            name: 'currentTimeRange',\n            type: 'tuple',\n          },\n        ],\n        internalType: 'struct ApeCoinStaking.PoolUI',\n        name: '',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { internalType: 'uint256', name: 'poolId', type: 'uint256' },\n          { internalType: 'uint256', name: 'stakedAmount', type: 'uint256' },\n          {\n            components: [\n              {\n                internalType: 'uint48',\n                name: 'startTimestampHour',\n                type: 'uint48',\n              },\n              {\n                internalType: 'uint48',\n                name: 'endTimestampHour',\n                type: 'uint48',\n              },\n              {\n                internalType: 'uint96',\n                name: 'rewardsPerHour',\n                type: 'uint96',\n              },\n              {\n                internalType: 'uint96',\n                name: 'capPerPosition',\n                type: 'uint96',\n              },\n            ],\n            internalType: 'struct ApeCoinStaking.TimeRange',\n            name: 'currentTimeRange',\n            type: 'tuple',\n          },\n        ],\n        internalType: 'struct ApeCoinStaking.PoolUI',\n        name: '',\n        type: 'tuple',\n      },\n      {\n        components: [\n          { internalType: 'uint256', name: 'poolId', type: 'uint256' },\n          { internalType: 'uint256', name: 'stakedAmount', type: 'uint256' },\n          {\n            components: [\n              {\n                internalType: 'uint48',\n                name: 'startTimestampHour',\n                type: 'uint48',\n              },\n              {\n                internalType: 'uint48',\n                name: 'endTimestampHour',\n                type: 'uint48',\n              },\n              {\n                internalType: 'uint96',\n                name: 'rewardsPerHour',\n                type: 'uint96',\n              },\n              {\n                internalType: 'uint96',\n                name: 'capPerPosition',\n                type: 'uint96',\n              },\n            ],\n            internalType: 'struct ApeCoinStaking.TimeRange',\n            name: 'currentTimeRange',\n            type: 'tuple',\n          },\n        ],\n        internalType: 'struct ApeCoinStaking.PoolUI',\n        name: '',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\nconst provider = new JsonRpcProvider('https://rpc.ankr.com/eth', 1);\nconst stakingContract = new Contract(poolAddress, poolAbi, provider);\nconst contractFetcher = {\n  getPoolsUI: stakingContract.getPoolsUI,\n};\n\nexport const yieldTokens = {\n  sApe: '0x7966c5bae631294d7cffcea5430b78c2f76db6fa',\n};\n\n/**\n * Staked ApeCoin APR fetching\n * @hidden\n *\n * @param contract - can be ignored, used for testing\n *\n * @returns apr in bsp\n */\nexport const tessera: AprFetcher = async (\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _ = 1,\n  contract = contractFetcher\n) => {\n  let apr = 0;\n\n  try {\n    const poolsUI = await contract.getPoolsUI();\n    const apePool = poolsUI[0];\n    const staked = apePool.stakedAmount;\n    const reward = apePool.currentTimeRange.rewardsPerHour.mul(24 * 365);\n\n    apr = Number(reward.mul(1e4).div(staked));\n  } catch (error) {\n    console.error('Failed to fetch Tessera Ape Coin APR:', error);\n  }\n\n  return {\n    [yieldTokens.sApe]: apr,\n  };\n};\n","import { AprFetcher } from '../repository';\nimport { Network } from '@/types';\nimport axios from 'axios';\nimport { formatUnits } from '@ethersproject/units';\nimport { BigNumber } from '@ethersproject/bignumber';\n\nexport const yieldTokens = {\n  eUSDC: '0xeb91861f8a4e1c12333f42dce8fb0ecdc28da716',\n  eDAI: '0xe025e3ca2be02316033184551d4d3aa22024d9dc',\n  eUSDT: '0x4d19f33948b99800b6113ff3e83bec9b537c85d2',\n  eFRAX: '0x5484451a88a35cd0878a1be177435ca8a0e4054e',\n};\n\nconst query = `\n  query getAssetsAPY($eTokenAddress_in: [String!]) {\n    assets(\n      where: {\n        eTokenAddress_in: $eTokenAddress_in\n      }\n    ) {\n      eTokenAddress\n      supplyAPY\n    }\n  }\n`;\n\ninterface EulerResponse {\n  data: {\n    assets: [\n      {\n        eTokenAddress: string;\n        supplyAPY: string;\n      }\n    ];\n  };\n}\n\nconst endpoint = {\n  [Network.MAINNET]:\n    'https://api.thegraph.com/subgraphs/name/euler-xyz/euler-mainnet',\n};\n/**\n * Euler APR fetching\n *\n * @returns Euler APR for USDC, USDT and DAI\n */\nexport const euler: AprFetcher = async () => {\n  const network = Network.MAINNET;\n  const graphqlQuery = {\n    operationName: 'getAssetsAPY',\n    query,\n    variables: {\n      eTokenAddress_in: Object.values(yieldTokens),\n    },\n  };\n  const response = await axios.post(endpoint[network], graphqlQuery);\n  const {\n    data: { assets },\n  } = response.data as EulerResponse;\n  const aprs = {\n    eUSDT: 0,\n    eDAI: 0,\n    eUSDC: 0,\n    eFRAX: 0,\n  };\n  assets.forEach(({ eTokenAddress, supplyAPY }) => {\n    const key: 'eUSDT' | 'eDAI' | 'eUSDC' | 'eFRAX' = Object.entries(\n      yieldTokens\n    ).filter(([, value]) => {\n      return value.toLocaleLowerCase() === eTokenAddress.toLocaleLowerCase();\n    })[0][0] as 'eUSDT' | 'eDAI' | 'eUSDC' | 'eFRAX';\n    aprs[key] = Math.round(\n      // supplyAPY is 1e27 = 100% and the apy must be returned with 1e4 = 100% (100% is 10000 in this case)\n      parseFloat(formatUnits(BigNumber.from(supplyAPY), 27)) * 10000\n    );\n  });\n  return {\n    [yieldTokens.eUSDT]: aprs.eUSDT,\n    [yieldTokens.eDAI]: aprs.eDAI,\n    [yieldTokens.eUSDC]: aprs.eUSDC,\n    [yieldTokens.eFRAX]: aprs.eFRAX,\n  };\n};\n","import { lido, yieldTokens as lidoTokens } from './tokens/lido';\nimport {\n  rocketpool,\n  yieldTokens as rocketpoolTokens,\n} from './tokens/rocketpool';\nimport {\n  lidoPolygon,\n  yieldTokens as lidoPolygonTokens,\n} from './tokens/lido-polygon';\nimport { aave, allYieldTokens as aaveTokens } from './tokens/aave';\nimport { overnight, yieldTokens as overnightTokens } from './tokens/overnight';\nimport { sfrxETH, yieldTokens as fraxTokens } from './tokens/sfrxeth';\nimport { maticX, yieldTokens as staderLabsTokens } from './tokens/maticx';\nimport { tranchess, yieldTokens as tranchessTokens } from './tokens/tranchess';\nimport { usdr, yieldTokens as usdrTokens } from './tokens/usdr';\nimport { stafi, yieldTokens as stafiTokens } from './tokens/stafi';\nimport { tessera, yieldTokens as tesseraTokens } from './tokens/tessera';\nimport { euler, yieldTokens as eulerTokens } from './tokens/euler';\nimport { Network, Findable } from '@/types';\n\n/**\n * Common interface for fetching APR from external sources\n * @interal\n *\n * @param network is optional, used when same source, eg: aave has multiple tokens and all of them can be fetched in one call.\n * @param other is optional, used for passing mocked data for testing.\n */\nexport interface AprFetcher {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (network?: Network, other?: any): Promise<{ [address: string]: number }>;\n}\n\nconst yieldSourceMap: { [address: string]: AprFetcher } = Object.fromEntries([\n  ...Object.values(lidoTokens).map((k) => [k, lido]),\n  ...Object.values(lidoPolygonTokens).map((k) => [k, lidoPolygon]),\n  ...Object.values(aaveTokens).map((k) => [k, aave]),\n  ...Object.values(overnightTokens).map((k) => [k, overnight]),\n  ...Object.values(rocketpoolTokens).map((k) => [k, rocketpool]),\n  ...Object.values(fraxTokens).map((k) => [k, sfrxETH]),\n  ...Object.values(staderLabsTokens).map((k) => [k, maticX]),\n  ...Object.values(tranchessTokens).map((k) => [k, tranchess]),\n  ...Object.values(usdrTokens).map((k) => [k, usdr]),\n  ...Object.values(stafiTokens).map((k) => [k, stafi]),\n  ...Object.values(tesseraTokens).map((k) => [k, tessera]),\n  ...Object.values(eulerTokens).map((k) => [k, euler]),\n]);\n\nexport class TokenYieldsRepository implements Findable<number> {\n  private yields: { [address: string]: number } = {};\n\n  constructor(private network: Network, private sources = yieldSourceMap) {}\n\n  async fetch(address: string): Promise<void> {\n    const tokenYields = await this.sources[address](this.network);\n    this.yields = {\n      ...this.yields,\n      ...tokenYields,\n    };\n  }\n\n  async find(address: string): Promise<number | undefined> {\n    const lowercase = address.toLocaleLowerCase();\n    if (\n      Object.keys(this.sources).includes(lowercase) &&\n      !Object.keys(this.yields).includes(lowercase)\n    ) {\n      await this.fetch(lowercase);\n    }\n\n    return this.yields[lowercase];\n  }\n\n  async findBy(attribute: string, value: string): Promise<number | undefined> {\n    if (attribute != 'address') {\n      return undefined;\n    }\n\n    return this.find(value);\n  }\n}\n","import { Findable } from '../types';\nimport axios from 'axios';\n\nconst query = (timestamp: string) => `{\n  blocks(first: 1, orderBy: timestamp, orderDirection: asc, where: { timestamp_gt: ${timestamp} }) {\n    number\n  }\n}`;\n\ninterface BlockNumberResponse {\n  data: {\n    blocks: [\n      {\n        number: string;\n      }\n    ];\n  };\n}\n\nconst fetchBlockByTime = async (\n  endpoint: string,\n  timestamp: string\n): Promise<number> => {\n  const payload = {\n    query: query(timestamp),\n  };\n\n  const response = await axios.post(endpoint, payload);\n\n  const {\n    data: { blocks },\n  } = response.data as BlockNumberResponse;\n\n  return parseInt(blocks[0].number);\n};\n\nexport class BlockNumberRepository implements Findable<number> {\n  blocks: { [ts: string]: Promise<number> } = {};\n\n  constructor(private endpoint: string) {}\n\n  async find(from: string): Promise<number | undefined> {\n    if (from == 'dayAgo') {\n      const dayAgo = `${Math.floor(Date.now() / 1000) - 86400}`;\n      if (!this.blocks[dayAgo]) {\n        this.blocks = {\n          ...this.blocks,\n          [dayAgo]: fetchBlockByTime(this.endpoint, dayAgo),\n        };\n      }\n      return this.blocks[dayAgo];\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async findBy(attribute = '', value = ''): Promise<number | undefined> {\n    return;\n  }\n}\n","import { cloneDeep } from 'lodash';\nimport { Interface } from '@ethersproject/abi';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { AddressZero, MaxInt256, MaxUint256 } from '@ethersproject/constants';\nimport {\n  SubgraphPoolBase,\n  SwapInfo,\n  SwapTypes,\n  SwapV2,\n} from '@balancer-labs/sor';\nimport {\n  Relayer,\n  OutputReference,\n  EncodeJoinPoolInput,\n  EncodeBatchSwapInput,\n  ExitPoolData,\n} from '@/modules/relayer/relayer.module';\nimport { getPoolAddress } from '@/pool-utils';\nimport { ExitPoolRequest } from '@/types';\nimport { FundManagement, SwapType } from './types';\nimport { WeightedPoolEncoder } from '@/pool-weighted';\nimport { AssetHelpers } from '@/lib/utils';\nimport { subSlippage } from '@/lib/utils/slippageHelper';\nimport { BalancerError, BalancerErrorCode } from '@/balancerErrors';\n\nimport balancerRelayerAbi from '@/lib/abi/BalancerRelayer.json';\n\nexport enum ActionStep {\n  Direct,\n  TokenIn,\n  TokenOut,\n  Middle,\n}\n\nexport enum ActionType {\n  Swap,\n  BatchSwap,\n  Join,\n  Exit,\n}\ninterface BaseAction {\n  type: ActionType;\n  minOut: string;\n  assets: string[];\n  hasTokenIn: boolean;\n  hasTokenOut: boolean;\n}\n\nexport interface JoinAction extends BaseAction {\n  type: ActionType.Join;\n  poolId: string;\n  tokenIn: string;\n  bpt: string;\n  opRef: OutputReference;\n  amountIn: string;\n  actionStep: ActionStep;\n  sender: string;\n  receiver: string;\n  fromInternal: boolean;\n}\n\nexport interface ExitAction extends BaseAction {\n  type: ActionType.Exit;\n  poolId: string;\n  tokenOut: string;\n  bpt: string;\n  opRef: OutputReference[];\n  amountIn: string;\n  actionStep: ActionStep;\n  sender: string;\n  receiver: string;\n  toInternal: boolean;\n}\n\nexport interface SwapAction extends BaseAction {\n  type: ActionType.Swap;\n  swap: SwapV2;\n  opRef: OutputReference[];\n  amountIn: string;\n  fromInternal: boolean;\n  toInternal: boolean;\n  sender: string;\n  receiver: string;\n  isBptIn: boolean;\n}\n\nexport interface BatchSwapAction extends BaseAction {\n  type: ActionType.BatchSwap;\n  swaps: SwapV2[];\n  opRef: OutputReference[];\n  fromInternal: boolean;\n  toInternal: boolean;\n  limits: BigNumber[];\n  approveTokens: string[];\n  sender: string;\n  receiver: string;\n}\n\nconst EMPTY_BATCHSWAP_ACTION: BatchSwapAction = {\n  type: ActionType.BatchSwap,\n  swaps: [],\n  opRef: [],\n  minOut: '0',\n  assets: [],\n  hasTokenIn: false,\n  hasTokenOut: false,\n  fromInternal: false,\n  toInternal: false,\n  limits: [],\n  approveTokens: [],\n  sender: '',\n  receiver: '',\n};\n\ntype Actions = JoinAction | ExitAction | SwapAction | BatchSwapAction;\ntype OrderedActions = JoinAction | ExitAction | BatchSwapAction;\n\nconst balancerRelayerInterface = new Interface(balancerRelayerAbi);\n\nfunction getOutputRef(key: number, index: number): OutputReference {\n  const keyRef = Relayer.toChainedReference(key);\n  return { index: index, key: keyRef };\n}\n\nfunction isBpt(pools: SubgraphPoolBase[], token: string): boolean {\n  return pools.some((p) => p.address.toLowerCase() === token.toLowerCase());\n}\n\nexport function canUseJoinExit(\n  swapType: SwapTypes,\n  tokenIn: string,\n  tokenOut: string\n): boolean {\n  if (\n    swapType === SwapTypes.SwapExactOut ||\n    tokenIn.toLowerCase() === AddressZero.toLowerCase() ||\n    tokenOut.toLowerCase() === AddressZero.toLowerCase()\n  )\n    return false;\n  else return true;\n}\n\n/**\n * Uses relayer to approve itself to act in behalf of the user\n * @param authorisation Encoded authorisation call.\n * @returns relayer approval call\n */\nfunction buildSetRelayerApproval(\n  authorisation: string,\n  relayerAddress: string\n): string {\n  return Relayer.encodeSetRelayerApproval(relayerAddress, true, authorisation);\n}\n\n/**\n * Currently SOR only supports join/exit paths through Weighted pools.\n * Weighted pools should not have preminted BPT so can assume if a swap token is pool address it is a join or exit.\n * @param pools\n * @param swap\n * @param assets\n * @returns\n */\nexport function hasJoinExit(\n  pools: SubgraphPoolBase[],\n  swap: SwapV2,\n  assets: string[]\n): boolean {\n  const pool = pools.find((p) => p.id === swap.poolId);\n  if (pool?.poolType !== 'Weighted') return false;\n  const tokenIn = assets[swap.assetInIndex];\n  const tokenOut = assets[swap.assetOutIndex];\n  return [tokenIn, tokenOut].includes(pool.address);\n}\n\n/**\n * Finds if a swap returned by SOR is a join by checking if tokenOut === poolAddress\n * @param swap\n * @param assets\n * @returns\n */\nexport function isJoin(swap: SwapV2, assets: string[]): boolean {\n  // token[join]bpt\n  const tokenOut = assets[swap.assetOutIndex];\n  const poolAddress = getPoolAddress(swap.poolId);\n  return tokenOut.toLowerCase() === poolAddress.toLowerCase();\n}\n\n/**\n * Finds if a swap returned by SOR is an exit by checking if tokenIn === poolAddress\n * @param swap\n * @param assets\n * @returns\n */\nexport function isExit(swap: SwapV2, assets: string[]): boolean {\n  // bpt[exit]token\n  const tokenIn = assets[swap.assetInIndex];\n  const poolAddress = getPoolAddress(swap.poolId);\n  return tokenIn.toLowerCase() === poolAddress.toLowerCase();\n}\n\n/**\n * Find if any of the swaps are join/exits. If yes these swaps should be routed via Relayer.\n * @param pools\n * @param swaps\n * @param assets\n * @returns\n */\nexport function someJoinExit(\n  pools: SubgraphPoolBase[],\n  swaps: SwapV2[],\n  assets: string[]\n): boolean {\n  return swaps.some((swap) => {\n    return hasJoinExit(pools, swap, assets);\n  });\n}\n\n/**\n * If its not the final action then we need an outputReferece to chain to next action as input\n * @param actionStep\n * @param tokenOutIndex\n * @param opRefKey\n * @returns\n */\nfunction getActionOutputRef(\n  actionStep: ActionStep,\n  tokenOutIndex: number,\n  opRefKey: number\n): [OutputReference, number] {\n  let opRef: OutputReference = {} as OutputReference;\n  if (actionStep === ActionStep.TokenIn || actionStep === ActionStep.Middle) {\n    opRef = getOutputRef(opRefKey, tokenOutIndex);\n    opRefKey++;\n  }\n  return [opRef, opRefKey];\n}\n\n/**\n * Use slippage to set min amount out\n * @param amountOut\n * @param slippage\n * @returns\n */\nfunction getActionMinOut(amountOut: string, slippage: string): string {\n  // Currently only handle ExactIn swap. ExactOut would add slippage\n  // We should apply slippage to each swaps amountOut\n  return subSlippage(\n    BigNumber.from(amountOut),\n    BigNumber.from(slippage)\n  ).toString();\n}\n\n/**\n * If its not the first action then the amount will come from the previous output ref\n * @param swap\n * @param actionType\n * @param actionStep\n * @param opRefKey\n * @returns\n */\nfunction getActionAmount(\n  swap: SwapV2,\n  actionType: ActionType,\n  actionStep: ActionStep,\n  opRefKey: number\n): string {\n  let amountIn = swap.amount;\n  if (\n    actionStep === ActionStep.TokenOut ||\n    (actionStep === ActionStep.Middle && actionType === ActionType.Join) ||\n    (actionStep === ActionStep.Middle && actionType === ActionType.Exit)\n  ) {\n    amountIn = Relayer.toChainedReference(opRefKey - 1).toString();\n  }\n  return amountIn;\n}\n\n/**\n * Find if the Action is:\n * Direct: tokenIn > tokenOut\n * TokenIn: tokenIn > chain...\n * TokenOut: ...chain > tokenOut\n * Middle: ...chain > action > chain...\n * @param tokenInIndex\n * @param tokenOutIndex\n * @param tokenInIndexAction\n * @param tokenOutIndexAction\n * @returns\n */\nfunction getActionStep(\n  tokenInIndex: number,\n  tokenOutIndex: number,\n  tokenInIndexAction: number,\n  tokenOutIndexAction: number\n): ActionStep {\n  let actionStep: ActionStep;\n  if (\n    tokenInIndexAction === tokenInIndex &&\n    tokenOutIndexAction === tokenOutIndex\n  ) {\n    actionStep = ActionStep.Direct;\n  } else if (tokenInIndexAction === tokenInIndex) {\n    actionStep = ActionStep.TokenIn;\n  } else if (tokenOutIndexAction === tokenOutIndex) {\n    actionStep = ActionStep.TokenOut;\n  } else {\n    actionStep = ActionStep.Middle;\n  }\n  return actionStep;\n}\n\n/**\n * Find the number of actions that end with tokenOut\n * @param actions\n * @returns\n */\nexport function getNumberOfOutputActions(actions: OrderedActions[]): number {\n  let outputCount = 0;\n  for (const a of actions) {\n    if (a.hasTokenOut) outputCount++;\n  }\n  return outputCount;\n}\n\n/**\n * Categorize each action into a Join, Middle or Exit.\n * @param actions\n * @returns\n */\nexport function categorizeActions(actions: Actions[]): Actions[] {\n  const enterActions: Actions[] = [];\n  const exitActions: Actions[] = [];\n  const middleActions: Actions[] = [];\n  for (const a of actions) {\n    if (a.type === ActionType.Exit || a.type === ActionType.Join) {\n      // joins/exits with tokenIn can always be done first\n      if (a.hasTokenIn) enterActions.push(a);\n      // joins/exits with tokenOut (and not tokenIn) can always be done last\n      else if (a.hasTokenOut) exitActions.push(a);\n      else middleActions.push(a);\n    }\n    // All other actions will be chained inbetween\n    else middleActions.push(a);\n  }\n  const allActions: Actions[] = [\n    ...enterActions,\n    ...middleActions,\n    ...exitActions,\n  ];\n  return allActions;\n}\n\n/**\n * This aims to minimise the number of Actions the Relayer multicall needs to call by batching sequential swaps together.\n * @param actions\n * @param assets\n * @returns\n */\nexport function batchSwapActions(\n  allActions: Actions[],\n  assets: string[]\n): OrderedActions[] {\n  /*\n  batchSwaps are a collection of swaps that can all be called in a single batchSwap\n  Can batch all swaps with same source\n  Any swap without tokenIn && not BPT should be coming from internal balances\n  Any swap with tokenIn or BPT should be coming from external balances\n  */\n  const orderedActions: OrderedActions[] = [];\n  let batchSwaps = cloneDeep(EMPTY_BATCHSWAP_ACTION);\n  batchSwaps.assets = assets;\n  batchSwaps.limits = Array(assets.length).fill(BigNumber.from('0'));\n\n  let isFirstSwap = true;\n  let lastSwap: SwapAction = {} as SwapAction;\n\n  for (const a of allActions) {\n    if (a.type === ActionType.Swap) {\n      if (isFirstSwap) {\n        lastSwap = a;\n        isFirstSwap = false;\n      }\n      if (a.isBptIn) {\n        // Older pools don't have pre-approval so need to add this as a step\n        batchSwaps.approveTokens.push(a.assets[a.swap.assetInIndex]);\n      }\n      // If swap has different send/receive params than previous then it will need to be done separately\n      if (\n        a.fromInternal !== lastSwap.fromInternal ||\n        a.toInternal !== lastSwap.toInternal ||\n        a.receiver !== lastSwap.receiver ||\n        a.sender !== lastSwap.sender\n      ) {\n        if (batchSwaps.swaps.length > 0) {\n          orderedActions.push(batchSwaps);\n          batchSwaps = cloneDeep(EMPTY_BATCHSWAP_ACTION);\n          batchSwaps.assets = assets;\n          batchSwaps.limits = Array(assets.length).fill(BigNumber.from('0'));\n        }\n      }\n      batchSwaps.swaps.push(a.swap);\n      batchSwaps.opRef.push(...a.opRef);\n      batchSwaps.fromInternal = a.fromInternal;\n      batchSwaps.toInternal = a.toInternal;\n      batchSwaps.sender = a.sender;\n      batchSwaps.receiver = a.receiver;\n      if (a.hasTokenIn) {\n        batchSwaps.hasTokenIn = true;\n        // We need to add amount for each swap that uses tokenIn to get correct total\n        batchSwaps.limits[a.swap.assetInIndex] = batchSwaps.limits[\n          a.swap.assetInIndex\n        ].add(a.amountIn);\n      } else {\n        // This will be a chained swap/input amount\n        batchSwaps.limits[a.swap.assetInIndex] = MaxInt256;\n      }\n      if (a.hasTokenOut) {\n        // We need to add amount for each swap that uses tokenOut to get correct total (should be negative)\n        batchSwaps.hasTokenOut = true;\n        batchSwaps.limits[a.swap.assetOutIndex] = batchSwaps.limits[\n          a.swap.assetOutIndex\n        ].sub(a.minOut);\n      }\n      lastSwap = a;\n    } else {\n      // Non swap action\n      if (batchSwaps.swaps.length > 0) {\n        orderedActions.push(batchSwaps);\n        // new batchSwap collection as there is a chained join/exit inbetween\n        batchSwaps = cloneDeep(EMPTY_BATCHSWAP_ACTION);\n        batchSwaps.assets = assets;\n        batchSwaps.limits = Array(assets.length).fill(BigNumber.from('0'));\n      }\n      orderedActions.push(a);\n    }\n  }\n  if (batchSwaps.swaps.length > 0) orderedActions.push(batchSwaps);\n  return orderedActions;\n}\n\n/**\n * Organise Actions into order with least amount of calls.\n * @param actions\n * @param assets\n * @returns\n */\nexport function orderActions(\n  actions: Actions[],\n  assets: string[]\n): OrderedActions[] {\n  const categorizedActions = categorizeActions(actions);\n  const orderedActions = batchSwapActions(categorizedActions, assets);\n  return orderedActions;\n}\n\n/**\n * Translate each swap into an Action. An Action is a join/exit/swap with the chained output refs.\n * @param swapType\n * @param tokenIn\n * @param tokenOut\n * @param swaps\n * @param assets\n * @param slippage\n * @param pools\n * @param user\n * @param relayer\n * @returns\n */\nexport function getActions(\n  tokenIn: string,\n  tokenOut: string,\n  swaps: SwapV2[],\n  assets: string[],\n  slippage: string,\n  pools: SubgraphPoolBase[],\n  user: string,\n  relayer: string\n): Actions[] {\n  const tokenInIndex = assets.findIndex(\n    (t) => t.toLowerCase() === tokenIn.toLowerCase()\n  );\n  const tokenOutIndex = assets.findIndex(\n    (t) => t.toLowerCase() === tokenOut.toLowerCase()\n  );\n  const actions: Actions[] = [];\n  let opRefKey = 0;\n  let previousAction: Actions = {} as Actions;\n  for (const swap of swaps) {\n    if (isJoin(swap, assets)) {\n      const [joinAction, newOpRefKey] = createJoinAction(\n        swap,\n        tokenInIndex,\n        tokenOutIndex,\n        opRefKey,\n        assets,\n        slippage,\n        user,\n        relayer\n      );\n      opRefKey = newOpRefKey;\n      actions.push(joinAction);\n      previousAction = joinAction;\n      continue;\n    } else if (isExit(swap, assets)) {\n      const [exitAction, newOpRefKey] = createExitAction(\n        swap,\n        tokenInIndex,\n        tokenOutIndex,\n        opRefKey,\n        assets,\n        slippage,\n        user,\n        relayer\n      );\n      opRefKey = newOpRefKey;\n      actions.push(exitAction);\n      previousAction = exitAction;\n      continue;\n    } else {\n      const amount = swap.amount;\n      const [swapAction, newOpRefKey] = createSwapAction(\n        swap,\n        tokenInIndex,\n        tokenOutIndex,\n        opRefKey,\n        assets,\n        slippage,\n        pools,\n        user,\n        relayer\n      );\n      if (previousAction.type === ActionType.Swap && amount === '0') {\n        /*\n        If its part of a multihop swap the amount will be 0 (and should remain 0)\n        The source will be same as previous swap so set previous receiver to match sender. Receiver set as is.\n        */\n        previousAction.receiver = previousAction.sender;\n        previousAction.toInternal = previousAction.fromInternal;\n        previousAction.opRef = [];\n        swapAction.sender = previousAction.receiver;\n        swapAction.fromInternal = previousAction.fromInternal;\n        swapAction.amountIn = '0';\n        swapAction.swap.amount = '0';\n      }\n      opRefKey = newOpRefKey;\n      actions.push(swapAction);\n      previousAction = swapAction;\n      continue;\n    }\n  }\n  return actions;\n}\n\n/**\n * Create a JoinAction with relevant info\n * @param swapType\n * @param swap\n * @param mainTokenInIndex\n * @param mainTokenOutIndex\n * @param opRefKey\n * @param assets\n * @param slippage\n * @returns\n */\nfunction createJoinAction(\n  swap: SwapV2,\n  mainTokenInIndex: number,\n  mainTokenOutIndex: number,\n  opRefKey: number,\n  assets: string[],\n  slippage: string,\n  user: string,\n  relayerAddress: string\n): [JoinAction, number] {\n  const actionStep = getActionStep(\n    mainTokenInIndex,\n    mainTokenOutIndex,\n    swap.assetInIndex,\n    swap.assetOutIndex\n  );\n  // Will get actual amount if input or chain amount if part of chain\n  const amountIn = getActionAmount(swap, ActionType.Join, actionStep, opRefKey);\n  // This will be 0 if not a mainTokenOut action otherwise amount using slippage\n  const minOut = getActionMinOut(swap.returnAmount ?? '0', slippage);\n  // This will set opRef for next chained action if required\n  const [opRef, newOpRefKey] = getActionOutputRef(\n    actionStep,\n    swap.assetOutIndex,\n    opRefKey\n  );\n  let sender = relayerAddress;\n  let fromInternal = true;\n  let hasTokenIn = false;\n  // If using mainTokenIn we can assume it comes from user\n  if (actionStep === ActionStep.Direct || actionStep === ActionStep.TokenIn) {\n    sender = user;\n    fromInternal = false;\n    hasTokenIn = true;\n  }\n  let receiver = relayerAddress;\n  let hasTokenOut = false;\n  // If using mainTokenOut we can assume it goes to user\n  if (actionStep === ActionStep.Direct || actionStep === ActionStep.TokenOut) {\n    receiver = user;\n    hasTokenOut = true;\n  }\n\n  const joinAction: JoinAction = {\n    type: ActionType.Join,\n    poolId: swap.poolId,\n    tokenIn: assets[swap.assetInIndex],\n    bpt: assets[swap.assetOutIndex],\n    opRef,\n    minOut,\n    amountIn,\n    assets,\n    actionStep,\n    sender,\n    receiver,\n    fromInternal,\n    hasTokenIn,\n    hasTokenOut,\n  };\n  return [joinAction, newOpRefKey];\n}\n\n/**\n * Create a ExitAction with relevant info.\n * @param swapType\n * @param swap\n * @param tokenInIndex\n * @param tokenOutIndex\n * @param opRefKey\n * @param assets\n * @param slippage\n * @param user\n * @param relayerAddress\n * @returns\n */\nfunction createExitAction(\n  swap: SwapV2,\n  tokenInIndex: number,\n  tokenOutIndex: number,\n  opRefKey: number,\n  assets: string[],\n  slippage: string,\n  user: string,\n  relayerAddress: string\n): [ExitAction, number] {\n  const actionStep = getActionStep(\n    tokenInIndex,\n    tokenOutIndex,\n    swap.assetInIndex,\n    swap.assetOutIndex\n  );\n  // Will get actual amount if input or chain amount if part of chain\n  const amountIn = getActionAmount(swap, ActionType.Exit, actionStep, opRefKey);\n  // This will be 0 if not a mainTokenOut action otherwise amount using slippage\n  const minOut = getActionMinOut(swap.returnAmount ?? '0', slippage);\n  // This will set opRef for next chained action if required\n  const [opRef, newOpRefKey] = getActionOutputRef(\n    actionStep,\n    swap.assetOutIndex,\n    opRefKey\n  );\n  let sender = relayerAddress;\n  let hasTokenIn = false;\n  if (actionStep === ActionStep.Direct || actionStep === ActionStep.TokenIn) {\n    sender = user;\n    hasTokenIn = true;\n  }\n  // Send to relayer unless this is main token out\n  let hasTokenOut = false;\n  let toInternalBalance = true;\n  let receiver = relayerAddress;\n  if (actionStep === ActionStep.Direct || actionStep === ActionStep.TokenOut) {\n    receiver = user;\n    toInternalBalance = false;\n    hasTokenOut = true;\n  }\n\n  const exitAction: ExitAction = {\n    type: ActionType.Exit,\n    poolId: swap.poolId,\n    tokenOut: assets[swap.assetOutIndex],\n    bpt: assets[swap.assetInIndex],\n    opRef: opRef.key ? [opRef] : [],\n    minOut,\n    amountIn,\n    assets,\n    actionStep,\n    sender,\n    receiver,\n    toInternal: toInternalBalance,\n    hasTokenIn,\n    hasTokenOut,\n  };\n  return [exitAction, newOpRefKey];\n}\n\n/**\n * Create a SwapAction with relevant info.\n * @param swapType\n * @param swap\n * @param mainTokenInIndex\n * @param mainTokenOutIndex\n * @param opRefKey\n * @param assets\n * @param slippage\n * @param pools\n * @param user\n * @param relayer\n * @returns\n */\nfunction createSwapAction(\n  swap: SwapV2,\n  mainTokenInIndex: number,\n  mainTokenOutIndex: number,\n  opRefKey: number,\n  assets: string[],\n  slippage: string,\n  pools: SubgraphPoolBase[],\n  user: string,\n  relayer: string\n): [SwapAction, number] {\n  const actionStep = getActionStep(\n    mainTokenInIndex,\n    mainTokenOutIndex,\n    swap.assetInIndex,\n    swap.assetOutIndex\n  );\n  // Will get actual amount if input or chain amount if part of chain\n  const amountIn = getActionAmount(swap, ActionType.Swap, actionStep, opRefKey);\n  // Updates swap data to use chainedRef if required\n  swap.amount = amountIn;\n  // This will be 0 if not a mainTokenOut action otherwise amount using slippage\n  const minOut = getActionMinOut(swap.returnAmount ?? '0', slippage);\n  // This will set opRef for next chained action if required\n  const [opRef, newOpRefKey] = getActionOutputRef(\n    actionStep,\n    swap.assetOutIndex,\n    opRefKey\n  );\n  const hasTokenIn =\n    actionStep === ActionStep.Direct || actionStep === ActionStep.TokenIn\n      ? true\n      : false;\n  const hasTokenOut =\n    actionStep === ActionStep.Direct || actionStep === ActionStep.TokenOut\n      ? true\n      : false;\n  const isBptIn = isBpt(pools, assets[swap.assetInIndex]);\n  // joins - can't join a pool and send BPT to internal balances\n  // Because of ^ we can assume that any BPT is coming from external (either from user or join)\n  let fromInternal = true;\n  if (hasTokenIn || isBptIn) fromInternal = false;\n  // exits - can't exit using BPT from internal balances\n  // Because of ^ we can assume that any tokenOut BPT is going to external (either to user or exit)\n  let toInternal = true;\n  if (hasTokenOut || isBpt(pools, assets[swap.assetOutIndex]))\n    toInternal = false;\n\n  // tokenIn/Out will come from/go to the user. Any other tokens are intermediate and will be from/to Relayer\n  let sender: string;\n  if (hasTokenIn) {\n    sender = user;\n  } else {\n    sender = relayer;\n  }\n  let receiver: string;\n  if (hasTokenOut) {\n    receiver = user;\n  } else {\n    receiver = relayer;\n  }\n\n  const swapAction: SwapAction = {\n    type: ActionType.Swap,\n    opRef: opRef.key ? [opRef] : [],\n    minOut,\n    amountIn,\n    assets,\n    swap: swap,\n    hasTokenIn,\n    hasTokenOut,\n    fromInternal,\n    toInternal,\n    isBptIn,\n    sender,\n    receiver,\n  };\n  return [swapAction, newOpRefKey];\n}\n\n/**\n * Creates encoded exitPool call.\n * @param pool\n * @param action\n * @param wrappedNativeAsset\n * @returns\n */\nfunction buildExitCall(\n  pool: SubgraphPoolBase,\n  action: ExitAction,\n  wrappedNativeAsset: string\n): [string, string, string] {\n  const assets = pool.tokensList;\n  const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n  // tokens must have same order as pool getTokens\n  const [sortedTokens] = assetHelpers.sortTokens(assets) as [string[]];\n  const exitToken = action.tokenOut;\n  const exitTokenIndex = sortedTokens.findIndex(\n    (t) => t.toLowerCase() === exitToken.toLowerCase()\n  );\n  const minAmountsOut = Array(assets.length).fill('0');\n  // Variable amount of token out (this has slippage applied)\n  minAmountsOut[exitTokenIndex] = action.minOut;\n  // Uses exact amount in\n  const bptAmtIn = action.amountIn;\n  const userData = WeightedPoolEncoder.exitExactBPTInForOneTokenOut(\n    bptAmtIn,\n    exitTokenIndex\n  );\n  const exitParams: ExitPoolData = {\n    assets: sortedTokens,\n    minAmountsOut,\n    userData,\n    toInternalBalance: action.toInternal,\n    poolId: action.poolId,\n    poolKind: 0, // This will always be 0 to match supported Relayer types\n    sender: action.sender,\n    recipient: action.receiver,\n    outputReferences: action.opRef,\n    exitPoolRequest: {} as ExitPoolRequest,\n  };\n  // console.log(exitParams);\n  const callData = Relayer.constructExitCall(exitParams);\n  // These are used for final amount check\n  const amountOut = action.hasTokenOut ? minAmountsOut[exitTokenIndex] : '0';\n  const amountIn = action.hasTokenIn ? bptAmtIn : '0';\n  return [callData, amountIn, amountOut];\n}\n\n/**\n * Creates encoded joinPool call.\n * @param pool\n * @param action\n * @param wrappedNativeAsset\n * @returns\n */\nfunction buildJoinCall(\n  pool: SubgraphPoolBase,\n  action: JoinAction,\n  wrappedNativeAsset: string\n): [string, string, string] {\n  const assets = pool.tokensList;\n  const assetHelpers = new AssetHelpers(wrappedNativeAsset);\n  // tokens must have same order as pool getTokens\n  const [sortedTokens] = assetHelpers.sortTokens(assets) as [string[]];\n  const joinToken = action.tokenIn;\n  const joinTokenIndex = sortedTokens.findIndex(\n    (t) => t.toLowerCase() === joinToken.toLowerCase()\n  );\n  const maxAmountsIn = Array(assets.length).fill('0');\n  // Uses exact amounts of tokens in\n  maxAmountsIn[joinTokenIndex] = action.amountIn;\n  // Variable amount of BPT out (this has slippage applied)\n  const bptAmountOut = action.minOut;\n  const userData = WeightedPoolEncoder.joinExactTokensInForBPTOut(\n    maxAmountsIn,\n    bptAmountOut\n  );\n  const attributes: EncodeJoinPoolInput = {\n    poolId: action.poolId,\n    sender: action.sender,\n    recipient: action.receiver,\n    kind: 0,\n    joinPoolRequest: {\n      assets: sortedTokens,\n      maxAmountsIn,\n      userData,\n      fromInternalBalance: action.fromInternal,\n    },\n    value: '0',\n    outputReference: action.opRef.key ? action.opRef.key.toString() : '0',\n  };\n\n  // console.log(attributes);\n\n  const callData = Relayer.encodeJoinPool(attributes);\n  // These are used for final amount check\n  const amountOut = action.hasTokenOut ? bptAmountOut : '0';\n  const amountIn = action.hasTokenIn ? maxAmountsIn[joinTokenIndex] : '0';\n\n  return [callData, amountIn, amountOut];\n}\n\n/**\n * Creates encoded batchSwap call.\n * @param action\n * @param swapType\n * @param tokenIn\n * @param tokenOut\n * @returns\n */\nfunction buildBatchSwapCall(\n  action: BatchSwapAction,\n  tokenIn: string,\n  tokenOut: string\n): [string[], string, string] {\n  const calls: string[] = [];\n\n  for (const token of action.approveTokens) {\n    // If swap tokenIn is a BPT then:\n    // new pools have automatic infinite vault allowance, but not old ones\n    // const key = Relayer.fromChainedReference(action.swaps[0].amount);\n    // const readOnlyRef = Relayer.toChainedReference(key, false);\n    // const approval = Relayer.encodeApproveVault(token, readOnlyRef.toString());\n    // TODO fix approval amount\n    const approval = Relayer.encodeApproveVault(token, MaxUint256.toString());\n    calls.push(approval);\n  }\n\n  const funds: FundManagement = {\n    sender: action.sender,\n    recipient: action.receiver,\n    fromInternalBalance: action.fromInternal,\n    toInternalBalance: action.toInternal,\n  };\n  const batchSwapInput: EncodeBatchSwapInput = {\n    swapType: SwapType.SwapExactIn,\n    swaps: action.swaps,\n    assets: action.assets,\n    funds,\n    limits: action.limits.map((l) => l.toString()),\n    deadline: BigNumber.from(Math.ceil(Date.now() / 1000) + 3600), // 1 hour from now\n    value: '0',\n    outputReferences: action.opRef,\n  };\n  // console.log(batchSwapInput);\n\n  const encodedBatchSwap = Relayer.encodeBatchSwap(batchSwapInput);\n  calls.push(encodedBatchSwap);\n  const maintokenInIndex = action.assets.findIndex(\n    (t) => t.toLowerCase() === tokenIn.toLowerCase()\n  );\n  const maintokenOutIndex = action.assets.findIndex(\n    (t) => t.toLowerCase() === tokenOut.toLowerCase()\n  );\n  const amountIn = action.hasTokenIn\n    ? action.limits[maintokenInIndex].toString()\n    : '0';\n  const amountOut = action.hasTokenOut\n    ? action.limits[maintokenOutIndex].abs().toString()\n    : '0';\n  return [calls, amountIn, amountOut];\n}\n\n/**\n * Given swapInfo from the SOR construct the Relayer multicall to execture swaps/joins/exits.\n * @param swapInfo Returned from SOR\n * @param swapType Only supports ExactIn\n * @param pools Pool info from SOR\n * @param user Address of user\n * @param relayerAddress Address of Relayer (>=V4)\n * @param wrappedNativeAsset Address of Native asset\n * @param slippage [bps], eg: 1 === 0.01%, 100 === 1%\n * @param authorisation Encoded authorisation call.\n * @returns\n */\nexport function buildRelayerCalls(\n  swapInfo: SwapInfo,\n  pools: SubgraphPoolBase[],\n  user: string,\n  relayerAddress: string,\n  wrappedNativeAsset: string,\n  slippage: string,\n  authorisation: string | undefined\n): {\n  to: string;\n  data: string;\n  rawCalls: string[];\n} {\n  // For each 'swap' create a swap/join/exit action\n  const actions = getActions(\n    swapInfo.tokenIn,\n    swapInfo.tokenOut,\n    swapInfo.swaps,\n    swapInfo.tokenAddresses,\n    slippage,\n    pools,\n    user,\n    relayerAddress\n  );\n  // Arrange action into order that will create minimal amount of calls\n  const orderedActions = orderActions(actions, swapInfo.tokenAddresses);\n\n  const calls: string[] = [];\n  // These amounts are used to compare to expected amounts\n  const amountsIn: BigNumber[] = [];\n  const amountsOut: BigNumber[] = [];\n  if (authorisation)\n    calls.push(buildSetRelayerApproval(authorisation, relayerAddress));\n\n  // Create encoded call for each action\n  for (const action of orderedActions) {\n    if (action.type === ActionType.Exit) {\n      const pool = pools.find((p) => p.id === action.poolId);\n      if (pool === undefined)\n        throw new BalancerError(BalancerErrorCode.NO_POOL_DATA);\n      const [call, amountIn, amountOut] = buildExitCall(\n        pool,\n        action,\n        wrappedNativeAsset\n      );\n      calls.push(call);\n      amountsIn.push(BigNumber.from(amountIn));\n      amountsOut.push(BigNumber.from(amountOut));\n    }\n    if (action.type === ActionType.Join) {\n      const pool = pools.find((p) => p.id === action.poolId);\n      if (pool === undefined)\n        throw new BalancerError(BalancerErrorCode.NO_POOL_DATA);\n      const [call, amountIn, amountOut] = buildJoinCall(\n        pool,\n        action,\n        wrappedNativeAsset\n      );\n      calls.push(call);\n      amountsIn.push(BigNumber.from(amountIn));\n      amountsOut.push(BigNumber.from(amountOut));\n    }\n    if (action.type === ActionType.BatchSwap) {\n      const [batchSwapCalls, amountIn, amountOut] = buildBatchSwapCall(\n        action,\n        swapInfo.tokenIn,\n        swapInfo.tokenOut\n      );\n      calls.push(...batchSwapCalls);\n      amountsIn.push(BigNumber.from(amountIn));\n      amountsOut.push(BigNumber.from(amountOut));\n    }\n  }\n\n  // Safety check to make sure amounts/limits from calls match expected\n  checkAmounts(amountsIn, amountsOut, swapInfo, slippage);\n  // encode relayer multicall\n  const callData = balancerRelayerInterface.encodeFunctionData('multicall', [\n    calls,\n  ]);\n\n  return {\n    to: relayerAddress,\n    data: callData,\n    rawCalls: calls,\n  };\n}\n\nfunction checkAmounts(\n  amountsIn: BigNumber[],\n  amountsOut: BigNumber[],\n  swapInfo: SwapInfo,\n  slippage: string\n): void {\n  const totalIn = amountsIn.reduce(\n    (total = BigNumber.from(0), amount) => (total = total.add(amount))\n  );\n  const totalOut = amountsOut.reduce(\n    (total = BigNumber.from(0), amount) => (total = total.add(amount))\n  );\n  // totalIn should equal the original input swap amount\n  // totalOut should equal the return amount from SOR minus any slippage allowance\n  // console.log(totalIn.toString(), 'totalIn');\n  // console.log(swapInfo.swapAmount.toString(), 'swapInfo.swapAmount');\n  // console.log(totalOut.toString(), 'totalOut');\n  // console.log(\n  //   subSlippage(swapInfo.returnAmount, BigNumber.from(slippage)).toString(),\n  //   'slippage'\n  // );\n  // console.log(swapInfo.returnAmount.toString(), 'swapInfo.returnAmount');\n  const diffOut = totalOut.sub(\n    subSlippage(swapInfo.returnAmount, BigNumber.from(slippage))\n  );\n  if (!totalIn.eq(swapInfo.swapAmount) || !diffOut.lt(`3`))\n    throw new BalancerError(BalancerErrorCode.RELAY_SWAP_AMOUNTS);\n  /* ExactOut case\n    // totalIn should equal the return amount from SOR (this is the amount in) plus any slippage allowance\n    // totalOut should equal the original input swap amount (the exact amount out)\n    if (\n      !totalIn.eq(\n        addSlippage(swapInfo.returnAmount, BigNumber.from(slippage))\n      ) ||\n      !totalOut.eq(swapInfo.swapAmount)\n    )\n      throw new BalancerError(BalancerErrorCode.RELAY_SWAP_AMOUNTS);\n    */\n}\n","export * as balEmissions from './bal/emissions';\nexport * from './gauge-controller/multicall';\nexport * from './gauge-shares';\nexport * from './liquidity-gauges';\nexport * from './pool';\nexport * from './pool-gauges';\nexport * from './pool-joinExit';\nexport * from './pool-shares';\nexport * from './token';\nexport * from './token-prices';\nexport * from './fee-distributor/repository';\nexport * from './fee-collector/repository';\nexport * from './protocol-fees/provider';\nexport * from './token-yields/repository';\nexport * from './block-number';\n\nimport {\n  BalancerNetworkConfig,\n  BalancerDataRepositories,\n  GraphQLQuery,\n} from '@/types';\nimport { PoolsSubgraphRepository } from './pool/subgraph';\nimport { PoolSharesRepository } from './pool-shares/repository';\nimport { PoolJoinExitRepository } from './pool-joinExit/repository';\nimport { PoolsSubgraphOnChainRepository } from './pool/subgraphOnChain';\nimport { PoolGaugesRepository } from './pool-gauges/repository';\nimport { GaugeSharesRepository } from './gauge-shares/repository';\nimport { BlockNumberRepository } from './block-number';\nimport {\n  CoingeckoPriceRepository,\n  AaveRates,\n  TokenPriceProvider,\n  HistoricalPriceProvider,\n  CoingeckoHistoricalPriceRepository,\n} from './token-prices';\nimport { StaticTokenProvider } from './token/static';\nimport { LiquidityGaugeSubgraphRPCProvider } from './liquidity-gauges/provider';\nimport { FeeDistributorRepository } from './fee-distributor/repository';\nimport { FeeCollectorRepository } from './fee-collector/repository';\nimport { TokenYieldsRepository } from './token-yields/repository';\nimport { ProtocolFeesProvider } from './protocol-fees/provider';\nimport { Provider } from '@ethersproject/providers';\n\n// initialCoingeckoList are used to get the initial token list for coingecko\n// TODO: we might want to replace that with what frontend is using\nimport initialCoingeckoList from '@/modules/data/token-prices/initial-list.json';\nimport { SubgraphPriceRepository } from './token-prices/subgraph';\n\nexport class Data implements BalancerDataRepositories {\n  pools;\n  poolsOnChain;\n  yesterdaysPools;\n  poolShares;\n  poolGauges;\n  gaugeShares;\n  tokenPrices;\n  tokenHistoricalPrices;\n  tokenMeta;\n  liquidityGauges;\n  feeDistributor;\n  feeCollector;\n  protocolFees;\n  tokenYields;\n  blockNumbers;\n  poolJoinExits;\n\n  constructor(\n    networkConfig: BalancerNetworkConfig,\n    provider: Provider,\n    subgraphQuery?: GraphQLQuery\n  ) {\n    this.pools = new PoolsSubgraphRepository({\n      url: networkConfig.urls.subgraph,\n      chainId: networkConfig.chainId,\n    });\n\n    this.poolsOnChain = new PoolsSubgraphOnChainRepository({\n      url: networkConfig.urls.subgraph,\n      chainId: networkConfig.chainId,\n      provider: provider,\n      multicall: networkConfig.addresses.contracts.multicall,\n      vault: networkConfig.addresses.contracts.vault,\n      query: subgraphQuery,\n    });\n\n    this.poolShares = new PoolSharesRepository(\n      networkConfig.urls.subgraph,\n      networkConfig.chainId\n    );\n\n    this.poolJoinExits = new PoolJoinExitRepository(\n      networkConfig.urls.subgraph,\n      networkConfig.chainId\n    );\n\n    if (networkConfig.urls.gaugesSubgraph) {\n      this.poolGauges = new PoolGaugesRepository(\n        networkConfig.urls.gaugesSubgraph,\n        networkConfig.chainId\n      );\n\n      this.gaugeShares = new GaugeSharesRepository(\n        networkConfig.urls.gaugesSubgraph,\n        networkConfig.chainId\n      );\n    }\n\n    // 🚨 yesterdaysPools is used to calculate swapFees accumulated over last 24 hours\n    // TODO: find a better data source for that, eg: maybe DUNE once API is available\n    if (networkConfig.urls.blockNumberSubgraph) {\n      this.blockNumbers = new BlockNumberRepository(\n        networkConfig.urls.blockNumberSubgraph\n      );\n\n      const blockDayAgo = async () => {\n        if (this.blockNumbers) {\n          return await this.blockNumbers.find('dayAgo');\n        }\n      };\n\n      this.yesterdaysPools = new PoolsSubgraphRepository({\n        url: networkConfig.urls.subgraph,\n        chainId: networkConfig.chainId,\n        blockHeight: blockDayAgo,\n      });\n    }\n\n    const tokenAddresses = initialCoingeckoList\n      .filter((t) => t.chainId == networkConfig.chainId)\n      .map((t) => t.address);\n\n    const coingeckoRepository = new CoingeckoPriceRepository(\n      tokenAddresses,\n      networkConfig.chainId\n    );\n\n    const subgraphPriceRepository = new SubgraphPriceRepository(\n      networkConfig.urls.subgraph,\n      networkConfig.chainId\n    );\n\n    const aaveRates = new AaveRates(\n      networkConfig.addresses.contracts.multicall,\n      provider,\n      networkConfig.chainId\n    );\n\n    this.tokenPrices = new TokenPriceProvider(\n      coingeckoRepository,\n      subgraphPriceRepository,\n      aaveRates\n    );\n\n    const coingeckoHistoricalRepository =\n      new CoingeckoHistoricalPriceRepository(networkConfig.chainId);\n\n    this.tokenHistoricalPrices = new HistoricalPriceProvider(\n      coingeckoHistoricalRepository,\n      aaveRates\n    );\n\n    this.tokenMeta = new StaticTokenProvider([]);\n\n    if (networkConfig.urls.gaugesSubgraph) {\n      this.liquidityGauges = new LiquidityGaugeSubgraphRPCProvider(\n        networkConfig.urls.gaugesSubgraph,\n        networkConfig.addresses.contracts.multicall,\n        networkConfig.addresses.contracts.gaugeController || '',\n        networkConfig.chainId,\n        provider\n      );\n    }\n\n    if (\n      networkConfig.addresses.contracts.feeDistributor &&\n      networkConfig.addresses.tokens.bal &&\n      networkConfig.addresses.tokens.veBal &&\n      networkConfig.addresses.tokens.bbaUsd\n    ) {\n      this.feeDistributor = new FeeDistributorRepository(\n        networkConfig.addresses.contracts.multicall,\n        networkConfig.addresses.contracts.feeDistributor,\n        networkConfig.addresses.tokens.bal,\n        networkConfig.addresses.tokens.veBal,\n        networkConfig.addresses.tokens.bbaUsd,\n        provider\n      );\n    }\n\n    this.feeCollector = new FeeCollectorRepository(\n      networkConfig.addresses.contracts.vault,\n      provider\n    );\n\n    if (networkConfig.addresses.contracts.protocolFeePercentagesProvider) {\n      this.protocolFees = new ProtocolFeesProvider(\n        networkConfig.addresses.contracts.multicall,\n        networkConfig.addresses.contracts.protocolFeePercentagesProvider,\n        provider\n      );\n    }\n\n    this.tokenYields = new TokenYieldsRepository(networkConfig.chainId);\n  }\n}\n","import { JsonRpcProvider } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\n\nimport aTokenRateProviderAbi from '../abi/StaticATokenRateProvider.json';\n\nexport class AaveHelpers {\n  static async getRate(\n    rateProviderAddress: string,\n    provider: JsonRpcProvider\n  ): Promise<string> {\n    const rateProviderContract = new Contract(\n      rateProviderAddress,\n      aTokenRateProviderAbi,\n      provider\n    );\n\n    const rate = await rateProviderContract.getRate();\n    return rate.toString();\n  }\n}\n","import { BalancerSdkConfig, BalancerNetworkConfig } from '@/types';\nimport { Swaps } from './swaps/swaps.module';\nimport { Relayer } from './relayer/relayer.module';\nimport { Subgraph } from './subgraph/subgraph.module';\nimport { Sor } from './sor/sor.module';\nimport { getNetworkConfig } from './sdk.helpers';\nimport { Pricing } from './pricing/pricing.module';\nimport { ContractInstances, Contracts } from './contracts/contracts.module';\nimport { Zaps } from './zaps/zaps.module';\nimport { Pools } from './pools';\nimport { Data } from './data';\nimport { Provider } from '@ethersproject/providers';\n\nexport interface BalancerSDKRoot {\n  config: BalancerSdkConfig;\n  sor: Sor;\n  subgraph: Subgraph;\n  pools: Pools;\n  data: Data;\n  swaps: Swaps;\n  relayer: Relayer;\n  networkConfig: BalancerNetworkConfig;\n  rpcProvider: Provider;\n}\n\nexport class BalancerSDK implements BalancerSDKRoot {\n  readonly swaps: Swaps;\n  readonly relayer: Relayer;\n  readonly pricing: Pricing;\n  readonly pools: Pools;\n  readonly data: Data;\n  balancerContracts: Contracts;\n  zaps: Zaps;\n  readonly networkConfig: BalancerNetworkConfig;\n  readonly provider: Provider;\n\n  constructor(\n    public config: BalancerSdkConfig,\n    public sor = new Sor(config),\n    public subgraph = new Subgraph(config)\n  ) {\n    this.networkConfig = getNetworkConfig(config);\n    this.provider = sor.provider;\n\n    this.data = new Data(\n      this.networkConfig,\n      sor.provider,\n      config.subgraphQuery\n    );\n    this.swaps = new Swaps(this.config);\n    this.relayer = new Relayer(this.swaps);\n    this.pricing = new Pricing(config, this.swaps);\n    this.pools = new Pools(this.networkConfig, this.data);\n\n    this.balancerContracts = new Contracts(\n      this.networkConfig.addresses.contracts,\n      sor.provider\n    );\n    this.zaps = new Zaps(this.networkConfig.chainId);\n  }\n\n  get rpcProvider(): Provider {\n    return this.sor.provider;\n  }\n\n  /**\n   * Expose balancer contracts, e.g. Vault, LidoRelayer.\n   */\n  get contracts(): ContractInstances {\n    return this.balancerContracts.contracts;\n  }\n}\n","import { Findable } from '../types';\nimport { PoolAttribute, PoolsRepositoryFetchOptions } from './types';\nimport { GraphQLQuery, Pool } from '@/types';\nimport BalancerAPIClient from '@/modules/api/balancer-api.client';\nimport {\n  GraphQLArgsBuilder,\n  BalancerAPIArgsFormatter,\n} from '@/lib/graphql/args-builder';\nimport { GraphQLArgs } from '@/lib/graphql/types';\n\ninterface PoolsBalancerAPIOptions {\n  url: string;\n  apiKey: string;\n  query?: GraphQLQuery;\n}\n\nconst DEFAULT_SKIP = 0;\nconst DEFAULT_FIRST = 10;\n\n/**\n * Access pools using the Balancer GraphQL Api.\n *\n * Balancer's API URL: https://api.balancer.fi/query/\n */\nexport class PoolsBalancerAPIRepository\n  implements Findable<Pool, PoolAttribute>\n{\n  private client: BalancerAPIClient;\n  public pools: Pool[] = [];\n  public skip = 0; // Keep track of how many pools to skip on next fetch, so this functions similar to subgraph repository.\n  public nextToken: string | undefined; // A token to pass to the next query to retrieve the next page of results.\n  private query: GraphQLQuery;\n\n  constructor(options: PoolsBalancerAPIOptions) {\n    this.client = new BalancerAPIClient(options.url, options.apiKey);\n\n    const defaultArgs: GraphQLArgs = {\n      chainId: 1,\n      orderBy: 'totalLiquidity',\n      orderDirection: 'desc',\n      where: {\n        swapEnabled: {\n          eq: true,\n        },\n        totalShares: {\n          gt: 0.05,\n        },\n      },\n    };\n\n    const defaultAttributes = {\n      id: true,\n      address: true,\n    };\n\n    this.query = {\n      args: Object.assign({}, options.query?.args || defaultArgs),\n      attrs: Object.assign({}, options.query?.attrs || defaultAttributes),\n    };\n\n    // skip is not a valid argument for the Balancer API, it uses nextToken\n    delete this.query.args.skip;\n  }\n\n  fetchFromCache(options?: PoolsRepositoryFetchOptions): Pool[] {\n    const first = options?.first || DEFAULT_FIRST;\n    const skip = options?.skip || DEFAULT_SKIP;\n\n    const pools = this.pools.slice(skip, first + skip);\n    this.skip = skip + first;\n    return pools;\n  }\n\n  async fetch(options?: PoolsRepositoryFetchOptions): Promise<Pool[]> {\n    if (\n      this.pools.length >\n      (options?.first || DEFAULT_FIRST) + (options?.skip || DEFAULT_SKIP)\n    ) {\n      return this.fetchFromCache(options);\n    }\n\n    if (this.nextToken) {\n      this.query.args.nextToken = this.nextToken;\n    }\n\n    if (options?.first) {\n      // We need to request more than they specified because filtering is done post limit\n      // e.g. if we ask for 10 we may get 7 because 3 were filtered out.\n      this.query.args.first = options.first * 2;\n    }\n\n    const formattedArgs = new GraphQLArgsBuilder(this.query.args).format(\n      new BalancerAPIArgsFormatter()\n    );\n\n    const attrs = this.query.attrs;\n    attrs.nextToken = true;\n\n    const formattedQuery = {\n      pools: {\n        __args: formattedArgs,\n        ...attrs,\n      },\n    };\n\n    const apiResponse = await this.client.get(formattedQuery);\n    const apiResponseData = apiResponse.pools;\n\n    this.nextToken = apiResponseData.nextToken;\n    this.pools = this.pools.concat(apiResponseData.pools.map(this.format));\n    this.skip = this.pools.length;\n\n    return this.fetchFromCache(options);\n  }\n\n  async find(id: string): Promise<Pool | undefined> {\n    if (this.pools.length == 0) {\n      await this.fetch();\n    }\n\n    return this.findBy('id', id);\n  }\n\n  async findBy(param: PoolAttribute, value: string): Promise<Pool | undefined> {\n    if (this.pools.length == 0) {\n      await this.fetch();\n    }\n\n    const pool = this.pools.find((pool) => pool[param] == value);\n    if (pool) {\n      return this.format(pool);\n    }\n  }\n\n  /** Fixes any formatting issues from the subgraph\n   *  - GraphQL can't store a map so pool.apr.[rewardAprs/tokenAprs].breakdown\n   *    is JSON data that needs to be parsed so they match the Pool type correctly.\n   */\n  private format(pool: Pool): Pool {\n    if (pool.apr?.rewardAprs.breakdown) {\n      // GraphQL can't store this as a map so it's JSON that we must parse\n      const rewardsBreakdown = JSON.parse(\n        pool.apr?.rewardAprs.breakdown as unknown as string\n      );\n      pool.apr.rewardAprs.breakdown = rewardsBreakdown;\n    }\n    if (pool.apr?.tokenAprs.breakdown) {\n      // GraphQL can't store this as a map so it's JSON that we must parse\n      const tokenAprsBreakdown = JSON.parse(\n        pool.apr?.tokenAprs.breakdown as unknown as string\n      );\n      pool.apr.tokenAprs.breakdown = tokenAprsBreakdown;\n    }\n\n    return pool;\n  }\n}\n","import { Findable } from '../types';\nimport { Pool } from '@/types';\nimport {\n  PoolAttribute,\n  PoolRepository,\n  PoolsFallbackRepositoryOptions,\n  PoolsRepositoryFetchOptions,\n} from './types';\n\n/**\n * The fallback provider takes multiple PoolRepository's in an array and uses them in order\n * falling back to the next one if a request times out.\n *\n * This is useful for using the Balancer API while being able to fall back to the graph if it is down\n * to ensure Balancer is maximally decentralized.\n **/\nexport class PoolsFallbackRepository implements Findable<Pool, PoolAttribute> {\n  currentProviderIdx: number;\n  timeout: number;\n\n  constructor(\n    private readonly providers: PoolRepository[],\n    options: PoolsFallbackRepositoryOptions = {}\n  ) {\n    this.currentProviderIdx = 0;\n    this.timeout = options.timeout || 10000;\n  }\n\n  async fetch(options?: PoolsRepositoryFetchOptions): Promise<Pool[]> {\n    return this.fallbackQuery('fetch', [options]);\n  }\n\n  get currentProvider(): PoolRepository | undefined {\n    if (\n      !this.providers.length ||\n      this.currentProviderIdx >= this.providers.length\n    ) {\n      return;\n    }\n\n    return this.providers[this.currentProviderIdx];\n  }\n\n  async find(id: string): Promise<Pool | undefined> {\n    return this.fallbackQuery('find', [id]);\n  }\n\n  async findBy(\n    attribute: PoolAttribute,\n    value: string\n  ): Promise<Pool | undefined> {\n    return this.fallbackQuery('findBy', [attribute, value]);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async fallbackQuery(func: string, args: unknown[]): Promise<any> {\n    if (this.currentProviderIdx >= this.providers.length) {\n      throw new Error('No working providers found');\n    }\n\n    let result;\n\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const currentProvider = this.providers[this.currentProviderIdx] as any;\n      result = await Promise.race<unknown | undefined>([\n        // eslint-disable-next-line prefer-spread\n        currentProvider[func].apply(currentProvider, args),\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error('timeout')), this.timeout)\n        ),\n      ]);\n    } catch (e: unknown) {\n      const message = (e as Error).message;\n      if (message === 'timeout') {\n        console.error(\n          'Provider ' +\n            this.currentProviderIdx +\n            ' timed out, falling back to next provider'\n        );\n      } else {\n        console.error(\n          'Provider ' + this.currentProviderIdx + ' failed with error: ',\n          message,\n          ', falling back to next provider'\n        );\n      }\n      this.currentProviderIdx++;\n      result = await this.fallbackQuery.call(this, func, args);\n    }\n\n    return result;\n  }\n}\n","import { Findable, Pool, Searchable } from '@/types';\nimport { PoolAttribute } from './types';\n\nexport class PoolsStaticRepository\n  implements Findable<Pool, PoolAttribute>, Searchable<Pool>\n{\n  constructor(private pools: Pool[]) {}\n\n  async find(id: string): Promise<Pool | undefined> {\n    return this.pools.find((pool) => {\n      return pool.id.toLowerCase() === id.toLowerCase();\n    });\n  }\n\n  async findBy(\n    attribute: PoolAttribute,\n    value: string\n  ): Promise<Pool | undefined> {\n    return this.pools.find((pool) => {\n      return pool[attribute] === value;\n    });\n  }\n\n  async all(): Promise<Pool[]> {\n    return this.pools;\n  }\n\n  async where(filter: (pool: Pool) => boolean): Promise<Pool[]> {\n    return (await this.all()).filter(filter);\n  }\n}\n","import { Findable, Price, TokenPrices } from '@/types';\n\nexport class StaticTokenPriceProvider implements Findable<Price> {\n  tokenPrices: TokenPrices;\n  constructor(tokenPrices: TokenPrices) {\n    this.tokenPrices = Object.fromEntries(\n      Object.entries(tokenPrices).map(([address, price]) => {\n        return [address.toLowerCase(), price];\n      })\n    );\n  }\n\n  async find(address: string): Promise<Price | undefined> {\n    const lowercaseAddress = address.toLowerCase();\n    const price = this.tokenPrices[lowercaseAddress];\n    if (!price) return;\n    return price;\n  }\n\n  async findBy(attribute: string, value: string): Promise<Price | undefined> {\n    if (attribute != 'address') {\n      return undefined;\n    }\n\n    return this.find(value);\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport { Zero, WeiPerEther as ONE } from '@ethersproject/constants';\n\n// Should match MAX_WEIGHTED_TOKENS from v2-helpers/constants\n// Including would introduce a dependency\nconst MaxWeightedTokens = 100;\n\n/**\n * Normalize an array of token weights to ensure they sum to `1e18`\n * @param weights - an array of token weights to be normalized\n * @returns an equivalent set of normalized weights\n */\nexport function toNormalizedWeights(weights: BigNumber[]): BigNumber[] {\n  // When the number is exactly equal to the max, normalizing with common inputs\n  // leads to a value < 0.01, which reverts. In this case fill in the weights exactly.\n  if (weights.length == MaxWeightedTokens) {\n    return Array(MaxWeightedTokens).fill(ONE.div(MaxWeightedTokens));\n  }\n\n  const sum = weights.reduce((total, weight) => total.add(weight), Zero);\n  if (sum.eq(ONE)) return weights;\n\n  const normalizedWeights = [];\n  let normalizedSum = Zero;\n  for (let index = 0; index < weights.length; index++) {\n    if (index < weights.length - 1) {\n      normalizedWeights[index] = weights[index].mul(ONE).div(sum);\n      normalizedSum = normalizedSum.add(normalizedWeights[index]);\n    } else {\n      normalizedWeights[index] = ONE.sub(normalizedSum);\n    }\n  }\n\n  return normalizedWeights;\n}\n\n/**\n * Check whether a set of weights are normalized\n * @param weights - an array of potentially unnormalized weights\n * @returns a boolean of whether the weights are normalized\n */\nexport const isNormalizedWeights = (weights: BigNumberish[]): boolean => {\n  const totalWeight = weights.reduce(\n    (total: BigNumber, weight) => total.add(weight),\n    Zero\n  );\n  return totalWeight.eq(ONE);\n};\n"],"names":["StablePoolJoinKind","StablePhantomPoolJoinKind","StablePoolExitKind","WeightedPoolJoinKind","WeightedPoolExitKind","StablePoolEncoder","constructor","joinInit","amountsIn","defaultAbiCoder","encode","INIT","joinCollectProtocolFees","COLLECT_PROTOCOL_FEES","joinExactTokensInForBPTOut","minimumBPT","EXACT_TOKENS_IN_FOR_BPT_OUT","joinTokenInForExactBPTOut","bptAmountOut","enterTokenIndex","TOKEN_IN_FOR_EXACT_BPT_OUT","exitExactBPTInForOneTokenOut","bptAmountIn","exitTokenIndex","EXACT_BPT_IN_FOR_ONE_TOKEN_OUT","exitExactBPTInForTokensOut","EXACT_BPT_IN_FOR_TOKENS_OUT","exitBPTInForExactTokensOut","amountsOut","maxBPTAmountIn","BPT_IN_FOR_EXACT_TOKENS_OUT","WeightedPoolEncoder","joinAllTokensInForExactBPTOut","ALL_TOKENS_IN_FOR_EXACT_BPT_OUT","ManagedPoolEncoder","exitForManagementFees","MANAGEMENT_FEE_TOKENS_OUT","ComposableStablePoolJoinKind","ComposableStablePoolExitKind","ComposableStablePoolEncoder","isProduction","process","env","NODE_ENV","prefix","invariant","condition","message","Error","provided","value","concat","getPoolAddress","poolId","length","slice","getPoolSpecialization","specializationCode","parseInt","getPoolNonce","BigNumber","from","Network","POOLS_GENERIC","IdsMap","Pagination","PerPage","PerPool","PerPoolInitial","DelegateOwner","ZeroAddress","DynamicFees","Gauntlet","BlockList","ExcludedPoolTypes","Stable","AllowList","Investment","Factories","Stakable","Metadata","name","hasIcon","POOLS_MAP","KOVAN","staBAL","bbAaveUSD","v1","v2","veBAL","GOERLI","MAINNET","POLYGON","xMatic","stMatic","mai4","maiBbaUsd","ARBITRUM","GNOSIS","OASYS","transposeMatrix","matrix","map","_","columnIndex","row","AssetHelpers","wethAddress","this","ETH","AddressZero","isETH","token","isEqual","isWETH","WETH","translateToERC20","getAddress","sortTokens","tokens","others","forEach","array","erc20Tokens","sortedTranspose","sort","tokenA","tokenB","toLowerCase","cmpTokens","sortedErc20s","sortedOthers","includes","addressA","addressB","balancerErrorCodes","BalancerErrors","async","accountToAddress","account","Signer","isSigner","address","RelayerAction","isErrorCode","error","errorCode","replace","Object","keys","parseErrorCode","actualError","tryParseErrorCode","isBalancerError","values","encodeError","encodedError","entries","find","RelayerAuthorization","encodeCalldataAuthorization","calldata","deadline","signature","encodedDeadline","hexZeroPad","hexValue","v","r","s","splitSignature","signJoinAuthorization","validator","user","allowedSender","allowedCalldata","nonce","signAuthorizationFor","JoinPool","signExitAuthorization","ExitPool","signSwapAuthorization","Swap","signBatchSwapAuthorization","BatchSwap","signSetRelayerApprovalAuthorization","SetRelayerApproval","type","MAX_DEADLINE","MaxUint256","chainId","provider","getNetwork","userAddress","getNextNonce","domain","version","verifyingContract","types","sender","toString","_signTypedData","BalancerMinterAuthorization","signSetMinterApproval","minterContract","minter","approval","SetMinterApproval","BZERO","BigInt","BONE","ONE","_require","b","_computeScalingFactor","tokenDecimals","decimalsDifference","_upscale","amount","scalingFactor","SolidityMaths","mulDownFixed","_upscaleArray","amounts","scalingFactors","upscaledAmounts","Array","i","static","a","c","roundUp","divUp","divDown","product","aInflated","x","y","raw","LogExpMath","pow","maxError","add","mulUpFixed","MAX_POW_RELATIVE_ERROR","ONE_18","x_int256","MILD_EXPONENT_BOUND","y_int256","logx_times_y","LN_36_LOWER_BOUND","LN_36_UPPER_BOUND","ln_36_x","_ln_36","_ln","MIN_NATURAL_EXPONENT","MAX_NATURAL_EXPONENT","exp","firstAN","x0","a0","x1","a1","ONE_20","x2","a2","x3","a3","x4","a4","x5","a5","x6","a6","x7","a7","x8","a8","x9","a9","term","seriesSum","z","ONE_36","z_squared","num","sum","a10","x10","a11","x11","parsePoolInfo","pool","wrappedNativeAsset","parsedTokens","parsedDecimals","decimals","undefined","parsedBalances","parseFixed","balance","upScaledBalances","parsedWeights","weight","parsedPriceRates","priceRate","assetHelpers","sfString","parsedAmp","amp","parsedTotalShares","totalShares","parsedSwapFee","swapFee","scalingFactorsWithoutBpt","parsedTokensWithoutBpt","parsedBalancesWithoutBpt","bptIndex","indexOf","push","TOKENS_GENERIC","Popular","Symbols","Addresses","nativeAsset","wNativeAsset","BAL","TOKENS_MAP","bbaUSD","PriceChainMap","bbaUSDv2","DFV","TOKENS","networkId","PoolGaugesAttributes","PoolShareAttributes","GaugeShareAttributes","PoolSpecialization","UserBalanceOpKind","PoolBalanceOpKind","PoolType","_permanentCensorErrors","_censorErrors","LogLevels","debug","default","info","warning","off","_logLevel","_globalLogger","_normalizeError","missing","form","normalize","join","String","fromCharCode","_checkNormalize","LogLevel","ErrorCode","HEX","Logger","defineProperty","enumerable","writable","_log","logLevel","args","level","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","key","Uint8Array","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","assert","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","censorship","permanent","globalLogger","logger","names","formatUnits","unitName","index","formatFixed","parseUnits","yieldTokens","waUSDT","waUSDC","waDAI","wamDAI","wamUSDC","wamUSDT","allYieldTokens","wrappedTokensMap","aToken","underlying","aTokens","t","underlyingAssets","underlyingToWrapped","fromEntries","wrapped","endpoint","aave","network","noRates","graphqlQuery","operationName","variables","response","axios","post","data","reserves","aprEntries","underlyingAsset","Math","round","parseFloat","liquidityRate","tokenAddressForPricing","addressMapIn","unwrapToken","addressMap","wrappedAddress","lowercase","toLocaleLowerCase","aaveChain","aaveWrappedMap","Debouncer","fn","wait","requestSet","Set","promisedCalls","promisedCount","debounceCancel","fetch","attr","promise","resolve","reject","Promise","res","rej","makePromise","timeout","clearTimeout","setTimeout","requestAttrs","clear","then","results","catch","valueWithTrimmedDecimals","RegExp","result","match","parsedValue","_parseFixed","_formatFixed","parseToBigInt18","toBigInt","isSameAddress","address1","address2","insert","arr","newItem","BalancerAPIArgsFormatter","format","SubgraphArgsFormatter","operatorMap","gt","lt","eq","in","not_in","contains","whereQuery","where","filter","operator","GraphQLArgsBuilder","merge","other","mergedArgs","mergeWith","objValue","srcValue","isArray","formatter","SwapType","getLimitsForSlippage","tokensIn","tokensOut","swapType","deltas","assets","slippage","limits","fill","Zero","some","tokenIn","slippageAmount","WeiPerEther","SwapExactOut","mul","div","tokenOut","sub","SwapExactIn","bpsPerOne","mulSlippage","subSlippage","delta","addSlippage","balancerVault","BALANCER_NETWORK_CONFIG","addresses","contracts","vault","multicall","balancerHelpers","lidoRelayer","relayerV3","relayerV4","gaugeController","feeDistributor","protocolFeePercentagesProvider","veBal","veBalProxy","weightedPoolFactory","composableStablePoolFactory","lbpRaisingTokens","stETH","wstETH","bal","bbaUsd","urls","subgraph","gaugesSubgraph","blockNumberSubgraph","pools","wETHwstETH","id","poolsToIgnore","sorConnectingTokens","symbol","ROPSTEN","RINKEBY","OPTIMISM","networkAddresses","BalancerErrorCode","BalancerError","super","getMessage","SWAP_ZERO_RETURN_AMOUNT","UNWRAP_ZERO_AMOUNT","WRAP_ZERO_AMOUNT","QUERY_BATCH_SWAP","POOL_DOESNT_EXIST","UNSUPPORTED_POOL_TYPE","UNSUPPORTED_PAIR","NO_POOL_DATA","INPUT_OUT_OF_BOUNDS","INPUT_LENGTH_MISMATCH","INPUT_TOKEN_INVALID","TOKEN_MISMATCH","MISSING_DECIMALS","MISSING_TOKENS","MISSING_AMP","MISSING_PRICE_RATE","MISSING_WEIGHT","INPUT_ZERO_NOT_ALLOWED","RELAY_SWAP_AMOUNTS","NO_VALUE_PARAMETER","TIMESTAMP_IN_THE_FUTURE","ILLEGAL_PARAMETER","JOIN_DELTA_AMOUNTS","EXIT_DELTA_AMOUNTS","StablePoolExit","buildExitExactBPTIn","exiter","bptIn","shouldUnwrapNativeAsset","singleTokenMaxOut","isNegative","unwrappedTokens","sortedTokens","sortedUpscaledBalances","sortedScalingFactors","userData","expectedAmountsOut","minAmountsOut","singleTokenMaxOutIndex","amountOut","SOR","StableMathBigInt","_calcTokenOutGivenExactBptIn","amountsOutScaledDown","downscaledAmounts","divDownFixed","_downscaleDownArray","_calcTokensOutGivenExactBptIn","to","functionName","attributes","recipient","exitPoolRequest","toInternalBalance","Vault__factory","createInterface","encodeFunctionData","buildExitExactTokensOut","tokensList","sortedUpScaledBalances","sortedAmountsOut","upScaledAmountsOut","_calcBptInGivenExactTokensOut","maxBPTIn","expectedBPTIn","StablePoolJoin","buildJoin","joiner","sortedAmountsIn","scaledAmountsIn","expectedBPTOut","_calcBptOutGivenExactTokensIn","minBPTOut","joinPoolRequest","maxAmountsIn","fromInternalBalance","StablePoolLiquidity","calcTotal","sumBalance","sumValue","_a","price","usd","avgPrice","_b","SCALING_FACTOR","StablePoolSpotPrice","calcPoolSpotPrice","stablePool","StablePool","fromPool","poolPairData","parsePoolPairData","_spotPriceAfterSwapExactTokenInForTokenOut","ZERO","calcPriceImpact","bptAmount","bptZeroPriceImpact","isJoin","pi","calcPriceImpactJoin","calcPriceImpactExit","AMP_PRECISION","bptSpotPrice","balances","bptSupply","tokenIndexIn","totalCoins","D","numTokens","prevInvariant","ampTimesTotal","P_D","j","_calculateInvariant","S","D_P","alpha","beta","gamma","partial_x","minus_partial_D","divUpFixed","StablePoolPriceImpact","tokenAmounts","exit","liquidity","spotPriceCalculator","priceImpactCalculator","PhantomStablePoolSpotPrice","metaStablePool","PhantomStablePool","StablePhantomPriceImpact","cloneDeep","findIndex","priceRates","rate","splice","balancesScaled","ComposableStablePoolJoin","ComposableStablePoolExit","ComposableStable","WeightedPoolExit","sortedBalances","sortedWeights","WeightedMaths","sortedAmounts","w","WeightedPoolJoin","WeightedPoolLiquidity","sumWeight","toFixed","totalWeight","reduce","total","WeightedPoolSpotPrice","isBPTAsToken","bptAsToken","weightedPool","WeightedPool","spotPrice","pop","WeightedPoolPriceImpact","weightString","Weighted","MetaStablePoolExit","sortedPriceRates","scaledBalances","scaledAmountOut","scaledAmounts","MetaStablePoolJoin","MetaStablePoolLiquidity","MetaStablePoolSpotPrice","MetaStablePool","MetaStablePoolPriceImpact","MetaStable","StablePhantomPoolExit","StablePhantomPoolJoin","StablePhantom","LinearPoolExit","LinearPoolJoin","LinearPoolLiquidity","LinearPoolSpotPrice","linearPool","LinearPool","LinearPriceImpact","Linear","PoolTypeConcerns","config","weighted","stable","composableStable","metaStable","stablePhantom","linear","poolType","Liquidity","tokenPrices","subPoolLiquidity","all","findBy","getLiquidity","totalBPT","bptInParentPool","liquidityInParentPool","totalSubPoolLiquidity","totalLiquidity","subPool","nonPoolTokens","nonPoolTokensWithUpdatedPrice","tokenPrice","latestUSDPrice","parsedTokenLiquidity","queryBatchSwap","vaultContract","swaps","funds","callStatic","d","err","queryBatchSwapWithSor","sor","queryWithSor","fetchPools","assetArray","swap","getSorSwapInfo","returnAmount","tokenAddresses","batchedSwaps","newAssetArray","flat","poolSwap","assetInIndex","assetOutIndex","batchSwaps","returnTokens","returnAmounts","swapTypeSOR","SwapTypes","getSwaps","__assign","assign","n","arguments","p","prototype","hasOwnProperty","call","docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","string","trim","processFragments","ast","seenKeys","definitions","fragmentDefinition","fragmentName","sourceKey","loc","source","body","substring","start","end","sourceKeySet","get","has","set","parseDocument","cacheKey","parsed","parse","allowLegacyFragmentVariables","doc","workSet","node","startToken","endToken","stripLoc","gql","literals","_i","arg","gql_1","extras","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","AmpUpdate_OrderBy","BalancerSnapshot_OrderBy","Balancer_OrderBy","GradualWeightUpdate_OrderBy","InvestType","JoinExit_OrderBy","LatestPrice_OrderBy","ManagementOperation_OrderBy","OperationType","OrderDirection","PoolContract_OrderBy","PoolHistoricalLiquidity_OrderBy","PoolShare_OrderBy","PoolSnapshot_OrderBy","PoolToken_OrderBy","Pool_OrderBy","PriceRateProvider_OrderBy","SwapFeeUpdate_OrderBy","Swap_OrderBy","TokenPrice_OrderBy","TokenSnapshot_OrderBy","Token_OrderBy","TradePairSnapshot_OrderBy","TradePair_OrderBy","UserInternalBalance_OrderBy","User_OrderBy","_SubgraphErrorPolicy_","gql$1","SubgraphPoolShareFragmentDoc","SubgraphPoolFragmentDoc","SubgraphPoolSnapshotFragmentDoc","SubgraphJoinExitFragmentDoc","SubgraphBalancerFragmentDoc","SubgraphTokenPriceFragmentDoc","SubgraphTokenLatestPriceFragmentDoc","SubgraphUserFragmentDoc","PoolShareDocument","PoolSharesDocument","PoolsDocument","AllPoolsDocument","PoolDocument","PoolHistoricalLiquiditiesDocument","PoolSnapshotsDocument","JoinExitsDocument","BalancersDocument","TokenPricesDocument","TokenLatestPricesDocument","TokenLatestPriceDocument","UserDocument","UsersDocument","defaultWrapper","action","_operationName","_operationType","getSdk","client","withWrapper","PoolShare","requestHeaders","wrappedRequestHeaders","request","PoolShares","Pools","AllPools","Pool","PoolHistoricalLiquidities","PoolSnapshots","JoinExits","Balancers","TokenPrices","TokenLatestPrices","TokenLatestPrice","User","Users","Chain","GaugeFactory_OrderBy","GaugeShare_OrderBy","GaugeType_OrderBy","GaugeVote_OrderBy","Gauge_OrderBy","LiquidityGauge_OrderBy","RewardToken_OrderBy","RootGauge_OrderBy","VotingEscrowLock_OrderBy","VotingEscrow_OrderBy","SubgraphGaugeShareFragmentDoc","SubgraphLiquidityGaugeFragmentDoc","SubgraphPoolWithPreferentialGaugeFragmentDoc","GaugeShareDocument","GaugeSharesDocument","LiquidityGaugesDocument","PoolGaugesDocument","createSubgraphClient","subgraphUrl","GraphQLClient","createGaugesClient","GaugeShare","GaugeShares","LiquidityGauges","PoolGauges","Gauges.getSdk","multicallAbi","Multicall","Contract","Multicaller","multiAddress","abi","options","calls","paths","interface","Interface","path","obj","executeMulticall","multi","aggregate","decodeFunctionResult","getOnChainBalances","subgraphPoolsOriginal","vaultAddress","abis","aTokenRateProvider","weightedPoolAbi","stablePoolAbi","elementPoolAbi","linearPoolAbi","composableStableAbi","multiPool","supportedPoolTypes","PoolFilter","subgraphPools","execute","onChainPools","onchainData","poolTokens","weights","totalSupply","virtualSupply","actualSupply","targets","lowerTarget","upperTarget","wrappedIndex","T","SubgraphPoolDataService","sorConfig","mapped","expiryTime","unitSeconds","principalToken","baseToken","mapPools","getSubgraphPools","addr","fetchOnChainBalances","pool0","pool1000","pool2000","swapEnabled","totalShares_gt","orderBy","TotalLiquidity","orderDirection","Desc","CoingeckoTokenPriceService","tokenAddress","ethPerToken","getTokenPriceInNativeAsset","platformId","nativeAssetId","headers","Accept","SubgraphTokenPriceService","weth","getLatestPriceInEthFromSubgraph","latestPrices","asset_in","pricesKeyedOnId","keyBy","matchingLatestPrices","asset","pricingAssetPricedInEth","pricingAsset","getNetworkConfig","networkConfig","customSubgraphUrl","tenderly","Sor","sdkConfig","getSorConfig","sorNetworkConfig","getSorNetworkConfig","JsonRpcProvider","rpcUrl","subgraphClient","getPoolDataService","getTokenPriceService","tokenPriceService","poolDataService","connectingTokens","checkSimpleFlashSwapParams","poolIds","createSwaps","deltaToExpectedProfit","Number","calcProfit","profits","underlyingToWrappedMap","tokenForSwaps","Relayers","relayerResolver","assetIn","assetOut","lido","swapFragment","relayer","BatchRelayerLibraryAbi","amountForLimit","max","maxSlippage","min","decorateSorSwapInfo","swapInfo","amountIn","swapAmount","amountInForLimits","swapAmountForSwaps","returnAmountFromSwaps","amountOutForLimits","tokenInForSwaps","tokenOutFromSwaps","SingleSwapBuilder","setFunds","setDeadline","setLimits","limit","singleSwap","attrs","fragment","inputs","outputReference","f","BatchSwapBuilder","minAmountOut","maxAmountIn","split","outputReferences","Swaps","sorOrConfig","connect","l","gasPrice","maxPools","buildSwap","builder","batchSwap","encodeBatchSwap","flashLoanAmount","walletAddress","convertSimpleFlashSwapToBatchSwapParameters","getPools","tokenAddress0","tokenAddress1","isProfitable","querySimpleFlashSwap","swapInput","relayerLibrary","relayerLibraryAbi","Relayer","swapsOrConfig","amountBn","mask","check","_hex","maxAmount","relayerAdress","approved","authorisation","gaugeAddress","poolKind","staticToken","fromUnderlying","toUnderlying","reference","isTemporary","CHAINED_REFERENCE_TEMP_PREFIX","CHAINED_REFERENCE_READONLY_PREFIX","paddedPrefix","repeat","ref","exitPoolInput","encodeExitPool","joinPoolInput","encodeJoinPool","slippageAmountNegative","amt","exitTokens","toChainedReference","exitCall","constructExitCall","queryResult","finalTokensOut","slippageAmountPositive","exitToken","elem","swapRecipient","function","outputs","aaveStaticTokens","rates","fetchOnChain","encodeSwapUnwrap","amountWrapped","amountUnwrapped","abs","amountsUnwrapped","amountsWrapped","amountInwrapped","wrappedTokens","unwrapCalls","wrappedToken","encodedUnwrap","encodeUnwrapAaveStaticToken","signRelayerApproval","relayerAddress","signerAddress","signer","Subgraph","initClient","Pricing","poolsDict","parseToPoolsDict","routeProposer","getCandidatePathsFromDict","getSpotPriceAfterSwapForPath","isLessThan24Hours","incomingDateInSec","Date","now","VeBal","multicaller","veBalAbi","formatLockInfo","lockInfo","lockedAmount","lockedEndDate","locked","hasExistingLock","lockedEndDateNormalised","toNumber","isExpired","epoch","VeBalProxy","instance","veBalProxyAbi","adjustedBalanceOf","RelayerV3ABI","RelayerV4ABI","Contracts","networkOrAddresses","contractAddresses","BalancerHelpers__factory","LidoRelayer__factory","ERC20","getErc20","liquidityGauge","getLiquidityGauge","signerOrProvider","LiquidityGauge","ADDRESSES","staBal3","gauge","assetOrder","bbausd1","bbausd2","linearUsdc1","linearDai1","linearUsdt1","linearUsdc2","linearDai2","linearUsdt2","maiusd","maibbausd","DAI","USDC","USDT","miMATIC","staBal3_2","staBal3_3","balancerRelayerInterface","balancerRelayerAbi","EXIT_DAI","EXIT_USDC","EXIT_USDT","SWAP_RESULT_BBAUSD","StaBal3Builder","staBal3Amount","minBbausd2Out","staked","lte","buildSetRelayerApproval","buildWithdraw","buildExit","buildDeposit","expectedBptReturn","MaxInt256","ceil","encodeGaugeWithdraw","encodeGaugeDeposit","encodeSetRelayerApproval","BbaUsd1Builder","bbausd1Amount","tokenBalances","callData","tokenBalance","usdcBptAmt","daiBptAmt","usdtBptAmt","SWAP_RESULT","EXIT_RESULTS","StablesBuilder","minBptOut","underlyingTokens","poolAddress","EXIT_MIMATIC","MaiusdBuilder","Migrations","stabal3","decode","output","swapIndex","multicallResult","stables","Zaps","migrations","ImpermanentLossService","tokenHistoricalPrices","timestamp","prepareData","poolValueDelta","getPoolValueDelta","holdValueDelta","getHoldValueDelta","calculateImpermanentLoss","floor","priceDelta","entryTimestamp","getWeights","entryPrices","getEntryPrices","exitPrices","getExitPrices","getAssets","getDelta","entryPrice","exitPrice","noWeights","every","uniformWeight","prices","tokensWithPrice","INITIAL_RATE","START_EPOCH_TIME","RATE_REDUCTION_TIME","RATE_REDUCTION_COEFFICIENT","weekly","currentTimestamp","getTime","miningEpoch","totalEmissions","startingEpoch","endingEpoch","currentEpoch","secondsInStartingEpoch","secondsInEndingEpoch","ProtocolRevenue","repository","multicallData","balPrice","balAddress","lastWeekBalRevenue","balAmount","lastWeekBBAUsdRevenue","bbAUsdAmount","bbAUsdPrice","veBalSupply","PoolFees","yesterdaysPools","yesterdaysPool","totalSwapFee","createTime","PoolApr","tokenMeta","tokenYields","feeCollector","liquidityGauges","last24hFees","feesDailyBsp","protocolSwapFeePercentage","breakdown","bptFreeTokens","aprs","apr","tokenYield","poolTypeVersion","isExemptFromYieldProtocolFee","protocolYieldFeeCache","subSwapFees","swapFees","subApr","tokenAprs","getWeight","poolToken","bptPrice","_c","_d","_e","weightedAprs","idx","pickBy","zipObject","identity","boost","workingSupply","bptPriceUsd","balPriceUsd","rewardTokens","balReward","reward","rewardTokenApr","totalSupplyUsd","rewardValue","gaugeBalEmissionsUsd","emissions.weekly","relativeWeight","gaugeSupplyUsd","rewards","tAddress","rewardTokensBreakdown","rewardValueScaled","revenue","dailyRevenue","minStakingApr","maxStakingApr","rewardAprs","protocolApr","stakingApr","last24h","liquidityService","fee","protocolSwapFeeCache","rewardData","period_finish","yearlyReward","meta","joinActions","AaveLinear","EulerLinear","ERC4626Linear","Element","LiquidityBootstrapping","exitActions","PoolGraph","wrapMainTokens","rootPool","buildGraphFromPool","getTokenTotal","nodeIndex","parent","proportionOfParent","parentPool","leafTokenDecimals","createInputTokenNode","joinAction","exitAction","tokenTotal","spotPrices","sp","poolNode","children","marked","isLeaf","createLinearNodeChildren","proportion","tokenWeight","finalProportion","childNode","linearPoolNode","wrappedNodeInfo","createWrappedTokenNode","mainIndex","mainTokenDecimals","nodeInfo","wrappedTokenNode","inputNode","root","nodes","orderedNodes","currentNode","shift","getGraphNodes","poolsGraph","rootNode","buildGraphFromRootPool","orderByBfs","reverse","TenderlyHelper","tenderlyConfig","simulateMulticall","encodedStateOverrides","encodeBalanceAndAllowanceOverrides","encodeRelayerApprovalOverride","simulateTransaction","state_objects","storage","network_id","block_number","blockNumber","input","save_if_fails","simulation_type","SIMULATE_URL","tenderlyUrl","opts","transaction","transaction_info","call_trace","stateOverrides","requestStateOverrides","k","ENCODE_STATES_URL","networkID","project","accessKey","Join","createCalls","joinPaths","outputIndexes","createActionCalls","unshift","createSetRelayerApproval","amountsOutByJoinPath","staticResult","tenderlyHelper","totalAmountOut","outputIndex","minAmountsOutByJoinPath","totalMinAmountOut","isPeek","joinPath","isLeafJoin","nodeChildrenWithinJoinPath","joinNode","child","isLastChainedCall","minOut","createAaveWrap","createBatchSwap","updateDeltas","createJoinPool","outputRef","peekCall","encodePeekChainedReferenceValue","joinPathIndex","encodeWrapAaveDynamicToken","getOutputRefValue","expectedOut","inputToken","inputValue","isRef","userTokenIn","inputTokens","inputAmts","childWithinJoinPath","userDataAmounts","ethIndex","constructJoinCall","userAmountsTokenIn","isChainedReference","userAmountOut","getJoinPaths","totalBptZeroPi","totalBptZeroPriceImpact","queryData","priceImpact","assertDeltas","inputNodes","nonLeafInputNodes","nonLeafInputNode","nonLeafAmountIn","totalProportions","proportionalNonLeafAmountIn","inputTokenNode","nonLeafJoinPath","updateInputAmounts","ajdustAmountInDiff","tokenInInputNodes","amountsInSumforTokenIn","diff","leafJoinPath","updateTotalProportions","updateNodeAmount","nonLeafJoinPaths","leafNode","bptOut","bptOutZeroPiForInputNode","spProduct","parentNode","childAddress","spPriceScaled","inputAmountScaled","tokenIndex","totalProportion","inputAmount","Exit","amountsOutByExitPath","simulationResult","multiCallResult","expectedAmountsOutByExitPath","minAmountsOutByExitPath","expectedAmountOut","amountsOutByTokenOut","tokensOutByExitPath","expectedAmountsOutMap","getExitPaths","outputNodes","exitPaths","outputNode","exitPath","amountsInSum","accumulator","currentExitPath","amountInForCurrentExitPath","amountsInDiff","getOutputRef","exitPathIndex","amountBptIn","staticCall","calculatePriceImpact","orderedNodesForJoin","exitChild","isLastActionFromExitPath","createExitPool","userTokenOutAmount","userBptAmount","userDataTokens","userAmountTokensOut","userBptIn","PoolVolume","totalSwapVolume","ComposableStableFactory","create","factoryAddress","amplificationParameter","rateProviders","tokenRateCacheDurations","exemptFromYieldProtocolFeeFlags","owner","swapFeeScaled","sortedRateProviders","sortedTokenRateCacheDurations","sortedExemptFromYieldProtocols","composablePoolInterface","createFunctionAbi","INTERNAL_ERROR_INVALID_ABI","createFunctionFragment","FunctionFragment","buildInitJoin","WeightedFactory","weightedPoolInterface","WeightedPoolFactory__factory","PoolFactory__factory","of","ParamsBuilder","encoder","Gyro2","Gyro3","getEncoder","buildQueryJoinExactIn","buildQueryJoinExactOut","buildQueryExitToSingleToken","buildQueryExitProportionally","buildQueryExitExactOut","maxBptIn","EmissionsService","liquidityGaugesRepository","proportionalAmounts","tokensWithoutBpt","referenceTokenIndex","notImplemented","repositories","aprService","joinService","poolsOnChain","exitService","feesService","volumeService","poolFactory","impermanentLossService","emissionsService","dataSource","calcImpLoss","joinPool","exitPool","concerns","queries","methods","calcSpotPrice","calcProportionalAmounts","Queries.ParamsBuilder","bind","wrap","param","list","gaugeControllerInterface","GaugeControllerMulticallRepository","multicallAddress","gaugeControllerAddress","gaugeAddresses","payload","AbstractSubgraphRepository","query","attribute","first","skip","BalancerSubgraphRepository","blockHeight","GaugesSubgraphRepository","GaugeSharesRepository","Balance","block","number","gaugeShares","mapType","subgraphGaugeShare","isKilled","findAllBy","UserAddress","gaugeId","GaugeId","liquidityGaugeV5Interface","LiquidityGaugesMulticallRepository","res0x","rewardCounts","passingRewardCounts","getRewardCounts","gaugesWithRewards","startIndexes","gaugeIndex","passingRewardTokens","getRewardTokens","decoded","LiquidityGaugesSubgraphRepository","gauges","qauges","preferentialGauge_not","preferentialGauge","LiquidityGaugeSubgraphRPCProvider","workingSupplies","relativeWeights","g","getWorkingSupplies","getRelativeWeights","distributor","last_update","integral","periodFinish","compose","subgraphGauge","BalancerAPIClient","apiKey","toPayload","jsonToGraphQLQuery","PoolsSubgraphRepository","defaultArgs","formattedQuery","fetchDefault","subgraphPool","factory","mapToken","priceRateProviders","_f","_g","_h","_j","subgraphToken","subPoolInfo","mapSubPools","metadata","mapSubPoolToken","PoolsSubgraphOnChainRepository","poolsSubgraph","PoolGaugesRepository","PoolJoinExitAttributes","PoolJoinExitRepository","Timestamp","Asc","joinExits","item","Sender","PoolSharesRepository","poolShares","subgraphPoolShare","PoolId","StaticTokenProvider","CoingeckoPriceRepository","baseTokenAddresses","urlBase","platform","debouncer","signal","finally","fetchNative","Assets","assetId","MATIC","XDAI","inputAddress","baseAddress","nativePrice","CoingeckoHistoricalPriceRepository","urlRange","range","SubgraphPriceRepository","TokenPriceProvider","coingeckoRepository","subgraphRepository","aaveRates","getRate","HistoricalPriceProvider","wrappedATokenInterface","AaveRates","wrappedATokenAddress","wrappedAToken","feeDistributorInterface","veBalInterface","bbAUsdInterface","FeeDistributorRepository","feeDistributorAddress","veBalAddress","bbAUsdAddress","previousWeek","getPreviousWeek","fromTimestamp","midnight","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","daysSinceThursday","getUTCDay","weeksToGoBack","vaultInterface","protocolFeesCollectorInterface","swapFeePercentagePromise","FeeCollectorRepository","getProtocolFeesCollector","collector","fees","getSwapFeePercentage","swapFeePercentage","iProtocolFeePercentagesProvider","feesPromise","ProtocolFeesProvider","protocolFeePercentagesProviderAddress","yieldFee","protocolFees","arbitrumStEth","smaApr","rETH","rocketpool","yearlyAPR","stMATIC","lidoPolygon","returnApr","usdcUSDplus","usdcUSDplus2","overnight","bsp","sfrxETH","sfrxethApr","maticX","qETH","tranchess","weeklyAveragePnlPercentage","USDR","usdr","stafi","stakeApr","contractFetcher","getPoolsUI","components","internalType","stateMutability","sApe","tessera","contract","apePool","stakedAmount","currentTimeRange","rewardsPerHour","eUSDC","eDAI","eUSDT","eFRAX","euler","eTokenAddress_in","eTokenAddress","supplyAPY","yieldSourceMap","lidoTokens","lidoPolygonTokens","aaveTokens","overnightTokens","rocketpoolTokens","fraxTokens","staderLabsTokens","tranchessTokens","usdrTokens","stafiTokens","tesseraTokens","eulerTokens","TokenYieldsRepository","sources","yields","fetchBlockByTime","blocks","BlockNumberRepository","dayAgo","ActionStep","ActionType","Data","subgraphQuery","poolJoinExits","poolGauges","blockNumbers","blockDayAgo","initialCoingeckoList","subgraphPriceRepository","coingeckoHistoricalRepository","EMPTY_BATCHSWAP_ACTION","opRef","hasTokenIn","hasTokenOut","fromInternal","toInternal","approveTokens","receiver","isBpt","isExit","getActionOutputRef","actionStep","tokenOutIndex","opRefKey","TokenIn","Middle","getActionMinOut","getActionAmount","actionType","TokenOut","getActionStep","tokenInIndex","tokenInIndexAction","tokenOutIndexAction","Direct","orderActions","actions","categorizedActions","enterActions","middleActions","categorizeActions","orderedActions","allActions","isFirstSwap","lastSwap","isBptIn","batchSwapActions","createJoinAction","mainTokenInIndex","mainTokenOutIndex","newOpRefKey","bpt","createExitAction","createSwapAction","buildExitCall","bptAmtIn","exitParams","buildJoinCall","joinToken","joinTokenIndex","buildBatchSwapCall","encodeApproveVault","batchSwapInput","encodedBatchSwap","maintokenInIndex","maintokenOutIndex","rateProviderAddress","rateProviderContract","aTokenRateProviderAbi","pricing","balancerContracts","zaps","rpcProvider","fetchFromCache","nextToken","formattedArgs","__args","apiResponseData","rewardsBreakdown","tokenAprsBreakdown","providers","currentProviderIdx","fallbackQuery","currentProvider","func","race","e","lowercaseAddress","previousAction","swapAction","getActions","batchSwapCalls","totalIn","totalOut","diffOut","checkAmounts","rawCalls","spender","ownerAddress","nonces","Permit","hasJoinExit","specialization","normalizedWeights","normalizedSum"],"mappings":"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8C,cAC9C,6CAA8C,uBAC9C,6CAA8C,gBAEhDC,SAAU,CACRH,UAAW,CACT,qEACA,qEACA,qEACA,uEAGJI,SAAU,CACR,qEAAsE,CACpEC,KAAM,4BACNC,SAAS,KA2fb,CAACpB,QAAAA,QAAQ6B,SAtfkB,CAC3B3B,OAAQ,CACNqB,OACE,qEACFC,UAAW,CACTC,GAAI,qEACJC,GAAI,sEAENC,MAAO,sEAETxB,WAAY,CACVC,QAAS,GACTC,QAAS,GACTC,eAAgB,GAElBC,cAAe,6CACfC,YAAa,6CACbC,YAAa,CACXC,SAAU,IAEZC,UAAW,CAAC,IACZC,kBAAmB,CACjB,UACA,aACA,SACA,gBACA,QACA,SAEFC,OAAQ,CACNC,UAAW,CACT,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,uEAGJC,WAAY,CACVD,UAAW,CACT,qEACA,qEACA,uEAGJE,UAAW,CACT,6CAA8C,qBAC9C,6CAA8C,eAC9C,6CAA8C,aAC9C,6CAA8C,aAC9C,6CAA8C,6BAC9C,6CAA8C,6BAC9C,6CAA8C,cAC9C,6CAA8C,cAC9C,6CAA8C,aAC9C,6CAA8C,uBAC9C,6CAA8C,gBAEhDC,SAAU,CACRH,UAAW,CACT,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,qEACA,uEAGJI,SAAU,CACR,qEAAsE,CACpEC,KAAM,4BACNC,SAAS,GAEX,qEAAsE,CACpED,KAAM,4BACNC,SAAS,GAEX,qEAAsE,CACpED,KAAM,sBACNC,SAAS,GAEX,qEAAsE,CACpED,KA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"}